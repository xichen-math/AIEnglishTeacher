{"version":3,"sources":["src/common.speech/VoiceServiceRecognizer.ts"],"names":[],"mappings":"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","file":"VoiceServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["aws4.js","lru.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var aws4 = exports,\r\n    url = require('url'),\r\n    querystring = require('querystring'),\r\n    crypto = require('crypto'),\r\n    lru = require('./lru'),\r\n    credentialsCache = lru(1000)\r\n\r\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\r\n\r\nfunction hmac(key, string, encoding) {\r\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)\r\n}\r\n\r\nfunction hash(string, encoding) {\r\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)\r\n}\r\n\r\n// This function assumes the string has already been percent encoded\r\nfunction encodeRfc3986(urlEncodedString) {\r\n  return urlEncodedString.replace(/[!'()*]/g, function(c) {\r\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\r\n  })\r\n}\r\n\r\nfunction encodeRfc3986Full(str) {\r\n  return encodeRfc3986(encodeURIComponent(str))\r\n}\r\n\r\n// A bit of a combination of:\r\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\r\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\r\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\r\nvar HEADERS_TO_IGNORE = {\r\n  'authorization': true,\r\n  'connection': true,\r\n  'x-amzn-trace-id': true,\r\n  'user-agent': true,\r\n  'expect': true,\r\n  'presigned-expires': true,\r\n  'range': true,\r\n}\r\n\r\n// request: { path | body, [host], [method], [headers], [service], [region] }\r\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\r\nfunction RequestSigner(request, credentials) {\r\n\r\n  if (typeof request === 'string') request = url.parse(request)\r\n\r\n  var headers = request.headers = Object.assign({}, (request.headers || {})),\r\n      hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host)\r\n\r\n  this.request = request\r\n  this.credentials = credentials || this.defaultCredentials()\r\n\r\n  this.service = request.service || hostParts[0] || ''\r\n  this.region = request.region || hostParts[1] || 'us-east-1'\r\n\r\n  // SES uses a different domain from the service name\r\n  if (this.service === 'email') this.service = 'ses'\r\n\r\n  if (!request.method && request.body)\r\n    request.method = 'POST'\r\n\r\n  if (!headers.Host && !headers.host) {\r\n    headers.Host = request.hostname || request.host || this.createHost()\r\n\r\n    // If a port is specified explicitly, use it as is\r\n    if (request.port)\r\n      headers.Host += ':' + request.port\r\n  }\r\n  if (!request.hostname && !request.host)\r\n    request.hostname = headers.Host || headers.host\r\n\r\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'\r\n\r\n  this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null)\r\n  this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null)\r\n}\r\n\r\nRequestSigner.prototype.matchHost = function(host) {\r\n  var match = (host || '').match(/([^\\.]{1,63})\\.(?:([^\\.]{0,63})\\.)?amazonaws\\.com(\\.cn)?$/)\r\n  var hostParts = (match || []).slice(1, 3)\r\n\r\n  // ES's hostParts are sometimes the other way round, if the value that is expected\r\n  // to be region equals ‘es’ switch them back\r\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\r\n  if (hostParts[1] === 'es' || hostParts[1] === 'aoss')\r\n    hostParts = hostParts.reverse()\r\n\r\n  if (hostParts[1] == 's3') {\r\n    hostParts[0] = 's3'\r\n    hostParts[1] = 'us-east-1'\r\n  } else {\r\n    for (var i = 0; i < 2; i++) {\r\n      if (/^s3-/.test(hostParts[i])) {\r\n        hostParts[1] = hostParts[i].slice(3)\r\n        hostParts[0] = 's3'\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  return hostParts\r\n}\r\n\r\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\r\nRequestSigner.prototype.isSingleRegion = function() {\r\n  // Special case for S3 and SimpleDB in us-east-1\r\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true\r\n\r\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']\r\n    .indexOf(this.service) >= 0\r\n}\r\n\r\nRequestSigner.prototype.createHost = function() {\r\n  var region = this.isSingleRegion() ? '' : '.' + this.region,\r\n      subdomain = this.service === 'ses' ? 'email' : this.service\r\n  return subdomain + region + '.amazonaws.com'\r\n}\r\n\r\nRequestSigner.prototype.prepareRequest = function() {\r\n  this.parsePath()\r\n\r\n  var request = this.request, headers = request.headers, query\r\n\r\n  if (request.signQuery) {\r\n\r\n    this.parsedPath.query = query = this.parsedPath.query || {}\r\n\r\n    if (this.credentials.sessionToken)\r\n      query['X-Amz-Security-Token'] = this.credentials.sessionToken\r\n\r\n    if (this.service === 's3' && !query['X-Amz-Expires'])\r\n      query['X-Amz-Expires'] = 86400\r\n\r\n    if (query['X-Amz-Date'])\r\n      this.datetime = query['X-Amz-Date']\r\n    else\r\n      query['X-Amz-Date'] = this.getDateTime()\r\n\r\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'\r\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()\r\n    query['X-Amz-SignedHeaders'] = this.signedHeaders()\r\n\r\n  } else {\r\n\r\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\r\n      if (request.body && !headers['Content-Type'] && !headers['content-type'])\r\n        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\r\n\r\n      if (request.body && !headers['Content-Length'] && !headers['content-length'])\r\n        headers['Content-Length'] = Buffer.byteLength(request.body)\r\n\r\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])\r\n        headers['X-Amz-Security-Token'] = this.credentials.sessionToken\r\n\r\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])\r\n        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')\r\n\r\n      if (headers['X-Amz-Date'] || headers['x-amz-date'])\r\n        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']\r\n      else\r\n        headers['X-Amz-Date'] = this.getDateTime()\r\n    }\r\n\r\n    delete headers.Authorization\r\n    delete headers.authorization\r\n  }\r\n}\r\n\r\nRequestSigner.prototype.sign = function() {\r\n  if (!this.parsedPath) this.prepareRequest()\r\n\r\n  if (this.request.signQuery) {\r\n    this.parsedPath.query['X-Amz-Signature'] = this.signature()\r\n  } else {\r\n    this.request.headers.Authorization = this.authHeader()\r\n  }\r\n\r\n  this.request.path = this.formatPath()\r\n\r\n  return this.request\r\n}\r\n\r\nRequestSigner.prototype.getDateTime = function() {\r\n  if (!this.datetime) {\r\n    var headers = this.request.headers,\r\n      date = new Date(headers.Date || headers.date || new Date)\r\n\r\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\r\n\r\n    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\r\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)\r\n  }\r\n  return this.datetime\r\n}\r\n\r\nRequestSigner.prototype.getDate = function() {\r\n  return this.getDateTime().substr(0, 8)\r\n}\r\n\r\nRequestSigner.prototype.authHeader = function() {\r\n  return [\r\n    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),\r\n    'SignedHeaders=' + this.signedHeaders(),\r\n    'Signature=' + this.signature(),\r\n  ].join(', ')\r\n}\r\n\r\nRequestSigner.prototype.signature = function() {\r\n  var date = this.getDate(),\r\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\r\n      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)\r\n  if (!kCredentials) {\r\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)\r\n    kRegion = hmac(kDate, this.region)\r\n    kService = hmac(kRegion, this.service)\r\n    kCredentials = hmac(kService, 'aws4_request')\r\n    credentialsCache.set(cacheKey, kCredentials)\r\n  }\r\n  return hmac(kCredentials, this.stringToSign(), 'hex')\r\n}\r\n\r\nRequestSigner.prototype.stringToSign = function() {\r\n  return [\r\n    'AWS4-HMAC-SHA256',\r\n    this.getDateTime(),\r\n    this.credentialString(),\r\n    hash(this.canonicalString(), 'hex'),\r\n  ].join('\\n')\r\n}\r\n\r\nRequestSigner.prototype.canonicalString = function() {\r\n  if (!this.parsedPath) this.prepareRequest()\r\n\r\n  var pathStr = this.parsedPath.path,\r\n      query = this.parsedPath.query,\r\n      headers = this.request.headers,\r\n      queryStr = '',\r\n      normalizePath = this.service !== 's3',\r\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\r\n      decodeSlashesInPath = this.service === 's3',\r\n      firstValOnly = this.service === 's3',\r\n      bodyHash\r\n\r\n  if (this.service === 's3' && this.request.signQuery) {\r\n    bodyHash = 'UNSIGNED-PAYLOAD'\r\n  } else if (this.isCodeCommitGit) {\r\n    bodyHash = ''\r\n  } else {\r\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||\r\n      hash(this.request.body || '', 'hex')\r\n  }\r\n\r\n  if (query) {\r\n    var reducedQuery = Object.keys(query).reduce(function(obj, key) {\r\n      if (!key) return obj\r\n      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :\r\n        (firstValOnly ? query[key][0] : query[key])\r\n      return obj\r\n    }, {})\r\n    var encodedQueryPieces = []\r\n    Object.keys(reducedQuery).sort().forEach(function(key) {\r\n      if (!Array.isArray(reducedQuery[key])) {\r\n        encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]))\r\n      } else {\r\n        reducedQuery[key].map(encodeRfc3986Full).sort()\r\n          .forEach(function(val) { encodedQueryPieces.push(key + '=' + val) })\r\n      }\r\n    })\r\n    queryStr = encodedQueryPieces.join('&')\r\n  }\r\n  if (pathStr !== '/') {\r\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\r\n    pathStr = pathStr.split('/').reduce(function(path, piece) {\r\n      if (normalizePath && piece === '..') {\r\n        path.pop()\r\n      } else if (!normalizePath || piece !== '.') {\r\n        if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))\r\n        path.push(encodeRfc3986Full(piece))\r\n      }\r\n      return path\r\n    }, []).join('/')\r\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\r\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\r\n  }\r\n\r\n  return [\r\n    this.request.method || 'GET',\r\n    pathStr,\r\n    queryStr,\r\n    this.canonicalHeaders() + '\\n',\r\n    this.signedHeaders(),\r\n    bodyHash,\r\n  ].join('\\n')\r\n}\r\n\r\nRequestSigner.prototype.filterHeaders = function() {\r\n  var headers = this.request.headers,\r\n      extraHeadersToInclude = this.extraHeadersToInclude,\r\n      extraHeadersToIgnore = this.extraHeadersToIgnore\r\n  this.filteredHeaders = Object.keys(headers)\r\n    .map(function(key) { return [key.toLowerCase(), headers[key]] })\r\n    .filter(function(entry) {\r\n      return extraHeadersToInclude[entry[0]] ||\r\n        (HEADERS_TO_IGNORE[entry[0]] == null && !extraHeadersToIgnore[entry[0]])\r\n    })\r\n    .sort(function(a, b) { return a[0] < b[0] ? -1 : 1 })\r\n}\r\n\r\nRequestSigner.prototype.canonicalHeaders = function() {\r\n  if (!this.filteredHeaders) this.filterHeaders()\r\n\r\n  return this.filteredHeaders.map(function(entry) {\r\n    return entry[0] + ':' + entry[1].toString().trim().replace(/\\s+/g, ' ')\r\n  }).join('\\n')\r\n}\r\n\r\nRequestSigner.prototype.signedHeaders = function() {\r\n  if (!this.filteredHeaders) this.filterHeaders()\r\n\r\n  return this.filteredHeaders.map(function(entry) { return entry[0] }).join(';')\r\n}\r\n\r\nRequestSigner.prototype.credentialString = function() {\r\n  return [\r\n    this.getDate(),\r\n    this.region,\r\n    this.service,\r\n    'aws4_request',\r\n  ].join('/')\r\n}\r\n\r\nRequestSigner.prototype.defaultCredentials = function() {\r\n  var env = process.env\r\n  return {\r\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\r\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\r\n    sessionToken: env.AWS_SESSION_TOKEN,\r\n  }\r\n}\r\n\r\nRequestSigner.prototype.parsePath = function() {\r\n  var path = this.request.path || '/'\r\n\r\n  // S3 doesn't always encode characters > 127 correctly and\r\n  // all services don't encode characters > 255 correctly\r\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\r\n  if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\r\n    path = encodeURI(decodeURI(path))\r\n  }\r\n\r\n  var queryIx = path.indexOf('?'),\r\n      query = null\r\n\r\n  if (queryIx >= 0) {\r\n    query = querystring.parse(path.slice(queryIx + 1))\r\n    path = path.slice(0, queryIx)\r\n  }\r\n\r\n  this.parsedPath = {\r\n    path: path,\r\n    query: query,\r\n  }\r\n}\r\n\r\nRequestSigner.prototype.formatPath = function() {\r\n  var path = this.parsedPath.path,\r\n      query = this.parsedPath.query\r\n\r\n  if (!query) return path\r\n\r\n  // Services don't support empty query string keys\r\n  if (query[''] != null) delete query['']\r\n\r\n  return path + '?' + encodeRfc3986(querystring.stringify(query))\r\n}\r\n\r\naws4.RequestSigner = RequestSigner\r\n\r\naws4.sign = function(request, credentials) {\r\n  return new RequestSigner(request, credentials).sign()\r\n}\r\n","module.exports = function(size) {\r\n  return new LruCache(size)\r\n}\r\n\r\nfunction LruCache(size) {\r\n  this.capacity = size | 0\r\n  this.map = Object.create(null)\r\n  this.list = new DoublyLinkedList()\r\n}\r\n\r\nLruCache.prototype.get = function(key) {\r\n  var node = this.map[key]\r\n  if (node == null) return undefined\r\n  this.used(node)\r\n  return node.val\r\n}\r\n\r\nLruCache.prototype.set = function(key, val) {\r\n  var node = this.map[key]\r\n  if (node != null) {\r\n    node.val = val\r\n  } else {\r\n    if (!this.capacity) this.prune()\r\n    if (!this.capacity) return false\r\n    node = new DoublyLinkedNode(key, val)\r\n    this.map[key] = node\r\n    this.capacity--\r\n  }\r\n  this.used(node)\r\n  return true\r\n}\r\n\r\nLruCache.prototype.used = function(node) {\r\n  this.list.moveToFront(node)\r\n}\r\n\r\nLruCache.prototype.prune = function() {\r\n  var node = this.list.pop()\r\n  if (node != null) {\r\n    delete this.map[node.key]\r\n    this.capacity++\r\n  }\r\n}\r\n\r\n\r\nfunction DoublyLinkedList() {\r\n  this.firstNode = null\r\n  this.lastNode = null\r\n}\r\n\r\nDoublyLinkedList.prototype.moveToFront = function(node) {\r\n  if (this.firstNode == node) return\r\n\r\n  this.remove(node)\r\n\r\n  if (this.firstNode == null) {\r\n    this.firstNode = node\r\n    this.lastNode = node\r\n    node.prev = null\r\n    node.next = null\r\n  } else {\r\n    node.prev = null\r\n    node.next = this.firstNode\r\n    node.next.prev = node\r\n    this.firstNode = node\r\n  }\r\n}\r\n\r\nDoublyLinkedList.prototype.pop = function() {\r\n  var lastNode = this.lastNode\r\n  if (lastNode != null) {\r\n    this.remove(lastNode)\r\n  }\r\n  return lastNode\r\n}\r\n\r\nDoublyLinkedList.prototype.remove = function(node) {\r\n  if (this.firstNode == node) {\r\n    this.firstNode = node.next\r\n  } else if (node.prev != null) {\r\n    node.prev.next = node.next\r\n  }\r\n  if (this.lastNode == node) {\r\n    this.lastNode = node.prev\r\n  } else if (node.next != null) {\r\n    node.next.prev = node.prev\r\n  }\r\n}\r\n\r\n\r\nfunction DoublyLinkedNode(key, val) {\r\n  this.key = key\r\n  this.val = val\r\n  this.prev = null\r\n  this.next = null\r\n}\r\n"]}
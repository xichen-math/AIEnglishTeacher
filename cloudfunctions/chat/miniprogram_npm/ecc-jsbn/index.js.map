{"version":3,"sources":["index.js","lib/ec.js","lib/sec.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var crypto = require(\"crypto\");\r\nvar BigInteger = require(\"jsbn\").BigInteger;\r\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\r\nvar Buffer = require(\"safer-buffer\").Buffer;\r\nexports.ECCurves = require(\"./lib/sec.js\");\r\n\r\n// zero prepad\r\nfunction unstupid(hex,len)\r\n{\r\n\treturn (hex.length >= len) ? hex : unstupid(\"0\"+hex,len);\r\n}\r\n\r\nexports.ECKey = function(curve, key, isPublic)\r\n{\r\n  var priv;\r\n\tvar c = curve();\r\n\tvar n = c.getN();\r\n  var bytes = Math.floor(n.bitLength()/8);\r\n\r\n  if(key)\r\n  {\r\n    if(isPublic)\r\n    {\r\n      var curve = c.getCurve();\r\n//      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\r\n//      var y = key.slice(bytes+1);\r\n//      this.P = new ECPointFp(curve,\r\n//        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\r\n//        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \r\n      this.P = curve.decodePointHex(key.toString(\"hex\"));\r\n    }else{\r\n      if(key.length != bytes) return false;\r\n      priv = new BigInteger(key.toString(\"hex\"), 16);      \r\n    }\r\n  }else{\r\n    var n1 = n.subtract(BigInteger.ONE);\r\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\r\n    priv = r.mod(n1).add(BigInteger.ONE);\r\n    this.P = c.getG().multiply(priv);\r\n  }\r\n  if(this.P)\r\n  {\r\n//  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\r\n//  this.PublicKey = Buffer.from(\"04\"+pubhex,\"hex\");\r\n    this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHex(this.P),\"hex\");\r\n  }\r\n  if(priv)\r\n  {\r\n    this.PrivateKey = Buffer.from(unstupid(priv.toString(16),bytes*2),\"hex\");\r\n    this.deriveSharedSecret = function(key)\r\n    {\r\n      if(!key || !key.P) return false;\r\n      var S = key.P.multiply(priv);\r\n      return Buffer.from(unstupid(S.getX().toBigInteger().toString(16),bytes*2),\"hex\");\r\n   }     \r\n  }\r\n}\r\n\r\n","// Basic Javascript Elliptic Curve implementation\r\n// Ported loosely from BouncyCastle's Java EC code\r\n// Only Fp curves implemented for now\r\n\r\n// Requires jsbn.js and jsbn2.js\r\nvar BigInteger = require('jsbn').BigInteger\r\nvar Barrett = BigInteger.prototype.Barrett\r\n\r\n// ----------------\r\n// ECFieldElementFp\r\n\r\n// constructor\r\nfunction ECFieldElementFp(q,x) {\r\n    this.x = x;\r\n    // TODO if(x.compareTo(q) >= 0) error\r\n    this.q = q;\r\n}\r\n\r\nfunction feFpEquals(other) {\r\n    if(other == this) return true;\r\n    return (this.q.equals(other.q) && this.x.equals(other.x));\r\n}\r\n\r\nfunction feFpToBigInteger() {\r\n    return this.x;\r\n}\r\n\r\nfunction feFpNegate() {\r\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\r\n}\r\n\r\nfunction feFpAdd(b) {\r\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpSubtract(b) {\r\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpMultiply(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\r\n}\r\n\r\nfunction feFpSquare() {\r\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\r\n}\r\n\r\nfunction feFpDivide(b) {\r\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\r\n}\r\n\r\nECFieldElementFp.prototype.equals = feFpEquals;\r\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\r\nECFieldElementFp.prototype.negate = feFpNegate;\r\nECFieldElementFp.prototype.add = feFpAdd;\r\nECFieldElementFp.prototype.subtract = feFpSubtract;\r\nECFieldElementFp.prototype.multiply = feFpMultiply;\r\nECFieldElementFp.prototype.square = feFpSquare;\r\nECFieldElementFp.prototype.divide = feFpDivide;\r\n\r\n// ----------------\r\n// ECPointFp\r\n\r\n// constructor\r\nfunction ECPointFp(curve,x,y,z) {\r\n    this.curve = curve;\r\n    this.x = x;\r\n    this.y = y;\r\n    // Projective coordinates: either zinv == null or z * zinv == 1\r\n    // z and zinv are just BigIntegers, not fieldElements\r\n    if(z == null) {\r\n      this.z = BigInteger.ONE;\r\n    }\r\n    else {\r\n      this.z = z;\r\n    }\r\n    this.zinv = null;\r\n    //TODO: compression flag\r\n}\r\n\r\nfunction pointFpGetX() {\r\n    if(this.zinv == null) {\r\n      this.zinv = this.z.modInverse(this.curve.q);\r\n    }\r\n    var r = this.x.toBigInteger().multiply(this.zinv);\r\n    this.curve.reduce(r);\r\n    return this.curve.fromBigInteger(r);\r\n}\r\n\r\nfunction pointFpGetY() {\r\n    if(this.zinv == null) {\r\n      this.zinv = this.z.modInverse(this.curve.q);\r\n    }\r\n    var r = this.y.toBigInteger().multiply(this.zinv);\r\n    this.curve.reduce(r);\r\n    return this.curve.fromBigInteger(r);\r\n}\r\n\r\nfunction pointFpEquals(other) {\r\n    if(other == this) return true;\r\n    if(this.isInfinity()) return other.isInfinity();\r\n    if(other.isInfinity()) return this.isInfinity();\r\n    var u, v;\r\n    // u = Y2 * Z1 - Y1 * Z2\r\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\r\n    if(!u.equals(BigInteger.ZERO)) return false;\r\n    // v = X2 * Z1 - X1 * Z2\r\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\r\n    return v.equals(BigInteger.ZERO);\r\n}\r\n\r\nfunction pointFpIsInfinity() {\r\n    if((this.x == null) && (this.y == null)) return true;\r\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\r\n}\r\n\r\nfunction pointFpNegate() {\r\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\r\n}\r\n\r\nfunction pointFpAdd(b) {\r\n    if(this.isInfinity()) return b;\r\n    if(b.isInfinity()) return this;\r\n\r\n    // u = Y2 * Z1 - Y1 * Z2\r\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\r\n    // v = X2 * Z1 - X1 * Z2\r\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\r\n\r\n    if(BigInteger.ZERO.equals(v)) {\r\n        if(BigInteger.ZERO.equals(u)) {\r\n            return this.twice(); // this == b, so double\r\n        }\r\n\treturn this.curve.getInfinity(); // this = -b, so infinity\r\n    }\r\n\r\n    var THREE = new BigInteger(\"3\");\r\n    var x1 = this.x.toBigInteger();\r\n    var y1 = this.y.toBigInteger();\r\n    var x2 = b.x.toBigInteger();\r\n    var y2 = b.y.toBigInteger();\r\n\r\n    var v2 = v.square();\r\n    var v3 = v2.multiply(v);\r\n    var x1v2 = x1.multiply(v2);\r\n    var zu2 = u.square().multiply(this.z);\r\n\r\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\r\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\r\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\r\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\r\n    // z3 = v^3 * z1 * z2\r\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\r\n}\r\n\r\nfunction pointFpTwice() {\r\n    if(this.isInfinity()) return this;\r\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\r\n\r\n    // TODO: optimized handling of constants\r\n    var THREE = new BigInteger(\"3\");\r\n    var x1 = this.x.toBigInteger();\r\n    var y1 = this.y.toBigInteger();\r\n\r\n    var y1z1 = y1.multiply(this.z);\r\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\r\n    var a = this.curve.a.toBigInteger();\r\n\r\n    // w = 3 * x1^2 + a * z1^2\r\n    var w = x1.square().multiply(THREE);\r\n    if(!BigInteger.ZERO.equals(a)) {\r\n      w = w.add(this.z.square().multiply(a));\r\n    }\r\n    w = w.mod(this.curve.q);\r\n    //this.curve.reduce(w);\r\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\r\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\r\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\r\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\r\n    // z3 = 8 * (y1 * z1)^3\r\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\r\n\r\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\r\n}\r\n\r\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\r\n// TODO: modularize the multiplication algorithm\r\nfunction pointFpMultiply(k) {\r\n    if(this.isInfinity()) return this;\r\n    if(k.signum() == 0) return this.curve.getInfinity();\r\n\r\n    var e = k;\r\n    var h = e.multiply(new BigInteger(\"3\"));\r\n\r\n    var neg = this.negate();\r\n    var R = this;\r\n\r\n    var i;\r\n    for(i = h.bitLength() - 2; i > 0; --i) {\r\n\tR = R.twice();\r\n\r\n\tvar hBit = h.testBit(i);\r\n\tvar eBit = e.testBit(i);\r\n\r\n\tif (hBit != eBit) {\r\n\t    R = R.add(hBit ? this : neg);\r\n\t}\r\n    }\r\n\r\n    return R;\r\n}\r\n\r\n// Compute this*j + x*k (simultaneous multiplication)\r\nfunction pointFpMultiplyTwo(j,x,k) {\r\n  var i;\r\n  if(j.bitLength() > k.bitLength())\r\n    i = j.bitLength() - 1;\r\n  else\r\n    i = k.bitLength() - 1;\r\n\r\n  var R = this.curve.getInfinity();\r\n  var both = this.add(x);\r\n  while(i >= 0) {\r\n    R = R.twice();\r\n    if(j.testBit(i)) {\r\n      if(k.testBit(i)) {\r\n        R = R.add(both);\r\n      }\r\n      else {\r\n        R = R.add(this);\r\n      }\r\n    }\r\n    else {\r\n      if(k.testBit(i)) {\r\n        R = R.add(x);\r\n      }\r\n    }\r\n    --i;\r\n  }\r\n\r\n  return R;\r\n}\r\n\r\nECPointFp.prototype.getX = pointFpGetX;\r\nECPointFp.prototype.getY = pointFpGetY;\r\nECPointFp.prototype.equals = pointFpEquals;\r\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\r\nECPointFp.prototype.negate = pointFpNegate;\r\nECPointFp.prototype.add = pointFpAdd;\r\nECPointFp.prototype.twice = pointFpTwice;\r\nECPointFp.prototype.multiply = pointFpMultiply;\r\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\r\n\r\n// ----------------\r\n// ECCurveFp\r\n\r\n// constructor\r\nfunction ECCurveFp(q,a,b) {\r\n    this.q = q;\r\n    this.a = this.fromBigInteger(a);\r\n    this.b = this.fromBigInteger(b);\r\n    this.infinity = new ECPointFp(this, null, null);\r\n    this.reducer = new Barrett(this.q);\r\n}\r\n\r\nfunction curveFpGetQ() {\r\n    return this.q;\r\n}\r\n\r\nfunction curveFpGetA() {\r\n    return this.a;\r\n}\r\n\r\nfunction curveFpGetB() {\r\n    return this.b;\r\n}\r\n\r\nfunction curveFpEquals(other) {\r\n    if(other == this) return true;\r\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\r\n}\r\n\r\nfunction curveFpGetInfinity() {\r\n    return this.infinity;\r\n}\r\n\r\nfunction curveFpFromBigInteger(x) {\r\n    return new ECFieldElementFp(this.q, x);\r\n}\r\n\r\nfunction curveReduce(x) {\r\n    this.reducer.reduce(x);\r\n}\r\n\r\n// for now, work with hex strings because they're easier in JS\r\nfunction curveFpDecodePointHex(s) {\r\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\r\n    case 0:\r\n\treturn this.infinity;\r\n    case 2:\r\n    case 3:\r\n\t// point compression not supported yet\r\n\treturn null;\r\n    case 4:\r\n    case 6:\r\n    case 7:\r\n\tvar len = (s.length - 2) / 2;\r\n\tvar xHex = s.substr(2, len);\r\n\tvar yHex = s.substr(len+2, len);\r\n\r\n\treturn new ECPointFp(this,\r\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\r\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\r\n\r\n    default: // unsupported\r\n\treturn null;\r\n    }\r\n}\r\n\r\nfunction curveFpEncodePointHex(p) {\r\n\tif (p.isInfinity()) return \"00\";\r\n\tvar xHex = p.getX().toBigInteger().toString(16);\r\n\tvar yHex = p.getY().toBigInteger().toString(16);\r\n\tvar oLen = this.getQ().toString(16).length;\r\n\tif ((oLen % 2) != 0) oLen++;\r\n\twhile (xHex.length < oLen) {\r\n\t\txHex = \"0\" + xHex;\r\n\t}\r\n\twhile (yHex.length < oLen) {\r\n\t\tyHex = \"0\" + yHex;\r\n\t}\r\n\treturn \"04\" + xHex + yHex;\r\n}\r\n\r\nECCurveFp.prototype.getQ = curveFpGetQ;\r\nECCurveFp.prototype.getA = curveFpGetA;\r\nECCurveFp.prototype.getB = curveFpGetB;\r\nECCurveFp.prototype.equals = curveFpEquals;\r\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\r\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\r\nECCurveFp.prototype.reduce = curveReduce;\r\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\r\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\r\n\r\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\r\nECCurveFp.prototype.decodePointHex = function(s)\r\n{\r\n\tvar yIsEven;\r\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\r\n    case 0:\r\n\treturn this.infinity;\r\n    case 2:\r\n\tyIsEven = false;\r\n    case 3:\r\n\tif(yIsEven == undefined) yIsEven = true;\r\n\tvar len = s.length - 2;\r\n\tvar xHex = s.substr(2, len);\r\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\r\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\r\n\tvar beta = alpha.sqrt();\r\n\r\n    if (beta == null) throw \"Invalid point compression\";\r\n\r\n    var betaValue = beta.toBigInteger();\r\n    if (betaValue.testBit(0) != yIsEven)\r\n    {\r\n        // Use the other root\r\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\r\n    }\r\n    return new ECPointFp(this,x,beta);\r\n    case 4:\r\n    case 6:\r\n    case 7:\r\n\tvar len = (s.length - 2) / 2;\r\n\tvar xHex = s.substr(2, len);\r\n\tvar yHex = s.substr(len+2, len);\r\n\r\n\treturn new ECPointFp(this,\r\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\r\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\r\n\r\n    default: // unsupported\r\n\treturn null;\r\n    }\r\n}\r\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\r\n{\r\n\tif (p.isInfinity()) return \"00\";\r\n\tvar xHex = p.getX().toBigInteger().toString(16);\r\n\tvar oLen = this.getQ().toString(16).length;\r\n\tif ((oLen % 2) != 0) oLen++;\r\n\twhile (xHex.length < oLen)\r\n\t\txHex = \"0\" + xHex;\r\n\tvar yPrefix;\r\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\r\n\telse                                 yPrefix = \"03\";\r\n\r\n\treturn yPrefix + xHex;\r\n}\r\n\r\n\r\nECFieldElementFp.prototype.getR = function()\r\n{\r\n\tif(this.r != undefined) return this.r;\r\n\r\n    this.r = null;\r\n    var bitLength = this.q.bitLength();\r\n    if (bitLength > 128)\r\n    {\r\n        var firstWord = this.q.shiftRight(bitLength - 64);\r\n        if (firstWord.intValue() == -1)\r\n        {\r\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\r\n        }\r\n    }\r\n    return this.r;\r\n}\r\nECFieldElementFp.prototype.modMult = function(x1,x2)\r\n{\r\n    return this.modReduce(x1.multiply(x2));\r\n}\r\nECFieldElementFp.prototype.modReduce = function(x)\r\n{\r\n    if (this.getR() != null)\r\n    {\r\n        var qLen = q.bitLength();\r\n        while (x.bitLength() > (qLen + 1))\r\n        {\r\n            var u = x.shiftRight(qLen);\r\n            var v = x.subtract(u.shiftLeft(qLen));\r\n            if (!this.getR().equals(BigInteger.ONE))\r\n            {\r\n                u = u.multiply(this.getR());\r\n            }\r\n            x = u.add(v); \r\n        }\r\n        while (x.compareTo(q) >= 0)\r\n        {\r\n            x = x.subtract(q);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        x = x.mod(q);\r\n    }\r\n    return x;\r\n}\r\nECFieldElementFp.prototype.sqrt = function()\r\n{\r\n    if (!this.q.testBit(0)) throw \"unsupported\";\r\n\r\n    // p mod 4 == 3\r\n    if (this.q.testBit(1))\r\n    {\r\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\r\n    \treturn z.square().equals(this) ? z : null;\r\n    }\r\n\r\n    // p mod 4 == 1\r\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\r\n\r\n    var legendreExponent = qMinusOne.shiftRight(1);\r\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\r\n    {\r\n        return null;\r\n    }\r\n\r\n    var u = qMinusOne.shiftRight(2);\r\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\r\n\r\n    var Q = this.x;\r\n    var fourQ = modDouble(modDouble(Q));\r\n\r\n    var U, V;\r\n    do\r\n    {\r\n        var P;\r\n        do\r\n        {\r\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\r\n        }\r\n        while (P.compareTo(this.q) >= 0\r\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\r\n\r\n        var result = this.lucasSequence(P, Q, k);\r\n        U = result[0];\r\n        V = result[1];\r\n\r\n        if (this.modMult(V, V).equals(fourQ))\r\n        {\r\n            // Integer division by 2, mod q\r\n            if (V.testBit(0))\r\n            {\r\n                V = V.add(q);\r\n            }\r\n\r\n            V = V.shiftRight(1);\r\n\r\n            return new ECFieldElementFp(q,V);\r\n        }\r\n    }\r\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\r\n\r\n    return null;\r\n}\r\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\r\n{\r\n    var n = k.bitLength();\r\n    var s = k.getLowestSetBit();\r\n\r\n    var Uh = BigInteger.ONE;\r\n    var Vl = BigInteger.TWO;\r\n    var Vh = P;\r\n    var Ql = BigInteger.ONE;\r\n    var Qh = BigInteger.ONE;\r\n\r\n    for (var j = n - 1; j >= s + 1; --j)\r\n    {\r\n        Ql = this.modMult(Ql, Qh);\r\n\r\n        if (k.testBit(j))\r\n        {\r\n            Qh = this.modMult(Ql, Q);\r\n            Uh = this.modMult(Uh, Vh);\r\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\r\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\r\n        }\r\n        else\r\n        {\r\n            Qh = Ql;\r\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\r\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\r\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\r\n        }\r\n    }\r\n\r\n    Ql = this.modMult(Ql, Qh);\r\n    Qh = this.modMult(Ql, Q);\r\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\r\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\r\n    Ql = this.modMult(Ql, Qh);\r\n\r\n    for (var j = 1; j <= s; ++j)\r\n    {\r\n        Uh = this.modMult(Uh, Vl);\r\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\r\n        Ql = this.modMult(Ql, Ql);\r\n    }\r\n\r\n    return [ Uh, Vl ];\r\n}\r\n\r\nvar exports = {\r\n  ECCurveFp: ECCurveFp,\r\n  ECPointFp: ECPointFp,\r\n  ECFieldElementFp: ECFieldElementFp\r\n}\r\n\r\nmodule.exports = exports\r\n","// Named EC curves\r\n\r\n// Requires ec.js, jsbn.js, and jsbn2.js\r\nvar BigInteger = require('jsbn').BigInteger\r\nvar ECCurveFp = require('./ec.js').ECCurveFp\r\n\r\n\r\n// ----------------\r\n// X9ECParameters\r\n\r\n// constructor\r\nfunction X9ECParameters(curve,g,n,h) {\r\n    this.curve = curve;\r\n    this.g = g;\r\n    this.n = n;\r\n    this.h = h;\r\n}\r\n\r\nfunction x9getCurve() {\r\n    return this.curve;\r\n}\r\n\r\nfunction x9getG() {\r\n    return this.g;\r\n}\r\n\r\nfunction x9getN() {\r\n    return this.n;\r\n}\r\n\r\nfunction x9getH() {\r\n    return this.h;\r\n}\r\n\r\nX9ECParameters.prototype.getCurve = x9getCurve;\r\nX9ECParameters.prototype.getG = x9getG;\r\nX9ECParameters.prototype.getN = x9getN;\r\nX9ECParameters.prototype.getH = x9getH;\r\n\r\n// ----------------\r\n// SECNamedCurves\r\n\r\nfunction fromHex(s) { return new BigInteger(s, 16); }\r\n\r\nfunction secp128r1() {\r\n    // p = 2^128 - 2^97 - 1\r\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\r\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\r\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\r\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\r\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"161FF7528B899B2D0C28607CA52C5B86\"\r\n\t\t+ \"CF5AC8395BAFEB13C02DA292DDED7A83\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp160k1() {\r\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\r\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\r\n    var a = BigInteger.ZERO;\r\n    var b = fromHex(\"7\");\r\n    //byte[] S = null;\r\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\"\r\n                + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp160r1() {\r\n    // p = 2^160 - 2^31 - 1\r\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\r\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\r\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\r\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\r\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n\t\t+ \"4A96B5688EF573284664698968C38BB913CBFC82\"\r\n\t\t+ \"23A628553168947D59DCC912042351377AC5FB32\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp192k1() {\r\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\r\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\r\n    var a = BigInteger.ZERO;\r\n    var b = fromHex(\"3\");\r\n    //byte[] S = null;\r\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\"\r\n                + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp192r1() {\r\n    // p = 2^192 - 2^64 - 1\r\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\r\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\r\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\r\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\r\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\"\r\n                + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp224r1() {\r\n    // p = 2^224 - 2^96 + 1\r\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\r\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\r\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\r\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\r\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\"\r\n                + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\nfunction secp256r1() {\r\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\r\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\r\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\r\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\r\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\r\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\r\n    var h = BigInteger.ONE;\r\n    var curve = new ECCurveFp(p, a, b);\r\n    var G = curve.decodePointHex(\"04\"\r\n                + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\"\r\n\t\t+ \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\r\n    return new X9ECParameters(curve, G, n, h);\r\n}\r\n\r\n// TODO: make this into a proper hashtable\r\nfunction getSECCurveByName(name) {\r\n    if(name == \"secp128r1\") return secp128r1();\r\n    if(name == \"secp160k1\") return secp160k1();\r\n    if(name == \"secp160r1\") return secp160r1();\r\n    if(name == \"secp192k1\") return secp192k1();\r\n    if(name == \"secp192r1\") return secp192r1();\r\n    if(name == \"secp224r1\") return secp224r1();\r\n    if(name == \"secp256r1\") return secp256r1();\r\n    return null;\r\n}\r\n\r\nmodule.exports = {\r\n  \"secp128r1\":secp128r1,\r\n  \"secp160k1\":secp160k1,\r\n  \"secp160r1\":secp160r1,\r\n  \"secp192k1\":secp192k1,\r\n  \"secp192r1\":secp192r1,\r\n  \"secp224r1\":secp224r1,\r\n  \"secp256r1\":secp256r1\r\n}\r\n"]}
{"version":3,"sources":["index.js","stringify.js","utils.js","formats.js","parse.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,AHSA,ACHA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;ACFA,ACHA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nvar stringify = require('./stringify');\r\nvar parse = require('./parse');\r\nvar formats = require('./formats');\r\n\r\nmodule.exports = {\r\n    formats: formats,\r\n    parse: parse,\r\n    stringify: stringify\r\n};\r\n","\r\n\r\nvar getSideChannel = require('side-channel');\r\nvar utils = require('./utils');\r\nvar formats = require('./formats');\r\nvar has = Object.prototype.hasOwnProperty;\r\n\r\nvar arrayPrefixGenerators = {\r\n    brackets: function brackets(prefix) {\r\n        return prefix + '[]';\r\n    },\r\n    comma: 'comma',\r\n    indices: function indices(prefix, key) {\r\n        return prefix + '[' + key + ']';\r\n    },\r\n    repeat: function repeat(prefix) {\r\n        return prefix;\r\n    }\r\n};\r\n\r\nvar isArray = Array.isArray;\r\nvar push = Array.prototype.push;\r\nvar pushToArray = function (arr, valueOrArray) {\r\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\r\n};\r\n\r\nvar toISO = Date.prototype.toISOString;\r\n\r\nvar defaultFormat = formats['default'];\r\nvar defaults = {\r\n    addQueryPrefix: false,\r\n    allowDots: false,\r\n    allowEmptyArrays: false,\r\n    arrayFormat: 'indices',\r\n    charset: 'utf-8',\r\n    charsetSentinel: false,\r\n    commaRoundTrip: false,\r\n    delimiter: '&',\r\n    encode: true,\r\n    encodeDotInKeys: false,\r\n    encoder: utils.encode,\r\n    encodeValuesOnly: false,\r\n    filter: void undefined,\r\n    format: defaultFormat,\r\n    formatter: formats.formatters[defaultFormat],\r\n    // deprecated\r\n    indices: false,\r\n    serializeDate: function serializeDate(date) {\r\n        return toISO.call(date);\r\n    },\r\n    skipNulls: false,\r\n    strictNullHandling: false\r\n};\r\n\r\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\r\n    return typeof v === 'string'\r\n        || typeof v === 'number'\r\n        || typeof v === 'boolean'\r\n        || typeof v === 'symbol'\r\n        || typeof v === 'bigint';\r\n};\r\n\r\nvar sentinel = {};\r\n\r\nvar stringify = function stringify(\r\n    object,\r\n    prefix,\r\n    generateArrayPrefix,\r\n    commaRoundTrip,\r\n    allowEmptyArrays,\r\n    strictNullHandling,\r\n    skipNulls,\r\n    encodeDotInKeys,\r\n    encoder,\r\n    filter,\r\n    sort,\r\n    allowDots,\r\n    serializeDate,\r\n    format,\r\n    formatter,\r\n    encodeValuesOnly,\r\n    charset,\r\n    sideChannel\r\n) {\r\n    var obj = object;\r\n\r\n    var tmpSc = sideChannel;\r\n    var step = 0;\r\n    var findFlag = false;\r\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\r\n        // Where object last appeared in the ref tree\r\n        var pos = tmpSc.get(object);\r\n        step += 1;\r\n        if (typeof pos !== 'undefined') {\r\n            if (pos === step) {\r\n                throw new RangeError('Cyclic object value');\r\n            } else {\r\n                findFlag = true; // Break while\r\n            }\r\n        }\r\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\r\n            step = 0;\r\n        }\r\n    }\r\n\r\n    if (typeof filter === 'function') {\r\n        obj = filter(prefix, obj);\r\n    } else if (obj instanceof Date) {\r\n        obj = serializeDate(obj);\r\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\r\n        obj = utils.maybeMap(obj, function (value) {\r\n            if (value instanceof Date) {\r\n                return serializeDate(value);\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    if (obj === null) {\r\n        if (strictNullHandling) {\r\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\r\n        }\r\n\r\n        obj = '';\r\n    }\r\n\r\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\r\n        if (encoder) {\r\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\r\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\r\n        }\r\n        return [formatter(prefix) + '=' + formatter(String(obj))];\r\n    }\r\n\r\n    var values = [];\r\n\r\n    if (typeof obj === 'undefined') {\r\n        return values;\r\n    }\r\n\r\n    var objKeys;\r\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\r\n        // we need to join elements in\r\n        if (encodeValuesOnly && encoder) {\r\n            obj = utils.maybeMap(obj, encoder);\r\n        }\r\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\r\n    } else if (isArray(filter)) {\r\n        objKeys = filter;\r\n    } else {\r\n        var keys = Object.keys(obj);\r\n        objKeys = sort ? keys.sort(sort) : keys;\r\n    }\r\n\r\n    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\r\n\r\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\r\n\r\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\r\n        return adjustedPrefix + '[]';\r\n    }\r\n\r\n    for (var j = 0; j < objKeys.length; ++j) {\r\n        var key = objKeys[j];\r\n        var value = typeof key === 'object' && key && typeof key.value !== 'undefined'\r\n            ? key.value\r\n            : obj[key];\r\n\r\n        if (skipNulls && value === null) {\r\n            continue;\r\n        }\r\n\r\n        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\\./g, '%2E') : String(key);\r\n        var keyPrefix = isArray(obj)\r\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\r\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\r\n\r\n        sideChannel.set(object, step);\r\n        var valueSideChannel = getSideChannel();\r\n        valueSideChannel.set(sentinel, sideChannel);\r\n        pushToArray(values, stringify(\r\n            value,\r\n            keyPrefix,\r\n            generateArrayPrefix,\r\n            commaRoundTrip,\r\n            allowEmptyArrays,\r\n            strictNullHandling,\r\n            skipNulls,\r\n            encodeDotInKeys,\r\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\r\n            filter,\r\n            sort,\r\n            allowDots,\r\n            serializeDate,\r\n            format,\r\n            formatter,\r\n            encodeValuesOnly,\r\n            charset,\r\n            valueSideChannel\r\n        ));\r\n    }\r\n\r\n    return values;\r\n};\r\n\r\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\r\n    if (!opts) {\r\n        return defaults;\r\n    }\r\n\r\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\r\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\r\n    }\r\n\r\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\r\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\r\n    }\r\n\r\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\r\n        throw new TypeError('Encoder has to be a function.');\r\n    }\r\n\r\n    var charset = opts.charset || defaults.charset;\r\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\r\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\r\n    }\r\n\r\n    var format = formats['default'];\r\n    if (typeof opts.format !== 'undefined') {\r\n        if (!has.call(formats.formatters, opts.format)) {\r\n            throw new TypeError('Unknown format option provided.');\r\n        }\r\n        format = opts.format;\r\n    }\r\n    var formatter = formats.formatters[format];\r\n\r\n    var filter = defaults.filter;\r\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\r\n        filter = opts.filter;\r\n    }\r\n\r\n    var arrayFormat;\r\n    if (opts.arrayFormat in arrayPrefixGenerators) {\r\n        arrayFormat = opts.arrayFormat;\r\n    } else if ('indices' in opts) {\r\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\r\n    } else {\r\n        arrayFormat = defaults.arrayFormat;\r\n    }\r\n\r\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\r\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\r\n    }\r\n\r\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\r\n\r\n    return {\r\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\r\n        allowDots: allowDots,\r\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\r\n        arrayFormat: arrayFormat,\r\n        charset: charset,\r\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\r\n        commaRoundTrip: !!opts.commaRoundTrip,\r\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\r\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\r\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\r\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\r\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\r\n        filter: filter,\r\n        format: format,\r\n        formatter: formatter,\r\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\r\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\r\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\r\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\r\n    };\r\n};\r\n\r\nmodule.exports = function (object, opts) {\r\n    var obj = object;\r\n    var options = normalizeStringifyOptions(opts);\r\n\r\n    var objKeys;\r\n    var filter;\r\n\r\n    if (typeof options.filter === 'function') {\r\n        filter = options.filter;\r\n        obj = filter('', obj);\r\n    } else if (isArray(options.filter)) {\r\n        filter = options.filter;\r\n        objKeys = filter;\r\n    }\r\n\r\n    var keys = [];\r\n\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return '';\r\n    }\r\n\r\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\r\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\r\n\r\n    if (!objKeys) {\r\n        objKeys = Object.keys(obj);\r\n    }\r\n\r\n    if (options.sort) {\r\n        objKeys.sort(options.sort);\r\n    }\r\n\r\n    var sideChannel = getSideChannel();\r\n    for (var i = 0; i < objKeys.length; ++i) {\r\n        var key = objKeys[i];\r\n        var value = obj[key];\r\n\r\n        if (options.skipNulls && value === null) {\r\n            continue;\r\n        }\r\n        pushToArray(keys, stringify(\r\n            value,\r\n            key,\r\n            generateArrayPrefix,\r\n            commaRoundTrip,\r\n            options.allowEmptyArrays,\r\n            options.strictNullHandling,\r\n            options.skipNulls,\r\n            options.encodeDotInKeys,\r\n            options.encode ? options.encoder : null,\r\n            options.filter,\r\n            options.sort,\r\n            options.allowDots,\r\n            options.serializeDate,\r\n            options.format,\r\n            options.formatter,\r\n            options.encodeValuesOnly,\r\n            options.charset,\r\n            sideChannel\r\n        ));\r\n    }\r\n\r\n    var joined = keys.join(options.delimiter);\r\n    var prefix = options.addQueryPrefix === true ? '?' : '';\r\n\r\n    if (options.charsetSentinel) {\r\n        if (options.charset === 'iso-8859-1') {\r\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\r\n            prefix += 'utf8=%26%2310003%3B&';\r\n        } else {\r\n            // encodeURIComponent('✓')\r\n            prefix += 'utf8=%E2%9C%93&';\r\n        }\r\n    }\r\n\r\n    return joined.length > 0 ? prefix + joined : '';\r\n};\r\n","\r\n\r\nvar formats = require('./formats');\r\n\r\nvar has = Object.prototype.hasOwnProperty;\r\nvar isArray = Array.isArray;\r\n\r\nvar hexTable = (function () {\r\n    var array = [];\r\n    for (var i = 0; i < 256; ++i) {\r\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\r\n    }\r\n\r\n    return array;\r\n}());\r\n\r\nvar compactQueue = function compactQueue(queue) {\r\n    while (queue.length > 1) {\r\n        var item = queue.pop();\r\n        var obj = item.obj[item.prop];\r\n\r\n        if (isArray(obj)) {\r\n            var compacted = [];\r\n\r\n            for (var j = 0; j < obj.length; ++j) {\r\n                if (typeof obj[j] !== 'undefined') {\r\n                    compacted.push(obj[j]);\r\n                }\r\n            }\r\n\r\n            item.obj[item.prop] = compacted;\r\n        }\r\n    }\r\n};\r\n\r\nvar arrayToObject = function arrayToObject(source, options) {\r\n    var obj = options && options.plainObjects ? { __proto__: null } : {};\r\n    for (var i = 0; i < source.length; ++i) {\r\n        if (typeof source[i] !== 'undefined') {\r\n            obj[i] = source[i];\r\n        }\r\n    }\r\n\r\n    return obj;\r\n};\r\n\r\nvar merge = function merge(target, source, options) {\r\n    /* eslint no-param-reassign: 0 */\r\n    if (!source) {\r\n        return target;\r\n    }\r\n\r\n    if (typeof source !== 'object' && typeof source !== 'function') {\r\n        if (isArray(target)) {\r\n            target.push(source);\r\n        } else if (target && typeof target === 'object') {\r\n            if (\r\n                (options && (options.plainObjects || options.allowPrototypes))\r\n                || !has.call(Object.prototype, source)\r\n            ) {\r\n                target[source] = true;\r\n            }\r\n        } else {\r\n            return [target, source];\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    if (!target || typeof target !== 'object') {\r\n        return [target].concat(source);\r\n    }\r\n\r\n    var mergeTarget = target;\r\n    if (isArray(target) && !isArray(source)) {\r\n        mergeTarget = arrayToObject(target, options);\r\n    }\r\n\r\n    if (isArray(target) && isArray(source)) {\r\n        source.forEach(function (item, i) {\r\n            if (has.call(target, i)) {\r\n                var targetItem = target[i];\r\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\r\n                    target[i] = merge(targetItem, item, options);\r\n                } else {\r\n                    target.push(item);\r\n                }\r\n            } else {\r\n                target[i] = item;\r\n            }\r\n        });\r\n        return target;\r\n    }\r\n\r\n    return Object.keys(source).reduce(function (acc, key) {\r\n        var value = source[key];\r\n\r\n        if (has.call(acc, key)) {\r\n            acc[key] = merge(acc[key], value, options);\r\n        } else {\r\n            acc[key] = value;\r\n        }\r\n        return acc;\r\n    }, mergeTarget);\r\n};\r\n\r\nvar assign = function assignSingleSource(target, source) {\r\n    return Object.keys(source).reduce(function (acc, key) {\r\n        acc[key] = source[key];\r\n        return acc;\r\n    }, target);\r\n};\r\n\r\nvar decode = function (str, defaultDecoder, charset) {\r\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\r\n    if (charset === 'iso-8859-1') {\r\n        // unescape never throws, no try...catch needed:\r\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\r\n    }\r\n    // utf-8\r\n    try {\r\n        return decodeURIComponent(strWithoutPlus);\r\n    } catch (e) {\r\n        return strWithoutPlus;\r\n    }\r\n};\r\n\r\nvar limit = 1024;\r\n\r\n/* eslint operator-linebreak: [2, \"before\"] */\r\n\r\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\r\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\r\n    // It has been adapted here for stricter adherence to RFC 3986\r\n    if (str.length === 0) {\r\n        return str;\r\n    }\r\n\r\n    var string = str;\r\n    if (typeof str === 'symbol') {\r\n        string = Symbol.prototype.toString.call(str);\r\n    } else if (typeof str !== 'string') {\r\n        string = String(str);\r\n    }\r\n\r\n    if (charset === 'iso-8859-1') {\r\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\r\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\r\n        });\r\n    }\r\n\r\n    var out = '';\r\n    for (var j = 0; j < string.length; j += limit) {\r\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\r\n        var arr = [];\r\n\r\n        for (var i = 0; i < segment.length; ++i) {\r\n            var c = segment.charCodeAt(i);\r\n            if (\r\n                c === 0x2D // -\r\n                || c === 0x2E // .\r\n                || c === 0x5F // _\r\n                || c === 0x7E // ~\r\n                || (c >= 0x30 && c <= 0x39) // 0-9\r\n                || (c >= 0x41 && c <= 0x5A) // a-z\r\n                || (c >= 0x61 && c <= 0x7A) // A-Z\r\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\r\n            ) {\r\n                arr[arr.length] = segment.charAt(i);\r\n                continue;\r\n            }\r\n\r\n            if (c < 0x80) {\r\n                arr[arr.length] = hexTable[c];\r\n                continue;\r\n            }\r\n\r\n            if (c < 0x800) {\r\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\r\n                    + hexTable[0x80 | (c & 0x3F)];\r\n                continue;\r\n            }\r\n\r\n            if (c < 0xD800 || c >= 0xE000) {\r\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\r\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\r\n                    + hexTable[0x80 | (c & 0x3F)];\r\n                continue;\r\n            }\r\n\r\n            i += 1;\r\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\r\n\r\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\r\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\r\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\r\n                + hexTable[0x80 | (c & 0x3F)];\r\n        }\r\n\r\n        out += arr.join('');\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nvar compact = function compact(value) {\r\n    var queue = [{ obj: { o: value }, prop: 'o' }];\r\n    var refs = [];\r\n\r\n    for (var i = 0; i < queue.length; ++i) {\r\n        var item = queue[i];\r\n        var obj = item.obj[item.prop];\r\n\r\n        var keys = Object.keys(obj);\r\n        for (var j = 0; j < keys.length; ++j) {\r\n            var key = keys[j];\r\n            var val = obj[key];\r\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\r\n                queue.push({ obj: obj, prop: key });\r\n                refs.push(val);\r\n            }\r\n        }\r\n    }\r\n\r\n    compactQueue(queue);\r\n\r\n    return value;\r\n};\r\n\r\nvar isRegExp = function isRegExp(obj) {\r\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\r\n};\r\n\r\nvar isBuffer = function isBuffer(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n        return false;\r\n    }\r\n\r\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\r\n};\r\n\r\nvar combine = function combine(a, b) {\r\n    return [].concat(a, b);\r\n};\r\n\r\nvar maybeMap = function maybeMap(val, fn) {\r\n    if (isArray(val)) {\r\n        var mapped = [];\r\n        for (var i = 0; i < val.length; i += 1) {\r\n            mapped.push(fn(val[i]));\r\n        }\r\n        return mapped;\r\n    }\r\n    return fn(val);\r\n};\r\n\r\nmodule.exports = {\r\n    arrayToObject: arrayToObject,\r\n    assign: assign,\r\n    combine: combine,\r\n    compact: compact,\r\n    decode: decode,\r\n    encode: encode,\r\n    isBuffer: isBuffer,\r\n    isRegExp: isRegExp,\r\n    maybeMap: maybeMap,\r\n    merge: merge\r\n};\r\n","\r\n\r\nvar replace = String.prototype.replace;\r\nvar percentTwenties = /%20/g;\r\n\r\nvar Format = {\r\n    RFC1738: 'RFC1738',\r\n    RFC3986: 'RFC3986'\r\n};\r\n\r\nmodule.exports = {\r\n    'default': Format.RFC3986,\r\n    formatters: {\r\n        RFC1738: function (value) {\r\n            return replace.call(value, percentTwenties, '+');\r\n        },\r\n        RFC3986: function (value) {\r\n            return String(value);\r\n        }\r\n    },\r\n    RFC1738: Format.RFC1738,\r\n    RFC3986: Format.RFC3986\r\n};\r\n","\r\n\r\nvar utils = require('./utils');\r\n\r\nvar has = Object.prototype.hasOwnProperty;\r\nvar isArray = Array.isArray;\r\n\r\nvar defaults = {\r\n    allowDots: false,\r\n    allowEmptyArrays: false,\r\n    allowPrototypes: false,\r\n    allowSparse: false,\r\n    arrayLimit: 20,\r\n    charset: 'utf-8',\r\n    charsetSentinel: false,\r\n    comma: false,\r\n    decodeDotInKeys: false,\r\n    decoder: utils.decode,\r\n    delimiter: '&',\r\n    depth: 5,\r\n    duplicates: 'combine',\r\n    ignoreQueryPrefix: false,\r\n    interpretNumericEntities: false,\r\n    parameterLimit: 1000,\r\n    parseArrays: true,\r\n    plainObjects: false,\r\n    strictDepth: false,\r\n    strictNullHandling: false,\r\n    throwOnLimitExceeded: false\r\n};\r\n\r\nvar interpretNumericEntities = function (str) {\r\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\r\n        return String.fromCharCode(parseInt(numberStr, 10));\r\n    });\r\n};\r\n\r\nvar parseArrayValue = function (val, options, currentArrayLength) {\r\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\r\n        return val.split(',');\r\n    }\r\n\r\n    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {\r\n        throw new RangeError('Array limit exceeded. Only ' + options.arrayLimit + ' element' + (options.arrayLimit === 1 ? '' : 's') + ' allowed in an array.');\r\n    }\r\n\r\n    return val;\r\n};\r\n\r\n// This is what browsers will submit when the ✓ character occurs in an\r\n// application/x-www-form-urlencoded body and the encoding of the page containing\r\n// the form is iso-8859-1, or when the submitted form has an accept-charset\r\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\r\n// the ✓ character, such as us-ascii.\r\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\r\n\r\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\r\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\r\n\r\nvar parseValues = function parseQueryStringValues(str, options) {\r\n    var obj = { __proto__: null };\r\n\r\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\r\n    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\r\n\r\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\r\n    var parts = cleanStr.split(\r\n        options.delimiter,\r\n        options.throwOnLimitExceeded ? limit + 1 : limit\r\n    );\r\n\r\n    if (options.throwOnLimitExceeded && parts.length > limit) {\r\n        throw new RangeError('Parameter limit exceeded. Only ' + limit + ' parameter' + (limit === 1 ? '' : 's') + ' allowed.');\r\n    }\r\n\r\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\r\n    var i;\r\n\r\n    var charset = options.charset;\r\n    if (options.charsetSentinel) {\r\n        for (i = 0; i < parts.length; ++i) {\r\n            if (parts[i].indexOf('utf8=') === 0) {\r\n                if (parts[i] === charsetSentinel) {\r\n                    charset = 'utf-8';\r\n                } else if (parts[i] === isoSentinel) {\r\n                    charset = 'iso-8859-1';\r\n                }\r\n                skipIndex = i;\r\n                i = parts.length; // The eslint settings do not allow break;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < parts.length; ++i) {\r\n        if (i === skipIndex) {\r\n            continue;\r\n        }\r\n        var part = parts[i];\r\n\r\n        var bracketEqualsPos = part.indexOf(']=');\r\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\r\n\r\n        var key;\r\n        var val;\r\n        if (pos === -1) {\r\n            key = options.decoder(part, defaults.decoder, charset, 'key');\r\n            val = options.strictNullHandling ? null : '';\r\n        } else {\r\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\r\n\r\n            val = utils.maybeMap(\r\n                parseArrayValue(\r\n                    part.slice(pos + 1),\r\n                    options,\r\n                    isArray(obj[key]) ? obj[key].length : 0\r\n                ),\r\n                function (encodedVal) {\r\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\r\n                }\r\n            );\r\n        }\r\n\r\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\r\n            val = interpretNumericEntities(String(val));\r\n        }\r\n\r\n        if (part.indexOf('[]=') > -1) {\r\n            val = isArray(val) ? [val] : val;\r\n        }\r\n\r\n        var existing = has.call(obj, key);\r\n        if (existing && options.duplicates === 'combine') {\r\n            obj[key] = utils.combine(obj[key], val);\r\n        } else if (!existing || options.duplicates === 'last') {\r\n            obj[key] = val;\r\n        }\r\n    }\r\n\r\n    return obj;\r\n};\r\n\r\nvar parseObject = function (chain, val, options, valuesParsed) {\r\n    var currentArrayLength = 0;\r\n    if (chain.length > 0 && chain[chain.length - 1] === '[]') {\r\n        var parentKey = chain.slice(0, -1).join('');\r\n        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;\r\n    }\r\n\r\n    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);\r\n\r\n    for (var i = chain.length - 1; i >= 0; --i) {\r\n        var obj;\r\n        var root = chain[i];\r\n\r\n        if (root === '[]' && options.parseArrays) {\r\n            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))\r\n                ? []\r\n                : utils.combine([], leaf);\r\n        } else {\r\n            obj = options.plainObjects ? { __proto__: null } : {};\r\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\r\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\r\n            var index = parseInt(decodedRoot, 10);\r\n            if (!options.parseArrays && decodedRoot === '') {\r\n                obj = { 0: leaf };\r\n            } else if (\r\n                !isNaN(index)\r\n                && root !== decodedRoot\r\n                && String(index) === decodedRoot\r\n                && index >= 0\r\n                && (options.parseArrays && index <= options.arrayLimit)\r\n            ) {\r\n                obj = [];\r\n                obj[index] = leaf;\r\n            } else if (decodedRoot !== '__proto__') {\r\n                obj[decodedRoot] = leaf;\r\n            }\r\n        }\r\n\r\n        leaf = obj;\r\n    }\r\n\r\n    return leaf;\r\n};\r\n\r\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\r\n    if (!givenKey) {\r\n        return;\r\n    }\r\n\r\n    // Transform dot notation to bracket notation\r\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\r\n\r\n    // The regex chunks\r\n\r\n    var brackets = /(\\[[^[\\]]*])/;\r\n    var child = /(\\[[^[\\]]*])/g;\r\n\r\n    // Get the parent\r\n\r\n    var segment = options.depth > 0 && brackets.exec(key);\r\n    var parent = segment ? key.slice(0, segment.index) : key;\r\n\r\n    // Stash the parent if it exists\r\n\r\n    var keys = [];\r\n    if (parent) {\r\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\r\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\r\n            if (!options.allowPrototypes) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        keys.push(parent);\r\n    }\r\n\r\n    // Loop through children appending to the array until we hit depth\r\n\r\n    var i = 0;\r\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\r\n        i += 1;\r\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\r\n            if (!options.allowPrototypes) {\r\n                return;\r\n            }\r\n        }\r\n        keys.push(segment[1]);\r\n    }\r\n\r\n    // If there's a remainder, check strictDepth option for throw, else just add whatever is left\r\n\r\n    if (segment) {\r\n        if (options.strictDepth === true) {\r\n            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');\r\n        }\r\n        keys.push('[' + key.slice(segment.index) + ']');\r\n    }\r\n\r\n    return parseObject(keys, val, options, valuesParsed);\r\n};\r\n\r\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\r\n    if (!opts) {\r\n        return defaults;\r\n    }\r\n\r\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\r\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\r\n    }\r\n\r\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\r\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\r\n    }\r\n\r\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\r\n        throw new TypeError('Decoder has to be a function.');\r\n    }\r\n\r\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\r\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\r\n    }\r\n\r\n    if (typeof opts.throwOnLimitExceeded !== 'undefined' && typeof opts.throwOnLimitExceeded !== 'boolean') {\r\n        throw new TypeError('`throwOnLimitExceeded` option must be a boolean');\r\n    }\r\n\r\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\r\n\r\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\r\n\r\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\r\n        throw new TypeError('The duplicates option must be either combine, first, or last');\r\n    }\r\n\r\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\r\n\r\n    return {\r\n        allowDots: allowDots,\r\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\r\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\r\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\r\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\r\n        charset: charset,\r\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\r\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\r\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\r\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\r\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\r\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\r\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\r\n        duplicates: duplicates,\r\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\r\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\r\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\r\n        parseArrays: opts.parseArrays !== false,\r\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\r\n        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\r\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\r\n        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === 'boolean' ? opts.throwOnLimitExceeded : false\r\n    };\r\n};\r\n\r\nmodule.exports = function (str, opts) {\r\n    var options = normalizeParseOptions(opts);\r\n\r\n    if (str === '' || str === null || typeof str === 'undefined') {\r\n        return options.plainObjects ? { __proto__: null } : {};\r\n    }\r\n\r\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\r\n    var obj = options.plainObjects ? { __proto__: null } : {};\r\n\r\n    // Iterate over the keys and setup the new object\r\n\r\n    var keys = Object.keys(tempObj);\r\n    for (var i = 0; i < keys.length; ++i) {\r\n        var key = keys[i];\r\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\r\n        obj = utils.merge(obj, newObj, options);\r\n    }\r\n\r\n    if (options.allowSparse === true) {\r\n        return obj;\r\n    }\r\n\r\n    return utils.compact(obj);\r\n};\r\n"]}
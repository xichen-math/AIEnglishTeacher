{"version":3,"sources":["source-map-support.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var SourceMapConsumer = require('source-map').SourceMapConsumer;\r\nvar path = require('path');\r\n\r\nvar fs;\r\ntry {\r\n  fs = require('fs');\r\n  if (!fs.existsSync || !fs.readFileSync) {\r\n    // fs doesn't have all methods we need\r\n    fs = null;\r\n  }\r\n} catch (err) {\r\n  /* nop */\r\n}\r\n\r\nvar bufferFrom = require('buffer-from');\r\n\r\n/**\r\n * Requires a module which is protected against bundler minification.\r\n *\r\n * @param {NodeModule} mod\r\n * @param {string} request\r\n */\r\nfunction dynamicRequire(mod, request) {\r\n  return mod.require(request);\r\n}\r\n\r\n// Only install once if called multiple times\r\nvar errorFormatterInstalled = false;\r\nvar uncaughtShimInstalled = false;\r\n\r\n// If true, the caches are reset before a stack trace formatting operation\r\nvar emptyCacheBetweenOperations = false;\r\n\r\n// Supports {browser, node, auto}\r\nvar environment = \"auto\";\r\n\r\n// Maps a file path to a string containing the file contents\r\nvar fileContentsCache = {};\r\n\r\n// Maps a file path to a source map for that file\r\nvar sourceMapCache = {};\r\n\r\n// Regex for detecting source maps\r\nvar reSourceMap = /^data:application\\/json[^,]+base64,/;\r\n\r\n// Priority list of retrieve handlers\r\nvar retrieveFileHandlers = [];\r\nvar retrieveMapHandlers = [];\r\n\r\nfunction isInBrowser() {\r\n  if (environment === \"browser\")\r\n    return true;\r\n  if (environment === \"node\")\r\n    return false;\r\n  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === \"renderer\"));\r\n}\r\n\r\nfunction hasGlobalProcessEventEmitter() {\r\n  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));\r\n}\r\n\r\nfunction globalProcessVersion() {\r\n  if ((typeof process === 'object') && (process !== null)) {\r\n    return process.version;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction globalProcessStderr() {\r\n  if ((typeof process === 'object') && (process !== null)) {\r\n    return process.stderr;\r\n  }\r\n}\r\n\r\nfunction globalProcessExit(code) {\r\n  if ((typeof process === 'object') && (process !== null) && (typeof process.exit === 'function')) {\r\n    return process.exit(code);\r\n  }\r\n}\r\n\r\nfunction handlerExec(list) {\r\n  return function(arg) {\r\n    for (var i = 0; i < list.length; i++) {\r\n      var ret = list[i](arg);\r\n      if (ret) {\r\n        return ret;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n}\r\n\r\nvar retrieveFile = handlerExec(retrieveFileHandlers);\r\n\r\nretrieveFileHandlers.push(function(path) {\r\n  // Trim the path to make sure there is no extra whitespace.\r\n  path = path.trim();\r\n  if (/^file:/.test(path)) {\r\n    // existsSync/readFileSync can't handle file protocol, but once stripped, it works\r\n    path = path.replace(/file:\\/\\/\\/(\\w:)?/, function(protocol, drive) {\r\n      return drive ?\r\n        '' : // file:///C:/dir/file -> C:/dir/file\r\n        '/'; // file:///root-dir/file -> /root-dir/file\r\n    });\r\n  }\r\n  if (path in fileContentsCache) {\r\n    return fileContentsCache[path];\r\n  }\r\n\r\n  var contents = '';\r\n  try {\r\n    if (!fs) {\r\n      // Use SJAX if we are in the browser\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open('GET', path, /** async */ false);\r\n      xhr.send(null);\r\n      if (xhr.readyState === 4 && xhr.status === 200) {\r\n        contents = xhr.responseText;\r\n      }\r\n    } else if (fs.existsSync(path)) {\r\n      // Otherwise, use the filesystem\r\n      contents = fs.readFileSync(path, 'utf8');\r\n    }\r\n  } catch (er) {\r\n    /* ignore any errors */\r\n  }\r\n\r\n  return fileContentsCache[path] = contents;\r\n});\r\n\r\n// Support URLs relative to a directory, but be careful about a protocol prefix\r\n// in case we are in the browser (i.e. directories may start with \"http://\" or \"file:///\")\r\nfunction supportRelativeURL(file, url) {\r\n  if (!file) return url;\r\n  var dir = path.dirname(file);\r\n  var match = /^\\w+:\\/\\/[^\\/]*/.exec(dir);\r\n  var protocol = match ? match[0] : '';\r\n  var startPath = dir.slice(protocol.length);\r\n  if (protocol && /^\\/\\w\\:/.test(startPath)) {\r\n    // handle file:///C:/ paths\r\n    protocol += '/';\r\n    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\\\/g, '/');\r\n  }\r\n  return protocol + path.resolve(dir.slice(protocol.length), url);\r\n}\r\n\r\nfunction retrieveSourceMapURL(source) {\r\n  var fileData;\r\n\r\n  if (isInBrowser()) {\r\n     try {\r\n       var xhr = new XMLHttpRequest();\r\n       xhr.open('GET', source, false);\r\n       xhr.send(null);\r\n       fileData = xhr.readyState === 4 ? xhr.responseText : null;\r\n\r\n       // Support providing a sourceMappingURL via the SourceMap header\r\n       var sourceMapHeader = xhr.getResponseHeader(\"SourceMap\") ||\r\n                             xhr.getResponseHeader(\"X-SourceMap\");\r\n       if (sourceMapHeader) {\r\n         return sourceMapHeader;\r\n       }\r\n     } catch (e) {\r\n     }\r\n  }\r\n\r\n  // Get the URL of the source map\r\n  fileData = retrieveFile(source);\r\n  var re = /(?:\\/\\/[@#][\\s]*sourceMappingURL=([^\\s'\"]+)[\\s]*$)|(?:\\/\\*[@#][\\s]*sourceMappingURL=([^\\s*'\"]+)[\\s]*(?:\\*\\/)[\\s]*$)/mg;\r\n  // Keep executing the search to find the *last* sourceMappingURL to avoid\r\n  // picking up sourceMappingURLs from comments, strings, etc.\r\n  var lastMatch, match;\r\n  while (match = re.exec(fileData)) lastMatch = match;\r\n  if (!lastMatch) return null;\r\n  return lastMatch[1];\r\n};\r\n\r\n// Can be overridden by the retrieveSourceMap option to install. Takes a\r\n// generated source filename; returns a {map, optional url} object, or null if\r\n// there is no source map.  The map field may be either a string or the parsed\r\n// JSON object (ie, it must be a valid argument to the SourceMapConsumer\r\n// constructor).\r\nvar retrieveSourceMap = handlerExec(retrieveMapHandlers);\r\nretrieveMapHandlers.push(function(source) {\r\n  var sourceMappingURL = retrieveSourceMapURL(source);\r\n  if (!sourceMappingURL) return null;\r\n\r\n  // Read the contents of the source map\r\n  var sourceMapData;\r\n  if (reSourceMap.test(sourceMappingURL)) {\r\n    // Support source map URL as a data url\r\n    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);\r\n    sourceMapData = bufferFrom(rawData, \"base64\").toString();\r\n    sourceMappingURL = source;\r\n  } else {\r\n    // Support source map URLs relative to the source URL\r\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);\r\n    sourceMapData = retrieveFile(sourceMappingURL);\r\n  }\r\n\r\n  if (!sourceMapData) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    url: sourceMappingURL,\r\n    map: sourceMapData\r\n  };\r\n});\r\n\r\nfunction mapSourcePosition(position) {\r\n  var sourceMap = sourceMapCache[position.source];\r\n  if (!sourceMap) {\r\n    // Call the (overrideable) retrieveSourceMap function to get the source map.\r\n    var urlAndMap = retrieveSourceMap(position.source);\r\n    if (urlAndMap) {\r\n      sourceMap = sourceMapCache[position.source] = {\r\n        url: urlAndMap.url,\r\n        map: new SourceMapConsumer(urlAndMap.map)\r\n      };\r\n\r\n      // Load all sources stored inline with the source map into the file cache\r\n      // to pretend like they are already loaded. They may not exist on disk.\r\n      if (sourceMap.map.sourcesContent) {\r\n        sourceMap.map.sources.forEach(function(source, i) {\r\n          var contents = sourceMap.map.sourcesContent[i];\r\n          if (contents) {\r\n            var url = supportRelativeURL(sourceMap.url, source);\r\n            fileContentsCache[url] = contents;\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      sourceMap = sourceMapCache[position.source] = {\r\n        url: null,\r\n        map: null\r\n      };\r\n    }\r\n  }\r\n\r\n  // Resolve the source URL relative to the URL of the source map\r\n  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {\r\n    var originalPosition = sourceMap.map.originalPositionFor(position);\r\n\r\n    // Only return the original position if a matching line was found. If no\r\n    // matching line is found then we return position instead, which will cause\r\n    // the stack trace to print the path and line for the compiled file. It is\r\n    // better to give a precise location in the compiled file than a vague\r\n    // location in the original file.\r\n    if (originalPosition.source !== null) {\r\n      originalPosition.source = supportRelativeURL(\r\n        sourceMap.url, originalPosition.source);\r\n      return originalPosition;\r\n    }\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\r\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\r\nfunction mapEvalOrigin(origin) {\r\n  // Most eval() calls are in this format\r\n  var match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\r\n  if (match) {\r\n    var position = mapSourcePosition({\r\n      source: match[2],\r\n      line: +match[3],\r\n      column: match[4] - 1\r\n    });\r\n    return 'eval at ' + match[1] + ' (' + position.source + ':' +\r\n      position.line + ':' + (position.column + 1) + ')';\r\n  }\r\n\r\n  // Parse nested eval() calls using recursion\r\n  match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin);\r\n  if (match) {\r\n    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';\r\n  }\r\n\r\n  // Make sure we still return useful information if we didn't find anything\r\n  return origin;\r\n}\r\n\r\n// This is copied almost verbatim from the V8 source code at\r\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The\r\n// implementation of wrapCallSite() used to just forward to the actual source\r\n// code of CallSite.prototype.toString but unfortunately a new release of V8\r\n// did something to the prototype chain and broke the shim. The only fix I\r\n// could find was copy/paste.\r\nfunction CallSiteToString() {\r\n  var fileName;\r\n  var fileLocation = \"\";\r\n  if (this.isNative()) {\r\n    fileLocation = \"native\";\r\n  } else {\r\n    fileName = this.getScriptNameOrSourceURL();\r\n    if (!fileName && this.isEval()) {\r\n      fileLocation = this.getEvalOrigin();\r\n      fileLocation += \", \";  // Expecting source position to follow.\r\n    }\r\n\r\n    if (fileName) {\r\n      fileLocation += fileName;\r\n    } else {\r\n      // Source code does not originate from a file and is not native, but we\r\n      // can still get the source position inside the source string, e.g. in\r\n      // an eval string.\r\n      fileLocation += \"<anonymous>\";\r\n    }\r\n    var lineNumber = this.getLineNumber();\r\n    if (lineNumber != null) {\r\n      fileLocation += \":\" + lineNumber;\r\n      var columnNumber = this.getColumnNumber();\r\n      if (columnNumber) {\r\n        fileLocation += \":\" + columnNumber;\r\n      }\r\n    }\r\n  }\r\n\r\n  var line = \"\";\r\n  var functionName = this.getFunctionName();\r\n  var addSuffix = true;\r\n  var isConstructor = this.isConstructor();\r\n  var isMethodCall = !(this.isToplevel() || isConstructor);\r\n  if (isMethodCall) {\r\n    var typeName = this.getTypeName();\r\n    // Fixes shim to be backward compatable with Node v0 to v4\r\n    if (typeName === \"[object Object]\") {\r\n      typeName = \"null\";\r\n    }\r\n    var methodName = this.getMethodName();\r\n    if (functionName) {\r\n      if (typeName && functionName.indexOf(typeName) != 0) {\r\n        line += typeName + \".\";\r\n      }\r\n      line += functionName;\r\n      if (methodName && functionName.indexOf(\".\" + methodName) != functionName.length - methodName.length - 1) {\r\n        line += \" [as \" + methodName + \"]\";\r\n      }\r\n    } else {\r\n      line += typeName + \".\" + (methodName || \"<anonymous>\");\r\n    }\r\n  } else if (isConstructor) {\r\n    line += \"new \" + (functionName || \"<anonymous>\");\r\n  } else if (functionName) {\r\n    line += functionName;\r\n  } else {\r\n    line += fileLocation;\r\n    addSuffix = false;\r\n  }\r\n  if (addSuffix) {\r\n    line += \" (\" + fileLocation + \")\";\r\n  }\r\n  return line;\r\n}\r\n\r\nfunction cloneCallSite(frame) {\r\n  var object = {};\r\n  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {\r\n    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];\r\n  });\r\n  object.toString = CallSiteToString;\r\n  return object;\r\n}\r\n\r\nfunction wrapCallSite(frame, state) {\r\n  // provides interface backward compatibility\r\n  if (state === undefined) {\r\n    state = { nextPosition: null, curPosition: null }\r\n  }\r\n  if(frame.isNative()) {\r\n    state.curPosition = null;\r\n    return frame;\r\n  }\r\n\r\n  // Most call sites will return the source file from getFileName(), but code\r\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\r\n  // from getScriptNameOrSourceURL() instead\r\n  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();\r\n  if (source) {\r\n    var line = frame.getLineNumber();\r\n    var column = frame.getColumnNumber() - 1;\r\n\r\n    // Fix position in Node where some (internal) code is prepended.\r\n    // See https://github.com/evanw/node-source-map-support/issues/36\r\n    // Header removed in node at ^10.16 || >=11.11.0\r\n    // v11 is not an LTS candidate, we can just test the one version with it.\r\n    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11\r\n    var noHeader = /^v(10\\.1[6-9]|10\\.[2-9][0-9]|10\\.[0-9]{3,}|1[2-9]\\d*|[2-9]\\d|\\d{3,}|11\\.11)/;\r\n    var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;\r\n    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {\r\n      column -= headerLength;\r\n    }\r\n\r\n    var position = mapSourcePosition({\r\n      source: source,\r\n      line: line,\r\n      column: column\r\n    });\r\n    state.curPosition = position;\r\n    frame = cloneCallSite(frame);\r\n    var originalFunctionName = frame.getFunctionName;\r\n    frame.getFunctionName = function() {\r\n      if (state.nextPosition == null) {\r\n        return originalFunctionName();\r\n      }\r\n      return state.nextPosition.name || originalFunctionName();\r\n    };\r\n    frame.getFileName = function() { return position.source; };\r\n    frame.getLineNumber = function() { return position.line; };\r\n    frame.getColumnNumber = function() { return position.column + 1; };\r\n    frame.getScriptNameOrSourceURL = function() { return position.source; };\r\n    return frame;\r\n  }\r\n\r\n  // Code called using eval() needs special handling\r\n  var origin = frame.isEval() && frame.getEvalOrigin();\r\n  if (origin) {\r\n    origin = mapEvalOrigin(origin);\r\n    frame = cloneCallSite(frame);\r\n    frame.getEvalOrigin = function() { return origin; };\r\n    return frame;\r\n  }\r\n\r\n  // If we get here then we were unable to change the source position\r\n  return frame;\r\n}\r\n\r\n// This function is part of the V8 stack trace API, for more info see:\r\n// https://v8.dev/docs/stack-trace-api\r\nfunction prepareStackTrace(error, stack) {\r\n  if (emptyCacheBetweenOperations) {\r\n    fileContentsCache = {};\r\n    sourceMapCache = {};\r\n  }\r\n\r\n  var name = error.name || 'Error';\r\n  var message = error.message || '';\r\n  var errorString = name + \": \" + message;\r\n\r\n  var state = { nextPosition: null, curPosition: null };\r\n  var processedStack = [];\r\n  for (var i = stack.length - 1; i >= 0; i--) {\r\n    processedStack.push('\\n    at ' + wrapCallSite(stack[i], state));\r\n    state.nextPosition = state.curPosition;\r\n  }\r\n  state.curPosition = state.nextPosition = null;\r\n  return errorString + processedStack.reverse().join('');\r\n}\r\n\r\n// Generate position and snippet of original source with pointer\r\nfunction getErrorSource(error) {\r\n  var match = /\\n    at [^(]+ \\((.*):(\\d+):(\\d+)\\)/.exec(error.stack);\r\n  if (match) {\r\n    var source = match[1];\r\n    var line = +match[2];\r\n    var column = +match[3];\r\n\r\n    // Support the inline sourceContents inside the source map\r\n    var contents = fileContentsCache[source];\r\n\r\n    // Support files on disk\r\n    if (!contents && fs && fs.existsSync(source)) {\r\n      try {\r\n        contents = fs.readFileSync(source, 'utf8');\r\n      } catch (er) {\r\n        contents = '';\r\n      }\r\n    }\r\n\r\n    // Format the line from the original source code like node does\r\n    if (contents) {\r\n      var code = contents.split(/(?:\\r\\n|\\r|\\n)/)[line - 1];\r\n      if (code) {\r\n        return source + ':' + line + '\\n' + code + '\\n' +\r\n          new Array(column).join(' ') + '^';\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction printErrorAndExit (error) {\r\n  var source = getErrorSource(error);\r\n\r\n  // Ensure error is printed synchronously and not truncated\r\n  var stderr = globalProcessStderr();\r\n  if (stderr && stderr._handle && stderr._handle.setBlocking) {\r\n    stderr._handle.setBlocking(true);\r\n  }\r\n\r\n  if (source) {\r\n    console.error();\r\n    console.error(source);\r\n  }\r\n\r\n  console.error(error.stack);\r\n  globalProcessExit(1);\r\n}\r\n\r\nfunction shimEmitUncaughtException () {\r\n  var origEmit = process.emit;\r\n\r\n  process.emit = function (type) {\r\n    if (type === 'uncaughtException') {\r\n      var hasStack = (arguments[1] && arguments[1].stack);\r\n      var hasListeners = (this.listeners(type).length > 0);\r\n\r\n      if (hasStack && !hasListeners) {\r\n        return printErrorAndExit(arguments[1]);\r\n      }\r\n    }\r\n\r\n    return origEmit.apply(this, arguments);\r\n  };\r\n}\r\n\r\nvar originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);\r\nvar originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);\r\n\r\nexports.wrapCallSite = wrapCallSite;\r\nexports.getErrorSource = getErrorSource;\r\nexports.mapSourcePosition = mapSourcePosition;\r\nexports.retrieveSourceMap = retrieveSourceMap;\r\n\r\nexports.install = function(options) {\r\n  options = options || {};\r\n\r\n  if (options.environment) {\r\n    environment = options.environment;\r\n    if ([\"node\", \"browser\", \"auto\"].indexOf(environment) === -1) {\r\n      throw new Error(\"environment \" + environment + \" was unknown. Available options are {auto, browser, node}\")\r\n    }\r\n  }\r\n\r\n  // Allow sources to be found by methods other than reading the files\r\n  // directly from disk.\r\n  if (options.retrieveFile) {\r\n    if (options.overrideRetrieveFile) {\r\n      retrieveFileHandlers.length = 0;\r\n    }\r\n\r\n    retrieveFileHandlers.unshift(options.retrieveFile);\r\n  }\r\n\r\n  // Allow source maps to be found by methods other than reading the files\r\n  // directly from disk.\r\n  if (options.retrieveSourceMap) {\r\n    if (options.overrideRetrieveSourceMap) {\r\n      retrieveMapHandlers.length = 0;\r\n    }\r\n\r\n    retrieveMapHandlers.unshift(options.retrieveSourceMap);\r\n  }\r\n\r\n  // Support runtime transpilers that include inline source maps\r\n  if (options.hookRequire && !isInBrowser()) {\r\n    // Use dynamicRequire to avoid including in browser bundles\r\n    var Module = dynamicRequire(module, 'module');\r\n    var $compile = Module.prototype._compile;\r\n\r\n    if (!$compile.__sourceMapSupport) {\r\n      Module.prototype._compile = function(content, filename) {\r\n        fileContentsCache[filename] = content;\r\n        sourceMapCache[filename] = undefined;\r\n        return $compile.call(this, content, filename);\r\n      };\r\n\r\n      Module.prototype._compile.__sourceMapSupport = true;\r\n    }\r\n  }\r\n\r\n  // Configure options\r\n  if (!emptyCacheBetweenOperations) {\r\n    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?\r\n      options.emptyCacheBetweenOperations : false;\r\n  }\r\n\r\n  // Install the error reformatter\r\n  if (!errorFormatterInstalled) {\r\n    errorFormatterInstalled = true;\r\n    Error.prepareStackTrace = prepareStackTrace;\r\n  }\r\n\r\n  if (!uncaughtShimInstalled) {\r\n    var installHandler = 'handleUncaughtExceptions' in options ?\r\n      options.handleUncaughtExceptions : true;\r\n\r\n    // Do not override 'uncaughtException' with our own handler in Node.js\r\n    // Worker threads. Workers pass the error to the main thread as an event,\r\n    // rather than printing something to stderr and exiting.\r\n    try {\r\n      // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.\r\n      var worker_threads = dynamicRequire(module, 'worker_threads');\r\n      if (worker_threads.isMainThread === false) {\r\n        installHandler = false;\r\n      }\r\n    } catch(e) {}\r\n\r\n    // Provide the option to not install the uncaught exception handler. This is\r\n    // to support other uncaught exception handlers (in test frameworks, for\r\n    // example). If this handler is not installed and there are no other uncaught\r\n    // exception handlers, uncaught exceptions will be caught by node's built-in\r\n    // exception handler and the process will still be terminated. However, the\r\n    // generated JavaScript code will be shown above the stack trace instead of\r\n    // the original source code.\r\n    if (installHandler && hasGlobalProcessEventEmitter()) {\r\n      uncaughtShimInstalled = true;\r\n      shimEmitUncaughtException();\r\n    }\r\n  }\r\n};\r\n\r\nexports.resetRetrieveHandlers = function() {\r\n  retrieveFileHandlers.length = 0;\r\n  retrieveMapHandlers.length = 0;\r\n\r\n  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);\r\n  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);\r\n\r\n  retrieveSourceMap = handlerExec(retrieveMapHandlers);\r\n  retrieveFile = handlerExec(retrieveFileHandlers);\r\n}\r\n"]}
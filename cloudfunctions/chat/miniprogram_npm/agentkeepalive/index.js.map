{"version":3,"sources":["index.js","lib/agent.js","lib/constants.js","lib/https_agent.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nconst HttpAgent = require('./lib/agent');\r\nmodule.exports = HttpAgent;\r\nmodule.exports.HttpAgent = HttpAgent;\r\nmodule.exports.HttpsAgent = require('./lib/https_agent');\r\nmodule.exports.constants = require('./lib/constants');\r\n","\r\n\r\nconst OriginalAgent = require('http').Agent;\r\nconst ms = require('humanize-ms');\r\nconst debug = require('util').debuglog('agentkeepalive');\r\nconst {\r\n  INIT_SOCKET,\r\n  CURRENT_ID,\r\n  CREATE_ID,\r\n  SOCKET_CREATED_TIME,\r\n  SOCKET_NAME,\r\n  SOCKET_REQUEST_COUNT,\r\n  SOCKET_REQUEST_FINISHED_COUNT,\r\n} = require('./constants');\r\n\r\n// OriginalAgent come from\r\n// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\r\n// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\r\n\r\n// node <= 10\r\nlet defaultTimeoutListenerCount = 1;\r\nconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\r\nif (majorVersion >= 11 && majorVersion <= 12) {\r\n  defaultTimeoutListenerCount = 2;\r\n} else if (majorVersion >= 13) {\r\n  defaultTimeoutListenerCount = 3;\r\n}\r\n\r\nfunction deprecate(message) {\r\n  console.log('[agentkeepalive:deprecated] %s', message);\r\n}\r\n\r\nclass Agent extends OriginalAgent {\r\n  constructor(options) {\r\n    options = options || {};\r\n    options.keepAlive = options.keepAlive !== false;\r\n    // default is keep-alive and 4s free socket timeout\r\n    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\r\n    if (options.freeSocketTimeout === undefined) {\r\n      options.freeSocketTimeout = 4000;\r\n    }\r\n    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\r\n    if (options.keepAliveTimeout) {\r\n      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\r\n      options.freeSocketTimeout = options.keepAliveTimeout;\r\n      delete options.keepAliveTimeout;\r\n    }\r\n    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\r\n    if (options.freeSocketKeepAliveTimeout) {\r\n      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\r\n      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\r\n      delete options.freeSocketKeepAliveTimeout;\r\n    }\r\n\r\n    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\r\n    // By default is double free socket timeout.\r\n    if (options.timeout === undefined) {\r\n      // make sure socket default inactivity timeout >= 8s\r\n      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\r\n    }\r\n\r\n    // support humanize format\r\n    options.timeout = ms(options.timeout);\r\n    options.freeSocketTimeout = ms(options.freeSocketTimeout);\r\n    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\r\n\r\n    super(options);\r\n\r\n    this[CURRENT_ID] = 0;\r\n\r\n    // create socket success counter\r\n    this.createSocketCount = 0;\r\n    this.createSocketCountLastCheck = 0;\r\n\r\n    this.createSocketErrorCount = 0;\r\n    this.createSocketErrorCountLastCheck = 0;\r\n\r\n    this.closeSocketCount = 0;\r\n    this.closeSocketCountLastCheck = 0;\r\n\r\n    // socket error event count\r\n    this.errorSocketCount = 0;\r\n    this.errorSocketCountLastCheck = 0;\r\n\r\n    // request finished counter\r\n    this.requestCount = 0;\r\n    this.requestCountLastCheck = 0;\r\n\r\n    // including free socket timeout counter\r\n    this.timeoutSocketCount = 0;\r\n    this.timeoutSocketCountLastCheck = 0;\r\n\r\n    this.on('free', socket => {\r\n      // https://github.com/nodejs/node/pull/32000\r\n      // Node.js native agent will check socket timeout eqs agent.options.timeout.\r\n      // Use the ttl or freeSocketTimeout to overwrite.\r\n      const timeout = this.calcSocketTimeout(socket);\r\n      if (timeout > 0 && socket.timeout !== timeout) {\r\n        socket.setTimeout(timeout);\r\n      }\r\n    });\r\n  }\r\n\r\n  get freeSocketKeepAliveTimeout() {\r\n    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\r\n    return this.options.freeSocketTimeout;\r\n  }\r\n\r\n  get timeout() {\r\n    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\r\n    return this.options.timeout;\r\n  }\r\n\r\n  get socketActiveTTL() {\r\n    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\r\n    return this.options.socketActiveTTL;\r\n  }\r\n\r\n  calcSocketTimeout(socket) {\r\n    /**\r\n     * return <= 0: should free socket\r\n     * return > 0: should update socket timeout\r\n     * return undefined: not find custom timeout\r\n     */\r\n    let freeSocketTimeout = this.options.freeSocketTimeout;\r\n    const socketActiveTTL = this.options.socketActiveTTL;\r\n    if (socketActiveTTL) {\r\n      // check socketActiveTTL\r\n      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\r\n      const diff = socketActiveTTL - aliveTime;\r\n      if (diff <= 0) {\r\n        return diff;\r\n      }\r\n      if (freeSocketTimeout && diff < freeSocketTimeout) {\r\n        freeSocketTimeout = diff;\r\n      }\r\n    }\r\n    // set freeSocketTimeout\r\n    if (freeSocketTimeout) {\r\n      // set free keepalive timer\r\n      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\r\n      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\r\n      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\r\n      return customFreeSocketTimeout || freeSocketTimeout;\r\n    }\r\n  }\r\n\r\n  keepSocketAlive(socket) {\r\n    const result = super.keepSocketAlive(socket);\r\n    // should not keepAlive, do nothing\r\n    if (!result) return result;\r\n\r\n    const customTimeout = this.calcSocketTimeout(socket);\r\n    if (typeof customTimeout === 'undefined') {\r\n      return true;\r\n    }\r\n    if (customTimeout <= 0) {\r\n      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\r\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\r\n      return false;\r\n    }\r\n    if (socket.timeout !== customTimeout) {\r\n      socket.setTimeout(customTimeout);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // only call on addRequest\r\n  reuseSocket(...args) {\r\n    // reuseSocket(socket, req)\r\n    super.reuseSocket(...args);\r\n    const socket = args[0];\r\n    const req = args[1];\r\n    req.reusedSocket = true;\r\n    const agentTimeout = this.options.timeout;\r\n    if (getSocketTimeout(socket) !== agentTimeout) {\r\n      // reset timeout before use\r\n      socket.setTimeout(agentTimeout);\r\n      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\r\n    }\r\n    socket[SOCKET_REQUEST_COUNT]++;\r\n    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\r\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\r\n      getSocketTimeout(socket));\r\n  }\r\n\r\n  [CREATE_ID]() {\r\n    const id = this[CURRENT_ID]++;\r\n    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\r\n    return id;\r\n  }\r\n\r\n  [INIT_SOCKET](socket, options) {\r\n    // bugfix here.\r\n    // https on node 8, 10 won't set agent.options.timeout by default\r\n    // TODO: need to fix on node itself\r\n    if (options.timeout) {\r\n      const timeout = getSocketTimeout(socket);\r\n      if (!timeout) {\r\n        socket.setTimeout(options.timeout);\r\n      }\r\n    }\r\n\r\n    if (this.options.keepAlive) {\r\n      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\r\n      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\r\n      socket.setNoDelay(true);\r\n    }\r\n    this.createSocketCount++;\r\n    if (this.options.socketActiveTTL) {\r\n      socket[SOCKET_CREATED_TIME] = Date.now();\r\n    }\r\n    // don't show the hole '-----BEGIN CERTIFICATE----' key string\r\n    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\r\n    socket[SOCKET_REQUEST_COUNT] = 1;\r\n    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\r\n    installListeners(this, socket, options);\r\n  }\r\n\r\n  createConnection(options, oncreate) {\r\n    let called = false;\r\n    const onNewCreate = (err, socket) => {\r\n      if (called) return;\r\n      called = true;\r\n\r\n      if (err) {\r\n        this.createSocketErrorCount++;\r\n        return oncreate(err);\r\n      }\r\n      this[INIT_SOCKET](socket, options);\r\n      oncreate(err, socket);\r\n    };\r\n\r\n    const newSocket = super.createConnection(options, onNewCreate);\r\n    if (newSocket) onNewCreate(null, newSocket);\r\n    return newSocket;\r\n  }\r\n\r\n  get statusChanged() {\r\n    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\r\n      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\r\n      this.closeSocketCount !== this.closeSocketCountLastCheck ||\r\n      this.errorSocketCount !== this.errorSocketCountLastCheck ||\r\n      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\r\n      this.requestCount !== this.requestCountLastCheck;\r\n    if (changed) {\r\n      this.createSocketCountLastCheck = this.createSocketCount;\r\n      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\r\n      this.closeSocketCountLastCheck = this.closeSocketCount;\r\n      this.errorSocketCountLastCheck = this.errorSocketCount;\r\n      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\r\n      this.requestCountLastCheck = this.requestCount;\r\n    }\r\n    return changed;\r\n  }\r\n\r\n  getCurrentStatus() {\r\n    return {\r\n      createSocketCount: this.createSocketCount,\r\n      createSocketErrorCount: this.createSocketErrorCount,\r\n      closeSocketCount: this.closeSocketCount,\r\n      errorSocketCount: this.errorSocketCount,\r\n      timeoutSocketCount: this.timeoutSocketCount,\r\n      requestCount: this.requestCount,\r\n      freeSockets: inspect(this.freeSockets),\r\n      sockets: inspect(this.sockets),\r\n      requests: inspect(this.requests),\r\n    };\r\n  }\r\n}\r\n\r\n// node 8 don't has timeout attribute on socket\r\n// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\r\nfunction getSocketTimeout(socket) {\r\n  return socket.timeout || socket._idleTimeout;\r\n}\r\n\r\nfunction installListeners(agent, socket, options) {\r\n  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\r\n\r\n  // listener socket events: close, timeout, error, free\r\n  function onFree() {\r\n    // create and socket.emit('free') logic\r\n    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\r\n    // no req on the socket, it should be the new socket\r\n    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\r\n\r\n    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\r\n    agent.requestCount++;\r\n    debug('%s(requests: %s, finished: %s) free',\r\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\r\n\r\n    // should reuse on pedding requests?\r\n    const name = agent.getName(options);\r\n    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\r\n      // will be reuse on agent free listener\r\n      socket[SOCKET_REQUEST_COUNT]++;\r\n      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\r\n        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\r\n    }\r\n  }\r\n  socket.on('free', onFree);\r\n\r\n  function onClose(isError) {\r\n    debug('%s(requests: %s, finished: %s) close, isError: %s',\r\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\r\n    agent.closeSocketCount++;\r\n  }\r\n  socket.on('close', onClose);\r\n\r\n  // start socket timeout handler\r\n  function onTimeout() {\r\n    // onTimeout and emitRequestTimeout(_http_client.js)\r\n    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\r\n    const listenerCount = socket.listeners('timeout').length;\r\n    // node <= 10, default listenerCount is 1, onTimeout\r\n    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\r\n    // node >= 13, default listenerCount is 3, onTimeout,\r\n    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\r\n    //   and emitRequestTimeout\r\n    const timeout = getSocketTimeout(socket);\r\n    const req = socket._httpMessage;\r\n    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\r\n    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\r\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\r\n      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\r\n    if (debug.enabled) {\r\n      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\r\n    }\r\n    agent.timeoutSocketCount++;\r\n    const name = agent.getName(options);\r\n    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\r\n      // free socket timeout, destroy quietly\r\n      socket.destroy();\r\n      // Remove it from freeSockets list immediately to prevent new requests\r\n      // from being sent through this socket.\r\n      agent.removeSocket(socket, options);\r\n      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\r\n    } else {\r\n      // if there is no any request socket timeout handler,\r\n      // agent need to handle socket timeout itself.\r\n      //\r\n      // custom request socket timeout handle logic must follow these rules:\r\n      //  1. Destroy socket first\r\n      //  2. Must emit socket 'agentRemove' event tell agent remove socket\r\n      //     from freeSockets list immediately.\r\n      //     Otherise you may be get 'socket hang up' error when reuse\r\n      //     free socket and timeout happen in the same time.\r\n      if (reqTimeoutListenerCount === 0) {\r\n        const error = new Error('Socket timeout');\r\n        error.code = 'ERR_SOCKET_TIMEOUT';\r\n        error.timeout = timeout;\r\n        // must manually call socket.end() or socket.destroy() to end the connection.\r\n        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\r\n        socket.destroy(error);\r\n        agent.removeSocket(socket, options);\r\n        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\r\n      }\r\n    }\r\n  }\r\n  socket.on('timeout', onTimeout);\r\n\r\n  function onError(err) {\r\n    const listenerCount = socket.listeners('error').length;\r\n    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\r\n      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\r\n      err, listenerCount);\r\n    agent.errorSocketCount++;\r\n    if (listenerCount === 1) {\r\n      // if socket don't contain error event handler, don't catch it, emit it again\r\n      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\r\n      socket.removeListener('error', onError);\r\n      socket.emit('error', err);\r\n    }\r\n  }\r\n  socket.on('error', onError);\r\n\r\n  function onRemove() {\r\n    debug('%s(requests: %s, finished: %s) agentRemove',\r\n      socket[SOCKET_NAME],\r\n      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\r\n    // We need this function for cases like HTTP 'upgrade'\r\n    // (defined by WebSockets) where we need to remove a socket from the\r\n    // pool because it'll be locked up indefinitely\r\n    socket.removeListener('close', onClose);\r\n    socket.removeListener('error', onError);\r\n    socket.removeListener('free', onFree);\r\n    socket.removeListener('timeout', onTimeout);\r\n    socket.removeListener('agentRemove', onRemove);\r\n  }\r\n  socket.on('agentRemove', onRemove);\r\n}\r\n\r\nmodule.exports = Agent;\r\n\r\nfunction inspect(obj) {\r\n  const res = {};\r\n  for (const key in obj) {\r\n    res[key] = obj[key].length;\r\n  }\r\n  return res;\r\n}\r\n","\r\n\r\nmodule.exports = {\r\n  // agent\r\n  CURRENT_ID: Symbol('agentkeepalive#currentId'),\r\n  CREATE_ID: Symbol('agentkeepalive#createId'),\r\n  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\r\n  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\r\n  // socket\r\n  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\r\n  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\r\n  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\r\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\r\n};\r\n","\r\n\r\nconst OriginalHttpsAgent = require('https').Agent;\r\nconst HttpAgent = require('./agent');\r\nconst {\r\n  INIT_SOCKET,\r\n  CREATE_HTTPS_CONNECTION,\r\n} = require('./constants');\r\n\r\nclass HttpsAgent extends HttpAgent {\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.defaultPort = 443;\r\n    this.protocol = 'https:';\r\n    this.maxCachedSessions = this.options.maxCachedSessions;\r\n    /* istanbul ignore next */\r\n    if (this.maxCachedSessions === undefined) {\r\n      this.maxCachedSessions = 100;\r\n    }\r\n\r\n    this._sessionCache = {\r\n      map: {},\r\n      list: [],\r\n    };\r\n  }\r\n\r\n  createConnection(options, oncreate) {\r\n    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);\r\n    this[INIT_SOCKET](socket, options);\r\n    return socket;\r\n  }\r\n}\r\n\r\n// https://github.com/nodejs/node/blob/master/lib/https.js#L89\r\nHttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\r\n\r\n[\r\n  'getName',\r\n  '_getSession',\r\n  '_cacheSession',\r\n  // https://github.com/nodejs/node/pull/4982\r\n  '_evictSession',\r\n].forEach(function(method) {\r\n  /* istanbul ignore next */\r\n  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\r\n    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];\r\n  }\r\n});\r\n\r\nmodule.exports = HttpsAgent;\r\n"]}
{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var crypto = require('crypto')\r\n\r\nfunction sha (key, body, algorithm) {\r\n  return crypto.createHmac(algorithm, key).update(body).digest('base64')\r\n}\r\n\r\nfunction rsa (key, body) {\r\n  return crypto.createSign('RSA-SHA1').update(body).sign(key, 'base64')\r\n}\r\n\r\nfunction rfc3986 (str) {\r\n  return encodeURIComponent(str)\r\n    .replace(/!/g,'%21')\r\n    .replace(/\\*/g,'%2A')\r\n    .replace(/\\(/g,'%28')\r\n    .replace(/\\)/g,'%29')\r\n    .replace(/'/g,'%27')\r\n}\r\n\r\n// Maps object to bi-dimensional array\r\n// Converts { foo: 'A', bar: [ 'b', 'B' ]} to\r\n// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]\r\nfunction map (obj) {\r\n  var key, val, arr = []\r\n  for (key in obj) {\r\n    val = obj[key]\r\n    if (Array.isArray(val))\r\n      for (var i = 0; i < val.length; i++)\r\n        arr.push([key, val[i]])\r\n    else if (typeof val === 'object')\r\n      for (var prop in val)\r\n        arr.push([key + '[' + prop + ']', val[prop]])\r\n    else\r\n      arr.push([key, val])\r\n  }\r\n  return arr\r\n}\r\n\r\n// Compare function for sort\r\nfunction compare (a, b) {\r\n  return a > b ? 1 : a < b ? -1 : 0\r\n}\r\n\r\nfunction generateBase (httpMethod, base_uri, params) {\r\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \r\n  // https://dev.twitter.com/docs/auth/creating-signature\r\n\r\n  // Parameter normalization\r\n  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2\r\n  var normalized = map(params)\r\n  // 1.  First, the name and value of each parameter are encoded\r\n  .map(function (p) {\r\n    return [ rfc3986(p[0]), rfc3986(p[1] || '') ]\r\n  })\r\n  // 2.  The parameters are sorted by name, using ascending byte value\r\n  //     ordering.  If two or more parameters share the same name, they\r\n  //     are sorted by their value.\r\n  .sort(function (a, b) {\r\n    return compare(a[0], b[0]) || compare(a[1], b[1])\r\n  })\r\n  // 3.  The name of each parameter is concatenated to its corresponding\r\n  //     value using an \"=\" character (ASCII code 61) as a separator, even\r\n  //     if the value is empty.\r\n  .map(function (p) { return p.join('=') })\r\n   // 4.  The sorted name/value pairs are concatenated together into a\r\n   //     single string by using an \"&\" character (ASCII code 38) as\r\n   //     separator.\r\n  .join('&')\r\n\r\n  var base = [\r\n    rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'),\r\n    rfc3986(base_uri),\r\n    rfc3986(normalized)\r\n  ].join('&')\r\n\r\n  return base\r\n}\r\n\r\nfunction hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {\r\n  var base = generateBase(httpMethod, base_uri, params)\r\n  var key = [\r\n    consumer_secret || '',\r\n    token_secret || ''\r\n  ].map(rfc3986).join('&')\r\n\r\n  return sha(key, base, 'sha1')\r\n}\r\n\r\nfunction hmacsign256 (httpMethod, base_uri, params, consumer_secret, token_secret) {\r\n  var base = generateBase(httpMethod, base_uri, params)\r\n  var key = [\r\n    consumer_secret || '',\r\n    token_secret || ''\r\n  ].map(rfc3986).join('&')\r\n\r\n  return sha(key, base, 'sha256')\r\n}\r\n\r\nfunction rsasign (httpMethod, base_uri, params, private_key, token_secret) {\r\n  var base = generateBase(httpMethod, base_uri, params)\r\n  var key = private_key || ''\r\n\r\n  return rsa(key, base)\r\n}\r\n\r\nfunction plaintext (consumer_secret, token_secret) {\r\n  var key = [\r\n    consumer_secret || '',\r\n    token_secret || ''\r\n  ].map(rfc3986).join('&')\r\n\r\n  return key\r\n}\r\n\r\nfunction sign (signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {\r\n  var method\r\n  var skipArgs = 1\r\n\r\n  switch (signMethod) {\r\n    case 'RSA-SHA1':\r\n      method = rsasign\r\n      break\r\n    case 'HMAC-SHA1':\r\n      method = hmacsign\r\n      break\r\n    case 'HMAC-SHA256':\r\n      method = hmacsign256\r\n      break\r\n    case 'PLAINTEXT':\r\n      method = plaintext\r\n      skipArgs = 4\r\n      break\r\n    default:\r\n     throw new Error('Signature method not supported: ' + signMethod)\r\n  }\r\n\r\n  return method.apply(null, [].slice.call(arguments, skipArgs))\r\n}\r\n\r\nexports.hmacsign = hmacsign\r\nexports.hmacsign256 = hmacsign256\r\nexports.rsasign = rsasign\r\nexports.plaintext = plaintext\r\nexports.sign = sign\r\nexports.rfc3986 = rfc3986\r\nexports.generateBase = generateBase"]}
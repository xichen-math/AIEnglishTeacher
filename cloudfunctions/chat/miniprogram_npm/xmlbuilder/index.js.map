{"version":3,"sources":["index.js","Utility.js","XMLDOMImplementation.js","XMLDocument.js","XMLDOMConfiguration.js","XMLDOMErrorHandler.js","XMLDOMStringList.js","XMLNode.js","XMLElement.js","NodeType.js","XMLAttribute.js","XMLNamedNodeMap.js","XMLCData.js","XMLCharacterData.js","XMLComment.js","XMLDeclaration.js","XMLDocType.js","XMLDTDAttList.js","XMLDTDEntity.js","XMLDTDElement.js","XMLDTDNotation.js","XMLRaw.js","XMLText.js","XMLProcessingInstruction.js","XMLDummy.js","XMLNodeList.js","DocumentPosition.js","XMLStringifier.js","XMLStringWriter.js","XMLWriterBase.js","WriterState.js","XMLDocumentCB.js","XMLStreamWriter.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,AGTA,AFMA,ACHA,AHSA;ACFA,AGTA,AFMA,ACHA,AHSA;ACFA,AGTA,AFMA,ACHA,AHSA;ACFA,AGTA,ACHA,AHSA,ACHA,AHSA;ACFA,AGTA,ACHA,AHSA,ACHA,AHSA;ACFA,AGTA,ACHA,AHSA,ACHA,AHSA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AHSA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AHSA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AHSA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AIZA,APqBA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AIZA,APqBA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AIZA,APqBA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;ACFA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AGTA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,ACHA,AHSA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,AFMA,AIZA,AHSA,AKfA,ADGA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,ANkBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ARwBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ARwBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ARwBA,AFMA,AIZA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,AT2BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,AT2BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,AT2BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AENA,AHSA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AENA,AS3BA,AZoCA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AENA,AS3BA,AZoCA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AWjCA,AZoCA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AWjCA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AWjCA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;AS1BA,ARwBA,AS3BA,AENA,ACHA,ACHA,AV8BA,AWjCA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AFMA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AFMA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AFMA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,ACHA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,ACHA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,ACHA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AHSA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,APqBA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ArB+DA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ArB+DA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ArB+DA;ACFA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,Ac1CA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AKfA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AENA,ACHA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AGTA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AGTA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AgBhDA,AFMA,ACHA;ArBgEA,AS3BA,AGTA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;ArBgEA,AS3BA,AGTA,ACHA,AV8BA,AavCA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;ArBgEA,AS3BA,AGTA,ACHA,AGTA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;AIXA,AzB2EA,AS3BA,AGTA,ACHA,AGTA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,ACHA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AMlBA,ALeA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AMlBA,ALeA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AMlBA,ALeA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA;AIXA,AzB2EA,AS3BA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA;AIXA,AhBgDA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;AHUA,AhBgDA,AGTA,AIZA,AENA,ADGA,AENA,ALeA,ACHA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;AHUA,AhBgDA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;AHUA,AIZA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,AqB/DA,AhBgDA,AGTA,AJYA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,AqB/DA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,AENA,ADGA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AOrBA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AWjCA,AJYA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AWjCA,AJYA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AFMA,AWjCA,AJYA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AS3BA,AJYA,ADGA,ALeA,AOrBA;ACFA,ApB4DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,APqBA,AhBgDA,ADGA,AkBtDA,AFMA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AIZA,ACHA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AENA,AJYA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AGTA,AKfA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AgBhDA,AS3BA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,AJYA,ADGA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,ALeA,AOrBA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AnB0DA,AQxBA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AXkCA,AFMA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AbwCA,AbuCA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;A1B+EA,A4BpFA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AyB3EA,ALeA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AoB5DA,AENA;AELA,AvBqEA,ADGA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA,AsBlEA;AELA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwEA;AwBvEA,AxBwfile":"index.js","sourcesContent":["// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\r\n\r\n  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;\r\n\r\n  XMLDOMImplementation = require('./XMLDOMImplementation');\r\n\r\n  XMLDocument = require('./XMLDocument');\r\n\r\n  XMLDocumentCB = require('./XMLDocumentCB');\r\n\r\n  XMLStringWriter = require('./XMLStringWriter');\r\n\r\n  XMLStreamWriter = require('./XMLStreamWriter');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  WriterState = require('./WriterState');\r\n\r\n  module.exports.create = function(name, xmldec, doctype, options) {\r\n    var doc, root;\r\n    if (name == null) {\r\n      throw new Error(\"Root element needs a name.\");\r\n    }\r\n    options = assign({}, xmldec, doctype, options);\r\n    doc = new XMLDocument(options);\r\n    root = doc.element(name);\r\n    if (!options.headless) {\r\n      doc.declaration(options);\r\n      if ((options.pubID != null) || (options.sysID != null)) {\r\n        doc.dtd(options);\r\n      }\r\n    }\r\n    return root;\r\n  };\r\n\r\n  module.exports.begin = function(options, onData, onEnd) {\r\n    var ref1;\r\n    if (isFunction(options)) {\r\n      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];\r\n      options = {};\r\n    }\r\n    if (onData) {\r\n      return new XMLDocumentCB(options, onData, onEnd);\r\n    } else {\r\n      return new XMLDocument(options);\r\n    }\r\n  };\r\n\r\n  module.exports.stringWriter = function(options) {\r\n    return new XMLStringWriter(options);\r\n  };\r\n\r\n  module.exports.streamWriter = function(stream, options) {\r\n    return new XMLStreamWriter(stream, options);\r\n  };\r\n\r\n  module.exports.implementation = new XMLDOMImplementation();\r\n\r\n  module.exports.nodeType = NodeType;\r\n\r\n  module.exports.writerState = WriterState;\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\r\n    slice = [].slice,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  assign = function() {\r\n    var i, key, len, source, sources, target;\r\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\r\n    if (isFunction(Object.assign)) {\r\n      Object.assign.apply(null, arguments);\r\n    } else {\r\n      for (i = 0, len = sources.length; i < len; i++) {\r\n        source = sources[i];\r\n        if (source != null) {\r\n          for (key in source) {\r\n            if (!hasProp.call(source, key)) continue;\r\n            target[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n\r\n  isFunction = function(val) {\r\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\r\n  };\r\n\r\n  isObject = function(val) {\r\n    var ref;\r\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\r\n  };\r\n\r\n  isArray = function(val) {\r\n    if (isFunction(Array.isArray)) {\r\n      return Array.isArray(val);\r\n    } else {\r\n      return Object.prototype.toString.call(val) === '[object Array]';\r\n    }\r\n  };\r\n\r\n  isEmpty = function(val) {\r\n    var key;\r\n    if (isArray(val)) {\r\n      return !val.length;\r\n    } else {\r\n      for (key in val) {\r\n        if (!hasProp.call(val, key)) continue;\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n  };\r\n\r\n  isPlainObject = function(val) {\r\n    var ctor, proto;\r\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\r\n  };\r\n\r\n  getValue = function(obj) {\r\n    if (isFunction(obj.valueOf)) {\r\n      return obj.valueOf();\r\n    } else {\r\n      return obj;\r\n    }\r\n  };\r\n\r\n  module.exports.assign = assign;\r\n\r\n  module.exports.isFunction = isFunction;\r\n\r\n  module.exports.isObject = isObject;\r\n\r\n  module.exports.isArray = isArray;\r\n\r\n  module.exports.isEmpty = isEmpty;\r\n\r\n  module.exports.isPlainObject = isPlainObject;\r\n\r\n  module.exports.getValue = getValue;\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLDOMImplementation;\r\n\r\n  module.exports = XMLDOMImplementation = (function() {\r\n    function XMLDOMImplementation() {}\r\n\r\n    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\r\n      return true;\r\n    };\r\n\r\n    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    XMLDOMImplementation.prototype.getFeature = function(feature, version) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    return XMLDOMImplementation;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  isPlainObject = require('./Utility').isPlainObject;\r\n\r\n  XMLDOMImplementation = require('./XMLDOMImplementation');\r\n\r\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLStringifier = require('./XMLStringifier');\r\n\r\n  XMLStringWriter = require('./XMLStringWriter');\r\n\r\n  module.exports = XMLDocument = (function(superClass) {\r\n    extend(XMLDocument, superClass);\r\n\r\n    function XMLDocument(options) {\r\n      XMLDocument.__super__.constructor.call(this, null);\r\n      this.name = \"#document\";\r\n      this.type = NodeType.Document;\r\n      this.documentURI = null;\r\n      this.domConfig = new XMLDOMConfiguration();\r\n      options || (options = {});\r\n      if (!options.writer) {\r\n        options.writer = new XMLStringWriter();\r\n      }\r\n      this.options = options;\r\n      this.stringify = new XMLStringifier(options);\r\n    }\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\r\n      value: new XMLDOMImplementation()\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\r\n      get: function() {\r\n        var child, i, len, ref;\r\n        ref = this.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          if (child.type === NodeType.DocType) {\r\n            return child;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\r\n      get: function() {\r\n        return this.rootObject || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\r\n      get: function() {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\r\n      get: function() {\r\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\r\n          return this.children[0].encoding;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\r\n      get: function() {\r\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\r\n          return this.children[0].standalone === 'yes';\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\r\n      get: function() {\r\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\r\n          return this.children[0].version;\r\n        } else {\r\n          return \"1.0\";\r\n        }\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\r\n      get: function() {\r\n        return this.documentURI;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    XMLDocument.prototype.end = function(writer) {\r\n      var writerOptions;\r\n      writerOptions = {};\r\n      if (!writer) {\r\n        writer = this.options.writer;\r\n      } else if (isPlainObject(writer)) {\r\n        writerOptions = writer;\r\n        writer = this.options.writer;\r\n      }\r\n      return writer.document(this, writer.filterOptions(writerOptions));\r\n    };\r\n\r\n    XMLDocument.prototype.toString = function(options) {\r\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLDocument.prototype.createElement = function(tagName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createDocumentFragment = function() {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createTextNode = function(data) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createComment = function(data) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createCDATASection = function(data) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createProcessingInstruction = function(target, data) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createAttribute = function(name) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createEntityReference = function(name) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.getElementsByTagName = function(tagname) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.importNode = function(importedNode, deep) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.getElementById = function(elementId) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.adoptNode = function(source) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.normalizeDocument = function() {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.getElementsByClassName = function(classNames) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createEvent = function(eventInterface) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createRange = function() {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    return XMLDocument;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\r\n\r\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\r\n\r\n  XMLDOMStringList = require('./XMLDOMStringList');\r\n\r\n  module.exports = XMLDOMConfiguration = (function() {\r\n    function XMLDOMConfiguration() {\r\n      var clonedSelf;\r\n      this.defaultParams = {\r\n        \"canonical-form\": false,\r\n        \"cdata-sections\": false,\r\n        \"comments\": false,\r\n        \"datatype-normalization\": false,\r\n        \"element-content-whitespace\": true,\r\n        \"entities\": true,\r\n        \"error-handler\": new XMLDOMErrorHandler(),\r\n        \"infoset\": true,\r\n        \"validate-if-schema\": false,\r\n        \"namespaces\": true,\r\n        \"namespace-declarations\": true,\r\n        \"normalize-characters\": false,\r\n        \"schema-location\": '',\r\n        \"schema-type\": '',\r\n        \"split-cdata-sections\": true,\r\n        \"validate\": false,\r\n        \"well-formed\": true\r\n      };\r\n      this.params = clonedSelf = Object.create(this.defaultParams);\r\n    }\r\n\r\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\r\n      get: function() {\r\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\r\n      }\r\n    });\r\n\r\n    XMLDOMConfiguration.prototype.getParameter = function(name) {\r\n      if (this.params.hasOwnProperty(name)) {\r\n        return this.params[name];\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\r\n      return true;\r\n    };\r\n\r\n    XMLDOMConfiguration.prototype.setParameter = function(name, value) {\r\n      if (value != null) {\r\n        return this.params[name] = value;\r\n      } else {\r\n        return delete this.params[name];\r\n      }\r\n    };\r\n\r\n    return XMLDOMConfiguration;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLDOMErrorHandler;\r\n\r\n  module.exports = XMLDOMErrorHandler = (function() {\r\n    function XMLDOMErrorHandler() {}\r\n\r\n    XMLDOMErrorHandler.prototype.handleError = function(error) {\r\n      throw new Error(error);\r\n    };\r\n\r\n    return XMLDOMErrorHandler;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLDOMStringList;\r\n\r\n  module.exports = XMLDOMStringList = (function() {\r\n    function XMLDOMStringList(arr) {\r\n      this.arr = arr || [];\r\n    }\r\n\r\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\r\n      get: function() {\r\n        return this.arr.length;\r\n      }\r\n    });\r\n\r\n    XMLDOMStringList.prototype.item = function(index) {\r\n      return this.arr[index] || null;\r\n    };\r\n\r\n    XMLDOMStringList.prototype.contains = function(str) {\r\n      return this.arr.indexOf(str) !== -1;\r\n    };\r\n\r\n    return XMLDOMStringList;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  ref1 = require('./Utility'), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\r\n\r\n  XMLElement = null;\r\n\r\n  XMLCData = null;\r\n\r\n  XMLComment = null;\r\n\r\n  XMLDeclaration = null;\r\n\r\n  XMLDocType = null;\r\n\r\n  XMLRaw = null;\r\n\r\n  XMLText = null;\r\n\r\n  XMLProcessingInstruction = null;\r\n\r\n  XMLDummy = null;\r\n\r\n  NodeType = null;\r\n\r\n  XMLNodeList = null;\r\n\r\n  XMLNamedNodeMap = null;\r\n\r\n  DocumentPosition = null;\r\n\r\n  module.exports = XMLNode = (function() {\r\n    function XMLNode(parent1) {\r\n      this.parent = parent1;\r\n      if (this.parent) {\r\n        this.options = this.parent.options;\r\n        this.stringify = this.parent.stringify;\r\n      }\r\n      this.value = null;\r\n      this.children = [];\r\n      this.baseURI = null;\r\n      if (!XMLElement) {\r\n        XMLElement = require('./XMLElement');\r\n        XMLCData = require('./XMLCData');\r\n        XMLComment = require('./XMLComment');\r\n        XMLDeclaration = require('./XMLDeclaration');\r\n        XMLDocType = require('./XMLDocType');\r\n        XMLRaw = require('./XMLRaw');\r\n        XMLText = require('./XMLText');\r\n        XMLProcessingInstruction = require('./XMLProcessingInstruction');\r\n        XMLDummy = require('./XMLDummy');\r\n        NodeType = require('./NodeType');\r\n        XMLNodeList = require('./XMLNodeList');\r\n        XMLNamedNodeMap = require('./XMLNamedNodeMap');\r\n        DocumentPosition = require('./DocumentPosition');\r\n      }\r\n    }\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\r\n      get: function() {\r\n        return this.name;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\r\n      get: function() {\r\n        return this.type;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\r\n      get: function() {\r\n        return this.value;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\r\n      get: function() {\r\n        return this.parent;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\r\n      get: function() {\r\n        if (!this.childNodeList || !this.childNodeList.nodes) {\r\n          this.childNodeList = new XMLNodeList(this.children);\r\n        }\r\n        return this.childNodeList;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\r\n      get: function() {\r\n        return this.children[0] || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\r\n      get: function() {\r\n        return this.children[this.children.length - 1] || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\r\n      get: function() {\r\n        var i;\r\n        i = this.parent.children.indexOf(this);\r\n        return this.parent.children[i - 1] || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\r\n      get: function() {\r\n        var i;\r\n        i = this.parent.children.indexOf(this);\r\n        return this.parent.children[i + 1] || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\r\n      get: function() {\r\n        return this.document() || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\r\n      get: function() {\r\n        var child, j, len, ref2, str;\r\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\r\n          str = '';\r\n          ref2 = this.children;\r\n          for (j = 0, len = ref2.length; j < len; j++) {\r\n            child = ref2[j];\r\n            if (child.textContent) {\r\n              str += child.textContent;\r\n            }\r\n          }\r\n          return str;\r\n        } else {\r\n          return null;\r\n        }\r\n      },\r\n      set: function(value) {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    XMLNode.prototype.setParent = function(parent) {\r\n      var child, j, len, ref2, results;\r\n      this.parent = parent;\r\n      if (parent) {\r\n        this.options = parent.options;\r\n        this.stringify = parent.stringify;\r\n      }\r\n      ref2 = this.children;\r\n      results = [];\r\n      for (j = 0, len = ref2.length; j < len; j++) {\r\n        child = ref2[j];\r\n        results.push(child.setParent(this));\r\n      }\r\n      return results;\r\n    };\r\n\r\n    XMLNode.prototype.element = function(name, attributes, text) {\r\n      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\r\n      lastChild = null;\r\n      if (attributes === null && (text == null)) {\r\n        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];\r\n      }\r\n      if (attributes == null) {\r\n        attributes = {};\r\n      }\r\n      attributes = getValue(attributes);\r\n      if (!isObject(attributes)) {\r\n        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];\r\n      }\r\n      if (name != null) {\r\n        name = getValue(name);\r\n      }\r\n      if (Array.isArray(name)) {\r\n        for (j = 0, len = name.length; j < len; j++) {\r\n          item = name[j];\r\n          lastChild = this.element(item);\r\n        }\r\n      } else if (isFunction(name)) {\r\n        lastChild = this.element(name.apply());\r\n      } else if (isObject(name)) {\r\n        for (key in name) {\r\n          if (!hasProp.call(name, key)) continue;\r\n          val = name[key];\r\n          if (isFunction(val)) {\r\n            val = val.apply();\r\n          }\r\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\r\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\r\n          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\r\n            lastChild = this.dummy();\r\n          } else if (isObject(val) && isEmpty(val)) {\r\n            lastChild = this.element(key);\r\n          } else if (!this.options.keepNullNodes && (val == null)) {\r\n            lastChild = this.dummy();\r\n          } else if (!this.options.separateArrayItems && Array.isArray(val)) {\r\n            for (k = 0, len1 = val.length; k < len1; k++) {\r\n              item = val[k];\r\n              childNode = {};\r\n              childNode[key] = item;\r\n              lastChild = this.element(childNode);\r\n            }\r\n          } else if (isObject(val)) {\r\n            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\r\n              lastChild = this.element(val);\r\n            } else {\r\n              lastChild = this.element(key);\r\n              lastChild.element(val);\r\n            }\r\n          } else {\r\n            lastChild = this.element(key, val);\r\n          }\r\n        }\r\n      } else if (!this.options.keepNullNodes && text === null) {\r\n        lastChild = this.dummy();\r\n      } else {\r\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\r\n          lastChild = this.text(text);\r\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\r\n          lastChild = this.cdata(text);\r\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\r\n          lastChild = this.comment(text);\r\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\r\n          lastChild = this.raw(text);\r\n        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\r\n          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\r\n        } else {\r\n          lastChild = this.node(name, attributes, text);\r\n        }\r\n      }\r\n      if (lastChild == null) {\r\n        throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\r\n      }\r\n      return lastChild;\r\n    };\r\n\r\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {\r\n      var child, i, newChild, refChild, removed;\r\n      if (name != null ? name.type : void 0) {\r\n        newChild = name;\r\n        refChild = attributes;\r\n        newChild.setParent(this);\r\n        if (refChild) {\r\n          i = children.indexOf(refChild);\r\n          removed = children.splice(i);\r\n          children.push(newChild);\r\n          Array.prototype.push.apply(children, removed);\r\n        } else {\r\n          children.push(newChild);\r\n        }\r\n        return newChild;\r\n      } else {\r\n        if (this.isRoot) {\r\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\r\n        }\r\n        i = this.parent.children.indexOf(this);\r\n        removed = this.parent.children.splice(i);\r\n        child = this.parent.element(name, attributes, text);\r\n        Array.prototype.push.apply(this.parent.children, removed);\r\n        return child;\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {\r\n      var child, i, removed;\r\n      if (this.isRoot) {\r\n        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\r\n      }\r\n      i = this.parent.children.indexOf(this);\r\n      removed = this.parent.children.splice(i + 1);\r\n      child = this.parent.element(name, attributes, text);\r\n      Array.prototype.push.apply(this.parent.children, removed);\r\n      return child;\r\n    };\r\n\r\n    XMLNode.prototype.remove = function() {\r\n      var i, ref2;\r\n      if (this.isRoot) {\r\n        throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\r\n      }\r\n      i = this.parent.children.indexOf(this);\r\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;\r\n      return this.parent;\r\n    };\r\n\r\n    XMLNode.prototype.node = function(name, attributes, text) {\r\n      var child, ref2;\r\n      if (name != null) {\r\n        name = getValue(name);\r\n      }\r\n      attributes || (attributes = {});\r\n      attributes = getValue(attributes);\r\n      if (!isObject(attributes)) {\r\n        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];\r\n      }\r\n      child = new XMLElement(this, name, attributes);\r\n      if (text != null) {\r\n        child.text(text);\r\n      }\r\n      this.children.push(child);\r\n      return child;\r\n    };\r\n\r\n    XMLNode.prototype.text = function(value) {\r\n      var child;\r\n      if (isObject(value)) {\r\n        this.element(value);\r\n      }\r\n      child = new XMLText(this, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.cdata = function(value) {\r\n      var child;\r\n      child = new XMLCData(this, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.comment = function(value) {\r\n      var child;\r\n      child = new XMLComment(this, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.commentBefore = function(value) {\r\n      var child, i, removed;\r\n      i = this.parent.children.indexOf(this);\r\n      removed = this.parent.children.splice(i);\r\n      child = this.parent.comment(value);\r\n      Array.prototype.push.apply(this.parent.children, removed);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.commentAfter = function(value) {\r\n      var child, i, removed;\r\n      i = this.parent.children.indexOf(this);\r\n      removed = this.parent.children.splice(i + 1);\r\n      child = this.parent.comment(value);\r\n      Array.prototype.push.apply(this.parent.children, removed);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.raw = function(value) {\r\n      var child;\r\n      child = new XMLRaw(this, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.dummy = function() {\r\n      var child;\r\n      child = new XMLDummy(this);\r\n      return child;\r\n    };\r\n\r\n    XMLNode.prototype.instruction = function(target, value) {\r\n      var insTarget, insValue, instruction, j, len;\r\n      if (target != null) {\r\n        target = getValue(target);\r\n      }\r\n      if (value != null) {\r\n        value = getValue(value);\r\n      }\r\n      if (Array.isArray(target)) {\r\n        for (j = 0, len = target.length; j < len; j++) {\r\n          insTarget = target[j];\r\n          this.instruction(insTarget);\r\n        }\r\n      } else if (isObject(target)) {\r\n        for (insTarget in target) {\r\n          if (!hasProp.call(target, insTarget)) continue;\r\n          insValue = target[insTarget];\r\n          this.instruction(insTarget, insValue);\r\n        }\r\n      } else {\r\n        if (isFunction(value)) {\r\n          value = value.apply();\r\n        }\r\n        instruction = new XMLProcessingInstruction(this, target, value);\r\n        this.children.push(instruction);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.instructionBefore = function(target, value) {\r\n      var child, i, removed;\r\n      i = this.parent.children.indexOf(this);\r\n      removed = this.parent.children.splice(i);\r\n      child = this.parent.instruction(target, value);\r\n      Array.prototype.push.apply(this.parent.children, removed);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.instructionAfter = function(target, value) {\r\n      var child, i, removed;\r\n      i = this.parent.children.indexOf(this);\r\n      removed = this.parent.children.splice(i + 1);\r\n      child = this.parent.instruction(target, value);\r\n      Array.prototype.push.apply(this.parent.children, removed);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {\r\n      var doc, xmldec;\r\n      doc = this.document();\r\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);\r\n      if (doc.children.length === 0) {\r\n        doc.children.unshift(xmldec);\r\n      } else if (doc.children[0].type === NodeType.Declaration) {\r\n        doc.children[0] = xmldec;\r\n      } else {\r\n        doc.children.unshift(xmldec);\r\n      }\r\n      return doc.root() || doc;\r\n    };\r\n\r\n    XMLNode.prototype.dtd = function(pubID, sysID) {\r\n      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\r\n      doc = this.document();\r\n      doctype = new XMLDocType(doc, pubID, sysID);\r\n      ref2 = doc.children;\r\n      for (i = j = 0, len = ref2.length; j < len; i = ++j) {\r\n        child = ref2[i];\r\n        if (child.type === NodeType.DocType) {\r\n          doc.children[i] = doctype;\r\n          return doctype;\r\n        }\r\n      }\r\n      ref3 = doc.children;\r\n      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {\r\n        child = ref3[i];\r\n        if (child.isRoot) {\r\n          doc.children.splice(i, 0, doctype);\r\n          return doctype;\r\n        }\r\n      }\r\n      doc.children.push(doctype);\r\n      return doctype;\r\n    };\r\n\r\n    XMLNode.prototype.up = function() {\r\n      if (this.isRoot) {\r\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\r\n      }\r\n      return this.parent;\r\n    };\r\n\r\n    XMLNode.prototype.root = function() {\r\n      var node;\r\n      node = this;\r\n      while (node) {\r\n        if (node.type === NodeType.Document) {\r\n          return node.rootObject;\r\n        } else if (node.isRoot) {\r\n          return node;\r\n        } else {\r\n          node = node.parent;\r\n        }\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.document = function() {\r\n      var node;\r\n      node = this;\r\n      while (node) {\r\n        if (node.type === NodeType.Document) {\r\n          return node;\r\n        } else {\r\n          node = node.parent;\r\n        }\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.end = function(options) {\r\n      return this.document().end(options);\r\n    };\r\n\r\n    XMLNode.prototype.prev = function() {\r\n      var i;\r\n      i = this.parent.children.indexOf(this);\r\n      if (i < 1) {\r\n        throw new Error(\"Already at the first node. \" + this.debugInfo());\r\n      }\r\n      return this.parent.children[i - 1];\r\n    };\r\n\r\n    XMLNode.prototype.next = function() {\r\n      var i;\r\n      i = this.parent.children.indexOf(this);\r\n      if (i === -1 || i === this.parent.children.length - 1) {\r\n        throw new Error(\"Already at the last node. \" + this.debugInfo());\r\n      }\r\n      return this.parent.children[i + 1];\r\n    };\r\n\r\n    XMLNode.prototype.importDocument = function(doc) {\r\n      var clonedRoot;\r\n      clonedRoot = doc.root().clone();\r\n      clonedRoot.parent = this;\r\n      clonedRoot.isRoot = false;\r\n      this.children.push(clonedRoot);\r\n      return this;\r\n    };\r\n\r\n    XMLNode.prototype.debugInfo = function(name) {\r\n      var ref2, ref3;\r\n      name = name || this.name;\r\n      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\r\n        return \"\";\r\n      } else if (name == null) {\r\n        return \"parent: <\" + this.parent.name + \">\";\r\n      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\r\n        return \"node: <\" + name + \">\";\r\n      } else {\r\n        return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.ele = function(name, attributes, text) {\r\n      return this.element(name, attributes, text);\r\n    };\r\n\r\n    XMLNode.prototype.nod = function(name, attributes, text) {\r\n      return this.node(name, attributes, text);\r\n    };\r\n\r\n    XMLNode.prototype.txt = function(value) {\r\n      return this.text(value);\r\n    };\r\n\r\n    XMLNode.prototype.dat = function(value) {\r\n      return this.cdata(value);\r\n    };\r\n\r\n    XMLNode.prototype.com = function(value) {\r\n      return this.comment(value);\r\n    };\r\n\r\n    XMLNode.prototype.ins = function(target, value) {\r\n      return this.instruction(target, value);\r\n    };\r\n\r\n    XMLNode.prototype.doc = function() {\r\n      return this.document();\r\n    };\r\n\r\n    XMLNode.prototype.dec = function(version, encoding, standalone) {\r\n      return this.declaration(version, encoding, standalone);\r\n    };\r\n\r\n    XMLNode.prototype.e = function(name, attributes, text) {\r\n      return this.element(name, attributes, text);\r\n    };\r\n\r\n    XMLNode.prototype.n = function(name, attributes, text) {\r\n      return this.node(name, attributes, text);\r\n    };\r\n\r\n    XMLNode.prototype.t = function(value) {\r\n      return this.text(value);\r\n    };\r\n\r\n    XMLNode.prototype.d = function(value) {\r\n      return this.cdata(value);\r\n    };\r\n\r\n    XMLNode.prototype.c = function(value) {\r\n      return this.comment(value);\r\n    };\r\n\r\n    XMLNode.prototype.r = function(value) {\r\n      return this.raw(value);\r\n    };\r\n\r\n    XMLNode.prototype.i = function(target, value) {\r\n      return this.instruction(target, value);\r\n    };\r\n\r\n    XMLNode.prototype.u = function() {\r\n      return this.up();\r\n    };\r\n\r\n    XMLNode.prototype.importXMLBuilder = function(doc) {\r\n      return this.importDocument(doc);\r\n    };\r\n\r\n    XMLNode.prototype.replaceChild = function(newChild, oldChild) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.removeChild = function(oldChild) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.appendChild = function(newChild) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.hasChildNodes = function() {\r\n      return this.children.length !== 0;\r\n    };\r\n\r\n    XMLNode.prototype.cloneNode = function(deep) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.normalize = function() {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.isSupported = function(feature, version) {\r\n      return true;\r\n    };\r\n\r\n    XMLNode.prototype.hasAttributes = function() {\r\n      return this.attribs.length !== 0;\r\n    };\r\n\r\n    XMLNode.prototype.compareDocumentPosition = function(other) {\r\n      var ref, res;\r\n      ref = this;\r\n      if (ref === other) {\r\n        return 0;\r\n      } else if (this.document() !== other.document()) {\r\n        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\r\n        if (Math.random() < 0.5) {\r\n          res |= DocumentPosition.Preceding;\r\n        } else {\r\n          res |= DocumentPosition.Following;\r\n        }\r\n        return res;\r\n      } else if (ref.isAncestor(other)) {\r\n        return DocumentPosition.Contains | DocumentPosition.Preceding;\r\n      } else if (ref.isDescendant(other)) {\r\n        return DocumentPosition.Contains | DocumentPosition.Following;\r\n      } else if (ref.isPreceding(other)) {\r\n        return DocumentPosition.Preceding;\r\n      } else {\r\n        return DocumentPosition.Following;\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.isSameNode = function(other) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.lookupPrefix = function(namespaceURI) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.lookupNamespaceURI = function(prefix) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.isEqualNode = function(node) {\r\n      var i, j, ref2;\r\n      if (node.nodeType !== this.nodeType) {\r\n        return false;\r\n      }\r\n      if (node.children.length !== this.children.length) {\r\n        return false;\r\n      }\r\n      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {\r\n        if (!this.children[i].isEqualNode(node.children[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    XMLNode.prototype.getFeature = function(feature, version) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.setUserData = function(key, data, handler) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.getUserData = function(key) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLNode.prototype.contains = function(other) {\r\n      if (!other) {\r\n        return false;\r\n      }\r\n      return other === this || this.isDescendant(other);\r\n    };\r\n\r\n    XMLNode.prototype.isDescendant = function(node) {\r\n      var child, isDescendantChild, j, len, ref2;\r\n      ref2 = this.children;\r\n      for (j = 0, len = ref2.length; j < len; j++) {\r\n        child = ref2[j];\r\n        if (node === child) {\r\n          return true;\r\n        }\r\n        isDescendantChild = child.isDescendant(node);\r\n        if (isDescendantChild) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    XMLNode.prototype.isAncestor = function(node) {\r\n      return node.isDescendant(this);\r\n    };\r\n\r\n    XMLNode.prototype.isPreceding = function(node) {\r\n      var nodePos, thisPos;\r\n      nodePos = this.treePosition(node);\r\n      thisPos = this.treePosition(this);\r\n      if (nodePos === -1 || thisPos === -1) {\r\n        return false;\r\n      } else {\r\n        return nodePos < thisPos;\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.isFollowing = function(node) {\r\n      var nodePos, thisPos;\r\n      nodePos = this.treePosition(node);\r\n      thisPos = this.treePosition(this);\r\n      if (nodePos === -1 || thisPos === -1) {\r\n        return false;\r\n      } else {\r\n        return nodePos > thisPos;\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.treePosition = function(node) {\r\n      var found, pos;\r\n      pos = 0;\r\n      found = false;\r\n      this.foreachTreeNode(this.document(), function(childNode) {\r\n        pos++;\r\n        if (!found && childNode === node) {\r\n          return found = true;\r\n        }\r\n      });\r\n      if (found) {\r\n        return pos;\r\n      } else {\r\n        return -1;\r\n      }\r\n    };\r\n\r\n    XMLNode.prototype.foreachTreeNode = function(node, func) {\r\n      var child, j, len, ref2, res;\r\n      node || (node = this.document());\r\n      ref2 = node.children;\r\n      for (j = 0, len = ref2.length; j < len; j++) {\r\n        child = ref2[j];\r\n        if (res = func(child)) {\r\n          return res;\r\n        } else {\r\n          res = this.foreachTreeNode(child, func);\r\n          if (res) {\r\n            return res;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    return XMLNode;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLAttribute = require('./XMLAttribute');\r\n\r\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\r\n\r\n  module.exports = XMLElement = (function(superClass) {\r\n    extend(XMLElement, superClass);\r\n\r\n    function XMLElement(parent, name, attributes) {\r\n      var child, j, len, ref1;\r\n      XMLElement.__super__.constructor.call(this, parent);\r\n      if (name == null) {\r\n        throw new Error(\"Missing element name. \" + this.debugInfo());\r\n      }\r\n      this.name = this.stringify.name(name);\r\n      this.type = NodeType.Element;\r\n      this.attribs = {};\r\n      this.schemaTypeInfo = null;\r\n      if (attributes != null) {\r\n        this.attribute(attributes);\r\n      }\r\n      if (parent.type === NodeType.Document) {\r\n        this.isRoot = true;\r\n        this.documentObject = parent;\r\n        parent.rootObject = this;\r\n        if (parent.children) {\r\n          ref1 = parent.children;\r\n          for (j = 0, len = ref1.length; j < len; j++) {\r\n            child = ref1[j];\r\n            if (child.type === NodeType.DocType) {\r\n              child.name = this.name;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\r\n      get: function() {\r\n        return this.name;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\r\n      get: function() {\r\n        return '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\r\n      get: function() {\r\n        return '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'localName', {\r\n      get: function() {\r\n        return this.name;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'id', {\r\n      get: function() {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'className', {\r\n      get: function() {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'classList', {\r\n      get: function() {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\r\n      get: function() {\r\n        if (!this.attributeMap || !this.attributeMap.nodes) {\r\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\r\n        }\r\n        return this.attributeMap;\r\n      }\r\n    });\r\n\r\n    XMLElement.prototype.clone = function() {\r\n      var att, attName, clonedSelf, ref1;\r\n      clonedSelf = Object.create(this);\r\n      if (clonedSelf.isRoot) {\r\n        clonedSelf.documentObject = null;\r\n      }\r\n      clonedSelf.attribs = {};\r\n      ref1 = this.attribs;\r\n      for (attName in ref1) {\r\n        if (!hasProp.call(ref1, attName)) continue;\r\n        att = ref1[attName];\r\n        clonedSelf.attribs[attName] = att.clone();\r\n      }\r\n      clonedSelf.children = [];\r\n      this.children.forEach(function(child) {\r\n        var clonedChild;\r\n        clonedChild = child.clone();\r\n        clonedChild.parent = clonedSelf;\r\n        return clonedSelf.children.push(clonedChild);\r\n      });\r\n      return clonedSelf;\r\n    };\r\n\r\n    XMLElement.prototype.attribute = function(name, value) {\r\n      var attName, attValue;\r\n      if (name != null) {\r\n        name = getValue(name);\r\n      }\r\n      if (isObject(name)) {\r\n        for (attName in name) {\r\n          if (!hasProp.call(name, attName)) continue;\r\n          attValue = name[attName];\r\n          this.attribute(attName, attValue);\r\n        }\r\n      } else {\r\n        if (isFunction(value)) {\r\n          value = value.apply();\r\n        }\r\n        if (this.options.keepNullAttributes && (value == null)) {\r\n          this.attribs[name] = new XMLAttribute(this, name, \"\");\r\n        } else if (value != null) {\r\n          this.attribs[name] = new XMLAttribute(this, name, value);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLElement.prototype.removeAttribute = function(name) {\r\n      var attName, j, len;\r\n      if (name == null) {\r\n        throw new Error(\"Missing attribute name. \" + this.debugInfo());\r\n      }\r\n      name = getValue(name);\r\n      if (Array.isArray(name)) {\r\n        for (j = 0, len = name.length; j < len; j++) {\r\n          attName = name[j];\r\n          delete this.attribs[attName];\r\n        }\r\n      } else {\r\n        delete this.attribs[name];\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLElement.prototype.toString = function(options) {\r\n      return this.options.writer.element(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLElement.prototype.att = function(name, value) {\r\n      return this.attribute(name, value);\r\n    };\r\n\r\n    XMLElement.prototype.a = function(name, value) {\r\n      return this.attribute(name, value);\r\n    };\r\n\r\n    XMLElement.prototype.getAttribute = function(name) {\r\n      if (this.attribs.hasOwnProperty(name)) {\r\n        return this.attribs[name].value;\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    XMLElement.prototype.setAttribute = function(name, value) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getAttributeNode = function(name) {\r\n      if (this.attribs.hasOwnProperty(name)) {\r\n        return this.attribs[name];\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    XMLElement.prototype.setAttributeNode = function(newAttr) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.removeAttributeNode = function(oldAttr) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getElementsByTagName = function(name) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.hasAttribute = function(name) {\r\n      return this.attribs.hasOwnProperty(name);\r\n    };\r\n\r\n    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.setIdAttribute = function(name, isId) {\r\n      if (this.attribs.hasOwnProperty(name)) {\r\n        return this.attribs[name].isId;\r\n      } else {\r\n        return isId;\r\n      }\r\n    };\r\n\r\n    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getElementsByTagName = function(tagname) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.getElementsByClassName = function(classNames) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLElement.prototype.isEqualNode = function(node) {\r\n      var i, j, ref1;\r\n      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\r\n        return false;\r\n      }\r\n      if (node.namespaceURI !== this.namespaceURI) {\r\n        return false;\r\n      }\r\n      if (node.prefix !== this.prefix) {\r\n        return false;\r\n      }\r\n      if (node.localName !== this.localName) {\r\n        return false;\r\n      }\r\n      if (node.attribs.length !== this.attribs.length) {\r\n        return false;\r\n      }\r\n      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {\r\n        if (!this.attribs[i].isEqualNode(node.attribs[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return XMLElement;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  module.exports = {\r\n    Element: 1,\r\n    Attribute: 2,\r\n    Text: 3,\r\n    CData: 4,\r\n    EntityReference: 5,\r\n    EntityDeclaration: 6,\r\n    ProcessingInstruction: 7,\r\n    Comment: 8,\r\n    Document: 9,\r\n    DocType: 10,\r\n    DocumentFragment: 11,\r\n    NotationDeclaration: 12,\r\n    Declaration: 201,\r\n    Raw: 202,\r\n    AttributeDeclaration: 203,\r\n    ElementDeclaration: 204,\r\n    Dummy: 205\r\n  };\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLAttribute, XMLNode;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  module.exports = XMLAttribute = (function() {\r\n    function XMLAttribute(parent, name, value) {\r\n      this.parent = parent;\r\n      if (this.parent) {\r\n        this.options = this.parent.options;\r\n        this.stringify = this.parent.stringify;\r\n      }\r\n      if (name == null) {\r\n        throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\r\n      }\r\n      this.name = this.stringify.name(name);\r\n      this.value = this.stringify.attValue(value);\r\n      this.type = NodeType.Attribute;\r\n      this.isId = false;\r\n      this.schemaTypeInfo = null;\r\n    }\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\r\n      get: function() {\r\n        return this.type;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\r\n      get: function() {\r\n        return this.parent;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\r\n      get: function() {\r\n        return this.value;\r\n      },\r\n      set: function(value) {\r\n        return this.value = value || '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\r\n      get: function() {\r\n        return '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\r\n      get: function() {\r\n        return '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\r\n      get: function() {\r\n        return this.name;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\r\n      get: function() {\r\n        return true;\r\n      }\r\n    });\r\n\r\n    XMLAttribute.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLAttribute.prototype.toString = function(options) {\r\n      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLAttribute.prototype.debugInfo = function(name) {\r\n      name = name || this.name;\r\n      if (name == null) {\r\n        return \"parent: <\" + this.parent.name + \">\";\r\n      } else {\r\n        return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\r\n      }\r\n    };\r\n\r\n    XMLAttribute.prototype.isEqualNode = function(node) {\r\n      if (node.namespaceURI !== this.namespaceURI) {\r\n        return false;\r\n      }\r\n      if (node.prefix !== this.prefix) {\r\n        return false;\r\n      }\r\n      if (node.localName !== this.localName) {\r\n        return false;\r\n      }\r\n      if (node.value !== this.value) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return XMLAttribute;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLNamedNodeMap;\r\n\r\n  module.exports = XMLNamedNodeMap = (function() {\r\n    function XMLNamedNodeMap(nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\r\n      get: function() {\r\n        return Object.keys(this.nodes).length || 0;\r\n      }\r\n    });\r\n\r\n    XMLNamedNodeMap.prototype.clone = function() {\r\n      return this.nodes = null;\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.getNamedItem = function(name) {\r\n      return this.nodes[name];\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.setNamedItem = function(node) {\r\n      var oldNode;\r\n      oldNode = this.nodes[node.nodeName];\r\n      this.nodes[node.nodeName] = node;\r\n      return oldNode || null;\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\r\n      var oldNode;\r\n      oldNode = this.nodes[name];\r\n      delete this.nodes[name];\r\n      return oldNode || null;\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.item = function(index) {\r\n      return this.nodes[Object.keys(this.nodes)[index]] || null;\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\r\n      throw new Error(\"This DOM method is not implemented.\");\r\n    };\r\n\r\n    return XMLNamedNodeMap;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLCData, XMLCharacterData,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLCharacterData = require('./XMLCharacterData');\r\n\r\n  module.exports = XMLCData = (function(superClass) {\r\n    extend(XMLCData, superClass);\r\n\r\n    function XMLCData(parent, text) {\r\n      XMLCData.__super__.constructor.call(this, parent);\r\n      if (text == null) {\r\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\r\n      }\r\n      this.name = \"#cdata-section\";\r\n      this.type = NodeType.CData;\r\n      this.value = this.stringify.cdata(text);\r\n    }\r\n\r\n    XMLCData.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLCData.prototype.toString = function(options) {\r\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLCData;\r\n\r\n  })(XMLCharacterData);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLCharacterData, XMLNode,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  module.exports = XMLCharacterData = (function(superClass) {\r\n    extend(XMLCharacterData, superClass);\r\n\r\n    function XMLCharacterData(parent) {\r\n      XMLCharacterData.__super__.constructor.call(this, parent);\r\n      this.value = '';\r\n    }\r\n\r\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\r\n      get: function() {\r\n        return this.value;\r\n      },\r\n      set: function(value) {\r\n        return this.value = value || '';\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\r\n      get: function() {\r\n        return this.value.length;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\r\n      get: function() {\r\n        return this.value;\r\n      },\r\n      set: function(value) {\r\n        return this.value = value || '';\r\n      }\r\n    });\r\n\r\n    XMLCharacterData.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLCharacterData.prototype.substringData = function(offset, count) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLCharacterData.prototype.appendData = function(arg) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLCharacterData.prototype.insertData = function(offset, arg) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLCharacterData.prototype.deleteData = function(offset, count) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLCharacterData.prototype.isEqualNode = function(node) {\r\n      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\r\n        return false;\r\n      }\r\n      if (node.data !== this.data) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return XMLCharacterData;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLCharacterData, XMLComment,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLCharacterData = require('./XMLCharacterData');\r\n\r\n  module.exports = XMLComment = (function(superClass) {\r\n    extend(XMLComment, superClass);\r\n\r\n    function XMLComment(parent, text) {\r\n      XMLComment.__super__.constructor.call(this, parent);\r\n      if (text == null) {\r\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\r\n      }\r\n      this.name = \"#comment\";\r\n      this.type = NodeType.Comment;\r\n      this.value = this.stringify.comment(text);\r\n    }\r\n\r\n    XMLComment.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLComment.prototype.toString = function(options) {\r\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLComment;\r\n\r\n  })(XMLCharacterData);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDeclaration, XMLNode, isObject,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  isObject = require('./Utility').isObject;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDeclaration = (function(superClass) {\r\n    extend(XMLDeclaration, superClass);\r\n\r\n    function XMLDeclaration(parent, version, encoding, standalone) {\r\n      var ref;\r\n      XMLDeclaration.__super__.constructor.call(this, parent);\r\n      if (isObject(version)) {\r\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\r\n      }\r\n      if (!version) {\r\n        version = '1.0';\r\n      }\r\n      this.type = NodeType.Declaration;\r\n      this.version = this.stringify.xmlVersion(version);\r\n      if (encoding != null) {\r\n        this.encoding = this.stringify.xmlEncoding(encoding);\r\n      }\r\n      if (standalone != null) {\r\n        this.standalone = this.stringify.xmlStandalone(standalone);\r\n      }\r\n    }\r\n\r\n    XMLDeclaration.prototype.toString = function(options) {\r\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLDeclaration;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  isObject = require('./Utility').isObject;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLDTDAttList = require('./XMLDTDAttList');\r\n\r\n  XMLDTDEntity = require('./XMLDTDEntity');\r\n\r\n  XMLDTDElement = require('./XMLDTDElement');\r\n\r\n  XMLDTDNotation = require('./XMLDTDNotation');\r\n\r\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\r\n\r\n  module.exports = XMLDocType = (function(superClass) {\r\n    extend(XMLDocType, superClass);\r\n\r\n    function XMLDocType(parent, pubID, sysID) {\r\n      var child, i, len, ref, ref1, ref2;\r\n      XMLDocType.__super__.constructor.call(this, parent);\r\n      this.type = NodeType.DocType;\r\n      if (parent.children) {\r\n        ref = parent.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          if (child.type === NodeType.Element) {\r\n            this.name = child.name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.documentObject = parent;\r\n      if (isObject(pubID)) {\r\n        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\r\n      }\r\n      if (sysID == null) {\r\n        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];\r\n      }\r\n      if (pubID != null) {\r\n        this.pubID = this.stringify.dtdPubID(pubID);\r\n      }\r\n      if (sysID != null) {\r\n        this.sysID = this.stringify.dtdSysID(sysID);\r\n      }\r\n    }\r\n\r\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\r\n      get: function() {\r\n        var child, i, len, nodes, ref;\r\n        nodes = {};\r\n        ref = this.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\r\n            nodes[child.name] = child;\r\n          }\r\n        }\r\n        return new XMLNamedNodeMap(nodes);\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\r\n      get: function() {\r\n        var child, i, len, nodes, ref;\r\n        nodes = {};\r\n        ref = this.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          if (child.type === NodeType.NotationDeclaration) {\r\n            nodes[child.name] = child;\r\n          }\r\n        }\r\n        return new XMLNamedNodeMap(nodes);\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\r\n      get: function() {\r\n        return this.pubID;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\r\n      get: function() {\r\n        return this.sysID;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\r\n      get: function() {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    XMLDocType.prototype.element = function(name, value) {\r\n      var child;\r\n      child = new XMLDTDElement(this, name, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\r\n      var child;\r\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLDocType.prototype.entity = function(name, value) {\r\n      var child;\r\n      child = new XMLDTDEntity(this, false, name, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLDocType.prototype.pEntity = function(name, value) {\r\n      var child;\r\n      child = new XMLDTDEntity(this, true, name, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLDocType.prototype.notation = function(name, value) {\r\n      var child;\r\n      child = new XMLDTDNotation(this, name, value);\r\n      this.children.push(child);\r\n      return this;\r\n    };\r\n\r\n    XMLDocType.prototype.toString = function(options) {\r\n      return this.options.writer.docType(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLDocType.prototype.ele = function(name, value) {\r\n      return this.element(name, value);\r\n    };\r\n\r\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\r\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\r\n    };\r\n\r\n    XMLDocType.prototype.ent = function(name, value) {\r\n      return this.entity(name, value);\r\n    };\r\n\r\n    XMLDocType.prototype.pent = function(name, value) {\r\n      return this.pEntity(name, value);\r\n    };\r\n\r\n    XMLDocType.prototype.not = function(name, value) {\r\n      return this.notation(name, value);\r\n    };\r\n\r\n    XMLDocType.prototype.up = function() {\r\n      return this.root() || this.documentObject;\r\n    };\r\n\r\n    XMLDocType.prototype.isEqualNode = function(node) {\r\n      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\r\n        return false;\r\n      }\r\n      if (node.name !== this.name) {\r\n        return false;\r\n      }\r\n      if (node.publicId !== this.publicId) {\r\n        return false;\r\n      }\r\n      if (node.systemId !== this.systemId) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return XMLDocType;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDTDAttList, XMLNode,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDTDAttList = (function(superClass) {\r\n    extend(XMLDTDAttList, superClass);\r\n\r\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\r\n      XMLDTDAttList.__super__.constructor.call(this, parent);\r\n      if (elementName == null) {\r\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\r\n      }\r\n      if (attributeName == null) {\r\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\r\n      }\r\n      if (!attributeType) {\r\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\r\n      }\r\n      if (!defaultValueType) {\r\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\r\n      }\r\n      if (defaultValueType.indexOf('#') !== 0) {\r\n        defaultValueType = '#' + defaultValueType;\r\n      }\r\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\r\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\r\n      }\r\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\r\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\r\n      }\r\n      this.elementName = this.stringify.name(elementName);\r\n      this.type = NodeType.AttributeDeclaration;\r\n      this.attributeName = this.stringify.name(attributeName);\r\n      this.attributeType = this.stringify.dtdAttType(attributeType);\r\n      if (defaultValue) {\r\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\r\n      }\r\n      this.defaultValueType = defaultValueType;\r\n    }\r\n\r\n    XMLDTDAttList.prototype.toString = function(options) {\r\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLDTDAttList;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDTDEntity, XMLNode, isObject,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  isObject = require('./Utility').isObject;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDTDEntity = (function(superClass) {\r\n    extend(XMLDTDEntity, superClass);\r\n\r\n    function XMLDTDEntity(parent, pe, name, value) {\r\n      XMLDTDEntity.__super__.constructor.call(this, parent);\r\n      if (name == null) {\r\n        throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\r\n      }\r\n      if (value == null) {\r\n        throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\r\n      }\r\n      this.pe = !!pe;\r\n      this.name = this.stringify.name(name);\r\n      this.type = NodeType.EntityDeclaration;\r\n      if (!isObject(value)) {\r\n        this.value = this.stringify.dtdEntityValue(value);\r\n        this.internal = true;\r\n      } else {\r\n        if (!value.pubID && !value.sysID) {\r\n          throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\r\n        }\r\n        if (value.pubID && !value.sysID) {\r\n          throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\r\n        }\r\n        this.internal = false;\r\n        if (value.pubID != null) {\r\n          this.pubID = this.stringify.dtdPubID(value.pubID);\r\n        }\r\n        if (value.sysID != null) {\r\n          this.sysID = this.stringify.dtdSysID(value.sysID);\r\n        }\r\n        if (value.nData != null) {\r\n          this.nData = this.stringify.dtdNData(value.nData);\r\n        }\r\n        if (this.pe && this.nData) {\r\n          throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\r\n        }\r\n      }\r\n    }\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\r\n      get: function() {\r\n        return this.pubID;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\r\n      get: function() {\r\n        return this.sysID;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\r\n      get: function() {\r\n        return this.nData || null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\r\n      get: function() {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    XMLDTDEntity.prototype.toString = function(options) {\r\n      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLDTDEntity;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDTDElement, XMLNode,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDTDElement = (function(superClass) {\r\n    extend(XMLDTDElement, superClass);\r\n\r\n    function XMLDTDElement(parent, name, value) {\r\n      XMLDTDElement.__super__.constructor.call(this, parent);\r\n      if (name == null) {\r\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\r\n      }\r\n      if (!value) {\r\n        value = '(#PCDATA)';\r\n      }\r\n      if (Array.isArray(value)) {\r\n        value = '(' + value.join(',') + ')';\r\n      }\r\n      this.name = this.stringify.name(name);\r\n      this.type = NodeType.ElementDeclaration;\r\n      this.value = this.stringify.dtdElementValue(value);\r\n    }\r\n\r\n    XMLDTDElement.prototype.toString = function(options) {\r\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLDTDElement;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDTDNotation, XMLNode,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDTDNotation = (function(superClass) {\r\n    extend(XMLDTDNotation, superClass);\r\n\r\n    function XMLDTDNotation(parent, name, value) {\r\n      XMLDTDNotation.__super__.constructor.call(this, parent);\r\n      if (name == null) {\r\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\r\n      }\r\n      if (!value.pubID && !value.sysID) {\r\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\r\n      }\r\n      this.name = this.stringify.name(name);\r\n      this.type = NodeType.NotationDeclaration;\r\n      if (value.pubID != null) {\r\n        this.pubID = this.stringify.dtdPubID(value.pubID);\r\n      }\r\n      if (value.sysID != null) {\r\n        this.sysID = this.stringify.dtdSysID(value.sysID);\r\n      }\r\n    }\r\n\r\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\r\n      get: function() {\r\n        return this.pubID;\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\r\n      get: function() {\r\n        return this.sysID;\r\n      }\r\n    });\r\n\r\n    XMLDTDNotation.prototype.toString = function(options) {\r\n      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLDTDNotation;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLNode, XMLRaw,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  module.exports = XMLRaw = (function(superClass) {\r\n    extend(XMLRaw, superClass);\r\n\r\n    function XMLRaw(parent, text) {\r\n      XMLRaw.__super__.constructor.call(this, parent);\r\n      if (text == null) {\r\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\r\n      }\r\n      this.type = NodeType.Raw;\r\n      this.value = this.stringify.raw(text);\r\n    }\r\n\r\n    XMLRaw.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLRaw.prototype.toString = function(options) {\r\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    return XMLRaw;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLCharacterData, XMLText,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLCharacterData = require('./XMLCharacterData');\r\n\r\n  module.exports = XMLText = (function(superClass) {\r\n    extend(XMLText, superClass);\r\n\r\n    function XMLText(parent, text) {\r\n      XMLText.__super__.constructor.call(this, parent);\r\n      if (text == null) {\r\n        throw new Error(\"Missing element text. \" + this.debugInfo());\r\n      }\r\n      this.name = \"#text\";\r\n      this.type = NodeType.Text;\r\n      this.value = this.stringify.text(text);\r\n    }\r\n\r\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\r\n      get: function() {\r\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\r\n      get: function() {\r\n        var next, prev, str;\r\n        str = '';\r\n        prev = this.previousSibling;\r\n        while (prev) {\r\n          str = prev.data + str;\r\n          prev = prev.previousSibling;\r\n        }\r\n        str += this.data;\r\n        next = this.nextSibling;\r\n        while (next) {\r\n          str = str + next.data;\r\n          next = next.nextSibling;\r\n        }\r\n        return str;\r\n      }\r\n    });\r\n\r\n    XMLText.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLText.prototype.toString = function(options) {\r\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLText.prototype.splitText = function(offset) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    XMLText.prototype.replaceWholeText = function(content) {\r\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\r\n    };\r\n\r\n    return XMLText;\r\n\r\n  })(XMLCharacterData);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLCharacterData, XMLProcessingInstruction,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLCharacterData = require('./XMLCharacterData');\r\n\r\n  module.exports = XMLProcessingInstruction = (function(superClass) {\r\n    extend(XMLProcessingInstruction, superClass);\r\n\r\n    function XMLProcessingInstruction(parent, target, value) {\r\n      XMLProcessingInstruction.__super__.constructor.call(this, parent);\r\n      if (target == null) {\r\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\r\n      }\r\n      this.type = NodeType.ProcessingInstruction;\r\n      this.target = this.stringify.insTarget(target);\r\n      this.name = this.target;\r\n      if (value) {\r\n        this.value = this.stringify.insValue(value);\r\n      }\r\n    }\r\n\r\n    XMLProcessingInstruction.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLProcessingInstruction.prototype.toString = function(options) {\r\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\r\n    };\r\n\r\n    XMLProcessingInstruction.prototype.isEqualNode = function(node) {\r\n      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\r\n        return false;\r\n      }\r\n      if (node.target !== this.target) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return XMLProcessingInstruction;\r\n\r\n  })(XMLCharacterData);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, XMLDummy, XMLNode,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLNode = require('./XMLNode');\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  module.exports = XMLDummy = (function(superClass) {\r\n    extend(XMLDummy, superClass);\r\n\r\n    function XMLDummy(parent) {\r\n      XMLDummy.__super__.constructor.call(this, parent);\r\n      this.type = NodeType.Dummy;\r\n    }\r\n\r\n    XMLDummy.prototype.clone = function() {\r\n      return Object.create(this);\r\n    };\r\n\r\n    XMLDummy.prototype.toString = function(options) {\r\n      return '';\r\n    };\r\n\r\n    return XMLDummy;\r\n\r\n  })(XMLNode);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLNodeList;\r\n\r\n  module.exports = XMLNodeList = (function() {\r\n    function XMLNodeList(nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\r\n      get: function() {\r\n        return this.nodes.length || 0;\r\n      }\r\n    });\r\n\r\n    XMLNodeList.prototype.clone = function() {\r\n      return this.nodes = null;\r\n    };\r\n\r\n    XMLNodeList.prototype.item = function(index) {\r\n      return this.nodes[index] || null;\r\n    };\r\n\r\n    return XMLNodeList;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  module.exports = {\r\n    Disconnected: 1,\r\n    Preceding: 2,\r\n    Following: 4,\r\n    Contains: 8,\r\n    ContainedBy: 16,\r\n    ImplementationSpecific: 32\r\n  };\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLStringifier,\r\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  module.exports = XMLStringifier = (function() {\r\n    function XMLStringifier(options) {\r\n      this.assertLegalName = bind(this.assertLegalName, this);\r\n      this.assertLegalChar = bind(this.assertLegalChar, this);\r\n      var key, ref, value;\r\n      options || (options = {});\r\n      this.options = options;\r\n      if (!this.options.version) {\r\n        this.options.version = '1.0';\r\n      }\r\n      ref = options.stringify || {};\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        value = ref[key];\r\n        this[key] = value;\r\n      }\r\n    }\r\n\r\n    XMLStringifier.prototype.name = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalName('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.text = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar(this.textEscape('' + val || ''));\r\n    };\r\n\r\n    XMLStringifier.prototype.cdata = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      val = '' + val || '';\r\n      val = val.replace(']]>', ']]]]><![CDATA[>');\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.comment = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      val = '' + val || '';\r\n      if (val.match(/--/)) {\r\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\r\n      }\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.raw = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return '' + val || '';\r\n    };\r\n\r\n    XMLStringifier.prototype.attValue = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\r\n    };\r\n\r\n    XMLStringifier.prototype.insTarget = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.insValue = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      val = '' + val || '';\r\n      if (val.match(/\\?>/)) {\r\n        throw new Error(\"Invalid processing instruction value: \" + val);\r\n      }\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlVersion = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      val = '' + val || '';\r\n      if (!val.match(/1\\.[0-9]+/)) {\r\n        throw new Error(\"Invalid version number: \" + val);\r\n      }\r\n      return val;\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlEncoding = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      val = '' + val || '';\r\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\r\n        throw new Error(\"Invalid encoding: \" + val);\r\n      }\r\n      return this.assertLegalChar(val);\r\n    };\r\n\r\n    XMLStringifier.prototype.xmlStandalone = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      if (val) {\r\n        return \"yes\";\r\n      } else {\r\n        return \"no\";\r\n      }\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdPubID = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdSysID = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdElementValue = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdAttType = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.dtdNData = function(val) {\r\n      if (this.options.noValidation) {\r\n        return val;\r\n      }\r\n      return this.assertLegalChar('' + val || '');\r\n    };\r\n\r\n    XMLStringifier.prototype.convertAttKey = '@';\r\n\r\n    XMLStringifier.prototype.convertPIKey = '?';\r\n\r\n    XMLStringifier.prototype.convertTextKey = '#text';\r\n\r\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\r\n\r\n    XMLStringifier.prototype.convertCommentKey = '#comment';\r\n\r\n    XMLStringifier.prototype.convertRawKey = '#raw';\r\n\r\n    XMLStringifier.prototype.assertLegalChar = function(str) {\r\n      var regex, res;\r\n      if (this.options.noValidation) {\r\n        return str;\r\n      }\r\n      regex = '';\r\n      if (this.options.version === '1.0') {\r\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\r\n        if (res = str.match(regex)) {\r\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\r\n        }\r\n      } else if (this.options.version === '1.1') {\r\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\r\n        if (res = str.match(regex)) {\r\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\r\n        }\r\n      }\r\n      return str;\r\n    };\r\n\r\n    XMLStringifier.prototype.assertLegalName = function(str) {\r\n      var regex;\r\n      if (this.options.noValidation) {\r\n        return str;\r\n      }\r\n      this.assertLegalChar(str);\r\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\r\n      if (!str.match(regex)) {\r\n        throw new Error(\"Invalid character in name\");\r\n      }\r\n      return str;\r\n    };\r\n\r\n    XMLStringifier.prototype.textEscape = function(str) {\r\n      var ampregex;\r\n      if (this.options.noValidation) {\r\n        return str;\r\n      }\r\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\r\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\r\n    };\r\n\r\n    XMLStringifier.prototype.attEscape = function(str) {\r\n      var ampregex;\r\n      if (this.options.noValidation) {\r\n        return str;\r\n      }\r\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\r\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\r\n    };\r\n\r\n    return XMLStringifier;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var XMLStringWriter, XMLWriterBase,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  XMLWriterBase = require('./XMLWriterBase');\r\n\r\n  module.exports = XMLStringWriter = (function(superClass) {\r\n    extend(XMLStringWriter, superClass);\r\n\r\n    function XMLStringWriter(options) {\r\n      XMLStringWriter.__super__.constructor.call(this, options);\r\n    }\r\n\r\n    XMLStringWriter.prototype.document = function(doc, options) {\r\n      var child, i, len, r, ref;\r\n      options = this.filterOptions(options);\r\n      r = '';\r\n      ref = doc.children;\r\n      for (i = 0, len = ref.length; i < len; i++) {\r\n        child = ref[i];\r\n        r += this.writeChildNode(child, options, 0);\r\n      }\r\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\r\n        r = r.slice(0, -options.newline.length);\r\n      }\r\n      return r;\r\n    };\r\n\r\n    return XMLStringWriter;\r\n\r\n  })(XMLWriterBase);\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  assign = require('./Utility').assign;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLDeclaration = require('./XMLDeclaration');\r\n\r\n  XMLDocType = require('./XMLDocType');\r\n\r\n  XMLCData = require('./XMLCData');\r\n\r\n  XMLComment = require('./XMLComment');\r\n\r\n  XMLElement = require('./XMLElement');\r\n\r\n  XMLRaw = require('./XMLRaw');\r\n\r\n  XMLText = require('./XMLText');\r\n\r\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\r\n\r\n  XMLDummy = require('./XMLDummy');\r\n\r\n  XMLDTDAttList = require('./XMLDTDAttList');\r\n\r\n  XMLDTDElement = require('./XMLDTDElement');\r\n\r\n  XMLDTDEntity = require('./XMLDTDEntity');\r\n\r\n  XMLDTDNotation = require('./XMLDTDNotation');\r\n\r\n  WriterState = require('./WriterState');\r\n\r\n  module.exports = XMLWriterBase = (function() {\r\n    function XMLWriterBase(options) {\r\n      var key, ref, value;\r\n      options || (options = {});\r\n      this.options = options;\r\n      ref = options.writer || {};\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        value = ref[key];\r\n        this[\"_\" + key] = this[key];\r\n        this[key] = value;\r\n      }\r\n    }\r\n\r\n    XMLWriterBase.prototype.filterOptions = function(options) {\r\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\r\n      options || (options = {});\r\n      options = assign({}, this.options, options);\r\n      filteredOptions = {\r\n        writer: this\r\n      };\r\n      filteredOptions.pretty = options.pretty || false;\r\n      filteredOptions.allowEmpty = options.allowEmpty || false;\r\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\r\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\r\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\r\n      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\r\n      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';\r\n      if (filteredOptions.spaceBeforeSlash === true) {\r\n        filteredOptions.spaceBeforeSlash = ' ';\r\n      }\r\n      filteredOptions.suppressPrettyCount = 0;\r\n      filteredOptions.user = {};\r\n      filteredOptions.state = WriterState.None;\r\n      return filteredOptions;\r\n    };\r\n\r\n    XMLWriterBase.prototype.indent = function(node, options, level) {\r\n      var indentLevel;\r\n      if (!options.pretty || options.suppressPrettyCount) {\r\n        return '';\r\n      } else if (options.pretty) {\r\n        indentLevel = (level || 0) + options.offset + 1;\r\n        if (indentLevel > 0) {\r\n          return new Array(indentLevel).join(options.indent);\r\n        }\r\n      }\r\n      return '';\r\n    };\r\n\r\n    XMLWriterBase.prototype.endline = function(node, options, level) {\r\n      if (!options.pretty || options.suppressPrettyCount) {\r\n        return '';\r\n      } else {\r\n        return options.newline;\r\n      }\r\n    };\r\n\r\n    XMLWriterBase.prototype.attribute = function(att, options, level) {\r\n      var r;\r\n      this.openAttribute(att, options, level);\r\n      r = ' ' + att.name + '=\"' + att.value + '\"';\r\n      this.closeAttribute(att, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.cdata = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<![CDATA[';\r\n      options.state = WriterState.InsideTag;\r\n      r += node.value;\r\n      options.state = WriterState.CloseTag;\r\n      r += ']]>' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.comment = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<!-- ';\r\n      options.state = WriterState.InsideTag;\r\n      r += node.value;\r\n      options.state = WriterState.CloseTag;\r\n      r += ' -->' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.declaration = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<?xml';\r\n      options.state = WriterState.InsideTag;\r\n      r += ' version=\"' + node.version + '\"';\r\n      if (node.encoding != null) {\r\n        r += ' encoding=\"' + node.encoding + '\"';\r\n      }\r\n      if (node.standalone != null) {\r\n        r += ' standalone=\"' + node.standalone + '\"';\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '?>';\r\n      r += this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.docType = function(node, options, level) {\r\n      var child, i, len, r, ref;\r\n      level || (level = 0);\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level);\r\n      r += '<!DOCTYPE ' + node.root().name;\r\n      if (node.pubID && node.sysID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n      } else if (node.sysID) {\r\n        r += ' SYSTEM \"' + node.sysID + '\"';\r\n      }\r\n      if (node.children.length > 0) {\r\n        r += ' [';\r\n        r += this.endline(node, options, level);\r\n        options.state = WriterState.InsideTag;\r\n        ref = node.children;\r\n        for (i = 0, len = ref.length; i < len; i++) {\r\n          child = ref[i];\r\n          r += this.writeChildNode(child, options, level + 1);\r\n        }\r\n        options.state = WriterState.CloseTag;\r\n        r += ']';\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '>';\r\n      r += this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.element = function(node, options, level) {\r\n      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\r\n      level || (level = 0);\r\n      prettySuppressed = false;\r\n      r = '';\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r += this.indent(node, options, level) + '<' + node.name;\r\n      ref = node.attribs;\r\n      for (name in ref) {\r\n        if (!hasProp.call(ref, name)) continue;\r\n        att = ref[name];\r\n        r += this.attribute(att, options, level);\r\n      }\r\n      childNodeCount = node.children.length;\r\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\r\n      if (childNodeCount === 0 || node.children.every(function(e) {\r\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\r\n      })) {\r\n        if (options.allowEmpty) {\r\n          r += '>';\r\n          options.state = WriterState.CloseTag;\r\n          r += '</' + node.name + '>' + this.endline(node, options, level);\r\n        } else {\r\n          options.state = WriterState.CloseTag;\r\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\r\n        }\r\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\r\n        r += '>';\r\n        options.state = WriterState.InsideTag;\r\n        options.suppressPrettyCount++;\r\n        prettySuppressed = true;\r\n        r += this.writeChildNode(firstChildNode, options, level + 1);\r\n        options.suppressPrettyCount--;\r\n        prettySuppressed = false;\r\n        options.state = WriterState.CloseTag;\r\n        r += '</' + node.name + '>' + this.endline(node, options, level);\r\n      } else {\r\n        if (options.dontPrettyTextNodes) {\r\n          ref1 = node.children;\r\n          for (i = 0, len = ref1.length; i < len; i++) {\r\n            child = ref1[i];\r\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\r\n              options.suppressPrettyCount++;\r\n              prettySuppressed = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        r += '>' + this.endline(node, options, level);\r\n        options.state = WriterState.InsideTag;\r\n        ref2 = node.children;\r\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\r\n          child = ref2[j];\r\n          r += this.writeChildNode(child, options, level + 1);\r\n        }\r\n        options.state = WriterState.CloseTag;\r\n        r += this.indent(node, options, level) + '</' + node.name + '>';\r\n        if (prettySuppressed) {\r\n          options.suppressPrettyCount--;\r\n        }\r\n        r += this.endline(node, options, level);\r\n        options.state = WriterState.None;\r\n      }\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\r\n      switch (node.type) {\r\n        case NodeType.CData:\r\n          return this.cdata(node, options, level);\r\n        case NodeType.Comment:\r\n          return this.comment(node, options, level);\r\n        case NodeType.Element:\r\n          return this.element(node, options, level);\r\n        case NodeType.Raw:\r\n          return this.raw(node, options, level);\r\n        case NodeType.Text:\r\n          return this.text(node, options, level);\r\n        case NodeType.ProcessingInstruction:\r\n          return this.processingInstruction(node, options, level);\r\n        case NodeType.Dummy:\r\n          return '';\r\n        case NodeType.Declaration:\r\n          return this.declaration(node, options, level);\r\n        case NodeType.DocType:\r\n          return this.docType(node, options, level);\r\n        case NodeType.AttributeDeclaration:\r\n          return this.dtdAttList(node, options, level);\r\n        case NodeType.ElementDeclaration:\r\n          return this.dtdElement(node, options, level);\r\n        case NodeType.EntityDeclaration:\r\n          return this.dtdEntity(node, options, level);\r\n        case NodeType.NotationDeclaration:\r\n          return this.dtdNotation(node, options, level);\r\n        default:\r\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\r\n      }\r\n    };\r\n\r\n    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<?';\r\n      options.state = WriterState.InsideTag;\r\n      r += node.target;\r\n      if (node.value) {\r\n        r += ' ' + node.value;\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '?>';\r\n      r += this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.raw = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level);\r\n      options.state = WriterState.InsideTag;\r\n      r += node.value;\r\n      options.state = WriterState.CloseTag;\r\n      r += this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.text = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level);\r\n      options.state = WriterState.InsideTag;\r\n      r += node.value;\r\n      options.state = WriterState.CloseTag;\r\n      r += this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<!ATTLIST';\r\n      options.state = WriterState.InsideTag;\r\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\r\n      if (node.defaultValueType !== '#DEFAULT') {\r\n        r += ' ' + node.defaultValueType;\r\n      }\r\n      if (node.defaultValue) {\r\n        r += ' \"' + node.defaultValue + '\"';\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.dtdElement = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<!ELEMENT';\r\n      options.state = WriterState.InsideTag;\r\n      r += ' ' + node.name + ' ' + node.value;\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<!ENTITY';\r\n      options.state = WriterState.InsideTag;\r\n      if (node.pe) {\r\n        r += ' %';\r\n      }\r\n      r += ' ' + node.name;\r\n      if (node.value) {\r\n        r += ' \"' + node.value + '\"';\r\n      } else {\r\n        if (node.pubID && node.sysID) {\r\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n        } else if (node.sysID) {\r\n          r += ' SYSTEM \"' + node.sysID + '\"';\r\n        }\r\n        if (node.nData) {\r\n          r += ' NDATA ' + node.nData;\r\n        }\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\r\n      var r;\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      r = this.indent(node, options, level) + '<!NOTATION';\r\n      options.state = WriterState.InsideTag;\r\n      r += ' ' + node.name;\r\n      if (node.pubID && node.sysID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n      } else if (node.pubID) {\r\n        r += ' PUBLIC \"' + node.pubID + '\"';\r\n      } else if (node.sysID) {\r\n        r += ' SYSTEM \"' + node.sysID + '\"';\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\r\n      options.state = WriterState.None;\r\n      this.closeNode(node, options, level);\r\n      return r;\r\n    };\r\n\r\n    XMLWriterBase.prototype.openNode = function(node, options, level) {};\r\n\r\n    XMLWriterBase.prototype.closeNode = function(node, options, level) {};\r\n\r\n    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\r\n\r\n    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\r\n\r\n    return XMLWriterBase;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  module.exports = {\r\n    None: 0,\r\n    OpenTag: 1,\r\n    InsideTag: 2,\r\n    CloseTag: 3\r\n  };\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLDocument = require('./XMLDocument');\r\n\r\n  XMLElement = require('./XMLElement');\r\n\r\n  XMLCData = require('./XMLCData');\r\n\r\n  XMLComment = require('./XMLComment');\r\n\r\n  XMLRaw = require('./XMLRaw');\r\n\r\n  XMLText = require('./XMLText');\r\n\r\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\r\n\r\n  XMLDeclaration = require('./XMLDeclaration');\r\n\r\n  XMLDocType = require('./XMLDocType');\r\n\r\n  XMLDTDAttList = require('./XMLDTDAttList');\r\n\r\n  XMLDTDEntity = require('./XMLDTDEntity');\r\n\r\n  XMLDTDElement = require('./XMLDTDElement');\r\n\r\n  XMLDTDNotation = require('./XMLDTDNotation');\r\n\r\n  XMLAttribute = require('./XMLAttribute');\r\n\r\n  XMLStringifier = require('./XMLStringifier');\r\n\r\n  XMLStringWriter = require('./XMLStringWriter');\r\n\r\n  WriterState = require('./WriterState');\r\n\r\n  module.exports = XMLDocumentCB = (function() {\r\n    function XMLDocumentCB(options, onData, onEnd) {\r\n      var writerOptions;\r\n      this.name = \"?xml\";\r\n      this.type = NodeType.Document;\r\n      options || (options = {});\r\n      writerOptions = {};\r\n      if (!options.writer) {\r\n        options.writer = new XMLStringWriter();\r\n      } else if (isPlainObject(options.writer)) {\r\n        writerOptions = options.writer;\r\n        options.writer = new XMLStringWriter();\r\n      }\r\n      this.options = options;\r\n      this.writer = options.writer;\r\n      this.writerOptions = this.writer.filterOptions(writerOptions);\r\n      this.stringify = new XMLStringifier(options);\r\n      this.onDataCallback = onData || function() {};\r\n      this.onEndCallback = onEnd || function() {};\r\n      this.currentNode = null;\r\n      this.currentLevel = -1;\r\n      this.openTags = {};\r\n      this.documentStarted = false;\r\n      this.documentCompleted = false;\r\n      this.root = null;\r\n    }\r\n\r\n    XMLDocumentCB.prototype.createChildNode = function(node) {\r\n      var att, attName, attributes, child, i, len, ref1, ref2;\r\n      switch (node.type) {\r\n        case NodeType.CData:\r\n          this.cdata(node.value);\r\n          break;\r\n        case NodeType.Comment:\r\n          this.comment(node.value);\r\n          break;\r\n        case NodeType.Element:\r\n          attributes = {};\r\n          ref1 = node.attribs;\r\n          for (attName in ref1) {\r\n            if (!hasProp.call(ref1, attName)) continue;\r\n            att = ref1[attName];\r\n            attributes[attName] = att.value;\r\n          }\r\n          this.node(node.name, attributes);\r\n          break;\r\n        case NodeType.Dummy:\r\n          this.dummy();\r\n          break;\r\n        case NodeType.Raw:\r\n          this.raw(node.value);\r\n          break;\r\n        case NodeType.Text:\r\n          this.text(node.value);\r\n          break;\r\n        case NodeType.ProcessingInstruction:\r\n          this.instruction(node.target, node.value);\r\n          break;\r\n        default:\r\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\r\n      }\r\n      ref2 = node.children;\r\n      for (i = 0, len = ref2.length; i < len; i++) {\r\n        child = ref2[i];\r\n        this.createChildNode(child);\r\n        if (child.type === NodeType.Element) {\r\n          this.up();\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.dummy = function() {\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.node = function(name, attributes, text) {\r\n      var ref1;\r\n      if (name == null) {\r\n        throw new Error(\"Missing node name.\");\r\n      }\r\n      if (this.root && this.currentLevel === -1) {\r\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\r\n      }\r\n      this.openCurrent();\r\n      name = getValue(name);\r\n      if (attributes == null) {\r\n        attributes = {};\r\n      }\r\n      attributes = getValue(attributes);\r\n      if (!isObject(attributes)) {\r\n        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];\r\n      }\r\n      this.currentNode = new XMLElement(this, name, attributes);\r\n      this.currentNode.children = false;\r\n      this.currentLevel++;\r\n      this.openTags[this.currentLevel] = this.currentNode;\r\n      if (text != null) {\r\n        this.text(text);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.element = function(name, attributes, text) {\r\n      var child, i, len, oldValidationFlag, ref1, root;\r\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\r\n        this.dtdElement.apply(this, arguments);\r\n      } else {\r\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\r\n          oldValidationFlag = this.options.noValidation;\r\n          this.options.noValidation = true;\r\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\r\n          root.element(name);\r\n          this.options.noValidation = oldValidationFlag;\r\n          ref1 = root.children;\r\n          for (i = 0, len = ref1.length; i < len; i++) {\r\n            child = ref1[i];\r\n            this.createChildNode(child);\r\n            if (child.type === NodeType.Element) {\r\n              this.up();\r\n            }\r\n          }\r\n        } else {\r\n          this.node(name, attributes, text);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.attribute = function(name, value) {\r\n      var attName, attValue;\r\n      if (!this.currentNode || this.currentNode.children) {\r\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\r\n      }\r\n      if (name != null) {\r\n        name = getValue(name);\r\n      }\r\n      if (isObject(name)) {\r\n        for (attName in name) {\r\n          if (!hasProp.call(name, attName)) continue;\r\n          attValue = name[attName];\r\n          this.attribute(attName, attValue);\r\n        }\r\n      } else {\r\n        if (isFunction(value)) {\r\n          value = value.apply();\r\n        }\r\n        if (this.options.keepNullAttributes && (value == null)) {\r\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\r\n        } else if (value != null) {\r\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.text = function(value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLText(this, value);\r\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.cdata = function(value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLCData(this, value);\r\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.comment = function(value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLComment(this, value);\r\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.raw = function(value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLRaw(this, value);\r\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.instruction = function(target, value) {\r\n      var i, insTarget, insValue, len, node;\r\n      this.openCurrent();\r\n      if (target != null) {\r\n        target = getValue(target);\r\n      }\r\n      if (value != null) {\r\n        value = getValue(value);\r\n      }\r\n      if (Array.isArray(target)) {\r\n        for (i = 0, len = target.length; i < len; i++) {\r\n          insTarget = target[i];\r\n          this.instruction(insTarget);\r\n        }\r\n      } else if (isObject(target)) {\r\n        for (insTarget in target) {\r\n          if (!hasProp.call(target, insTarget)) continue;\r\n          insValue = target[insTarget];\r\n          this.instruction(insTarget, insValue);\r\n        }\r\n      } else {\r\n        if (isFunction(value)) {\r\n          value = value.apply();\r\n        }\r\n        node = new XMLProcessingInstruction(this, target, value);\r\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      }\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\r\n      var node;\r\n      this.openCurrent();\r\n      if (this.documentStarted) {\r\n        throw new Error(\"declaration() must be the first node.\");\r\n      }\r\n      node = new XMLDeclaration(this, version, encoding, standalone);\r\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\r\n      this.openCurrent();\r\n      if (root == null) {\r\n        throw new Error(\"Missing root node name.\");\r\n      }\r\n      if (this.root) {\r\n        throw new Error(\"dtd() must come before the root node.\");\r\n      }\r\n      this.currentNode = new XMLDocType(this, pubID, sysID);\r\n      this.currentNode.rootNodeName = root;\r\n      this.currentNode.children = false;\r\n      this.currentLevel++;\r\n      this.openTags[this.currentLevel] = this.currentNode;\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.dtdElement = function(name, value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLDTDElement(this, name, value);\r\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\r\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.entity = function(name, value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLDTDEntity(this, false, name, value);\r\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.pEntity = function(name, value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLDTDEntity(this, true, name, value);\r\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.notation = function(name, value) {\r\n      var node;\r\n      this.openCurrent();\r\n      node = new XMLDTDNotation(this, name, value);\r\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.up = function() {\r\n      if (this.currentLevel < 0) {\r\n        throw new Error(\"The document node has no parent.\");\r\n      }\r\n      if (this.currentNode) {\r\n        if (this.currentNode.children) {\r\n          this.closeNode(this.currentNode);\r\n        } else {\r\n          this.openNode(this.currentNode);\r\n        }\r\n        this.currentNode = null;\r\n      } else {\r\n        this.closeNode(this.openTags[this.currentLevel]);\r\n      }\r\n      delete this.openTags[this.currentLevel];\r\n      this.currentLevel--;\r\n      return this;\r\n    };\r\n\r\n    XMLDocumentCB.prototype.end = function() {\r\n      while (this.currentLevel >= 0) {\r\n        this.up();\r\n      }\r\n      return this.onEnd();\r\n    };\r\n\r\n    XMLDocumentCB.prototype.openCurrent = function() {\r\n      if (this.currentNode) {\r\n        this.currentNode.children = true;\r\n        return this.openNode(this.currentNode);\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.openNode = function(node) {\r\n      var att, chunk, name, ref1;\r\n      if (!node.isOpen) {\r\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\r\n          this.root = node;\r\n        }\r\n        chunk = '';\r\n        if (node.type === NodeType.Element) {\r\n          this.writerOptions.state = WriterState.OpenTag;\r\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\r\n          ref1 = node.attribs;\r\n          for (name in ref1) {\r\n            if (!hasProp.call(ref1, name)) continue;\r\n            att = ref1[name];\r\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\r\n          }\r\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\r\n          this.writerOptions.state = WriterState.InsideTag;\r\n        } else {\r\n          this.writerOptions.state = WriterState.OpenTag;\r\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\r\n          if (node.pubID && node.sysID) {\r\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\r\n          } else if (node.sysID) {\r\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\r\n          }\r\n          if (node.children) {\r\n            chunk += ' [';\r\n            this.writerOptions.state = WriterState.InsideTag;\r\n          } else {\r\n            this.writerOptions.state = WriterState.CloseTag;\r\n            chunk += '>';\r\n          }\r\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\r\n        }\r\n        this.onData(chunk, this.currentLevel);\r\n        return node.isOpen = true;\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.closeNode = function(node) {\r\n      var chunk;\r\n      if (!node.isClosed) {\r\n        chunk = '';\r\n        this.writerOptions.state = WriterState.CloseTag;\r\n        if (node.type === NodeType.Element) {\r\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\r\n        } else {\r\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\r\n        }\r\n        this.writerOptions.state = WriterState.None;\r\n        this.onData(chunk, this.currentLevel);\r\n        return node.isClosed = true;\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.onData = function(chunk, level) {\r\n      this.documentStarted = true;\r\n      return this.onDataCallback(chunk, level + 1);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.onEnd = function() {\r\n      this.documentCompleted = true;\r\n      return this.onEndCallback();\r\n    };\r\n\r\n    XMLDocumentCB.prototype.debugInfo = function(name) {\r\n      if (name == null) {\r\n        return \"\";\r\n      } else {\r\n        return \"node: <\" + name + \">\";\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.ele = function() {\r\n      return this.element.apply(this, arguments);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.nod = function(name, attributes, text) {\r\n      return this.node(name, attributes, text);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.txt = function(value) {\r\n      return this.text(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.dat = function(value) {\r\n      return this.cdata(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.com = function(value) {\r\n      return this.comment(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.ins = function(target, value) {\r\n      return this.instruction(target, value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\r\n      return this.declaration(version, encoding, standalone);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\r\n      return this.doctype(root, pubID, sysID);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.e = function(name, attributes, text) {\r\n      return this.element(name, attributes, text);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.n = function(name, attributes, text) {\r\n      return this.node(name, attributes, text);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.t = function(value) {\r\n      return this.text(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.d = function(value) {\r\n      return this.cdata(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.c = function(value) {\r\n      return this.comment(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.r = function(value) {\r\n      return this.raw(value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.i = function(target, value) {\r\n      return this.instruction(target, value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.att = function() {\r\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\r\n        return this.attList.apply(this, arguments);\r\n      } else {\r\n        return this.attribute.apply(this, arguments);\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.a = function() {\r\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\r\n        return this.attList.apply(this, arguments);\r\n      } else {\r\n        return this.attribute.apply(this, arguments);\r\n      }\r\n    };\r\n\r\n    XMLDocumentCB.prototype.ent = function(name, value) {\r\n      return this.entity(name, value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.pent = function(name, value) {\r\n      return this.pEntity(name, value);\r\n    };\r\n\r\n    XMLDocumentCB.prototype.not = function(name, value) {\r\n      return this.notation(name, value);\r\n    };\r\n\r\n    return XMLDocumentCB;\r\n\r\n  })();\r\n\r\n}).call(this);\r\n","// Generated by CoffeeScript 1.12.7\r\n(function() {\r\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\r\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  NodeType = require('./NodeType');\r\n\r\n  XMLWriterBase = require('./XMLWriterBase');\r\n\r\n  WriterState = require('./WriterState');\r\n\r\n  module.exports = XMLStreamWriter = (function(superClass) {\r\n    extend(XMLStreamWriter, superClass);\r\n\r\n    function XMLStreamWriter(stream, options) {\r\n      this.stream = stream;\r\n      XMLStreamWriter.__super__.constructor.call(this, options);\r\n    }\r\n\r\n    XMLStreamWriter.prototype.endline = function(node, options, level) {\r\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\r\n        return '';\r\n      } else {\r\n        return XMLStreamWriter.__super__.endline.call(this, node, options, level);\r\n      }\r\n    };\r\n\r\n    XMLStreamWriter.prototype.document = function(doc, options) {\r\n      var child, i, j, k, len, len1, ref, ref1, results;\r\n      ref = doc.children;\r\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\r\n        child = ref[i];\r\n        child.isLastRootNode = i === doc.children.length - 1;\r\n      }\r\n      options = this.filterOptions(options);\r\n      ref1 = doc.children;\r\n      results = [];\r\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\r\n        child = ref1[k];\r\n        results.push(this.writeChildNode(child, options, 0));\r\n      }\r\n      return results;\r\n    };\r\n\r\n    XMLStreamWriter.prototype.attribute = function(att, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.cdata = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.comment = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.declaration = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.docType = function(node, options, level) {\r\n      var child, j, len, ref;\r\n      level || (level = 0);\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      this.stream.write(this.indent(node, options, level));\r\n      this.stream.write('<!DOCTYPE ' + node.root().name);\r\n      if (node.pubID && node.sysID) {\r\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\r\n      } else if (node.sysID) {\r\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\r\n      }\r\n      if (node.children.length > 0) {\r\n        this.stream.write(' [');\r\n        this.stream.write(this.endline(node, options, level));\r\n        options.state = WriterState.InsideTag;\r\n        ref = node.children;\r\n        for (j = 0, len = ref.length; j < len; j++) {\r\n          child = ref[j];\r\n          this.writeChildNode(child, options, level + 1);\r\n        }\r\n        options.state = WriterState.CloseTag;\r\n        this.stream.write(']');\r\n      }\r\n      options.state = WriterState.CloseTag;\r\n      this.stream.write(options.spaceBeforeSlash + '>');\r\n      this.stream.write(this.endline(node, options, level));\r\n      options.state = WriterState.None;\r\n      return this.closeNode(node, options, level);\r\n    };\r\n\r\n    XMLStreamWriter.prototype.element = function(node, options, level) {\r\n      var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\r\n      level || (level = 0);\r\n      this.openNode(node, options, level);\r\n      options.state = WriterState.OpenTag;\r\n      this.stream.write(this.indent(node, options, level) + '<' + node.name);\r\n      ref = node.attribs;\r\n      for (name in ref) {\r\n        if (!hasProp.call(ref, name)) continue;\r\n        att = ref[name];\r\n        this.attribute(att, options, level);\r\n      }\r\n      childNodeCount = node.children.length;\r\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\r\n      if (childNodeCount === 0 || node.children.every(function(e) {\r\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\r\n      })) {\r\n        if (options.allowEmpty) {\r\n          this.stream.write('>');\r\n          options.state = WriterState.CloseTag;\r\n          this.stream.write('</' + node.name + '>');\r\n        } else {\r\n          options.state = WriterState.CloseTag;\r\n          this.stream.write(options.spaceBeforeSlash + '/>');\r\n        }\r\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\r\n        this.stream.write('>');\r\n        options.state = WriterState.InsideTag;\r\n        options.suppressPrettyCount++;\r\n        prettySuppressed = true;\r\n        this.writeChildNode(firstChildNode, options, level + 1);\r\n        options.suppressPrettyCount--;\r\n        prettySuppressed = false;\r\n        options.state = WriterState.CloseTag;\r\n        this.stream.write('</' + node.name + '>');\r\n      } else {\r\n        this.stream.write('>' + this.endline(node, options, level));\r\n        options.state = WriterState.InsideTag;\r\n        ref1 = node.children;\r\n        for (j = 0, len = ref1.length; j < len; j++) {\r\n          child = ref1[j];\r\n          this.writeChildNode(child, options, level + 1);\r\n        }\r\n        options.state = WriterState.CloseTag;\r\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\r\n      }\r\n      this.stream.write(this.endline(node, options, level));\r\n      options.state = WriterState.None;\r\n      return this.closeNode(node, options, level);\r\n    };\r\n\r\n    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.raw = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.text = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\r\n    };\r\n\r\n    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\r\n      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\r\n    };\r\n\r\n    return XMLStreamWriter;\r\n\r\n  })(XMLWriterBase);\r\n\r\n}).call(this);\r\n"]}
{"version":3,"sources":["index.js","parser.js","utils.js","signer.js","verify.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJafile":"index.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\r\n\r\nvar parser = require('./parser');\r\nvar signer = require('./signer');\r\nvar verify = require('./verify');\r\nvar utils = require('./utils');\r\n\r\n\r\n\r\n///--- API\r\n\r\nmodule.exports = {\r\n\r\n  parse: parser.parseRequest,\r\n  parseRequest: parser.parseRequest,\r\n\r\n  sign: signer.signRequest,\r\n  signRequest: signer.signRequest,\r\n  createSigner: signer.createSigner,\r\n  isSigner: signer.isSigner,\r\n\r\n  sshKeyToPEM: utils.sshKeyToPEM,\r\n  sshKeyFingerprint: utils.fingerprint,\r\n  pemToRsaSSHKey: utils.pemToRsaSSHKey,\r\n\r\n  verify: verify.verifySignature,\r\n  verifySignature: verify.verifySignature,\r\n  verifyHMAC: verify.verifyHMAC\r\n};\r\n","// Copyright 2012 Joyent, Inc.  All rights reserved.\r\n\r\nvar assert = require('assert-plus');\r\nvar util = require('util');\r\nvar utils = require('./utils');\r\n\r\n\r\n\r\n///--- Globals\r\n\r\nvar HASH_ALGOS = utils.HASH_ALGOS;\r\nvar PK_ALGOS = utils.PK_ALGOS;\r\nvar HttpSignatureError = utils.HttpSignatureError;\r\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\r\nvar validateAlgorithm = utils.validateAlgorithm;\r\n\r\nvar State = {\r\n  New: 0,\r\n  Params: 1\r\n};\r\n\r\nvar ParamsState = {\r\n  Name: 0,\r\n  Quote: 1,\r\n  Value: 2,\r\n  Comma: 3\r\n};\r\n\r\n\r\n///--- Specific Errors\r\n\r\n\r\nfunction ExpiredRequestError(message) {\r\n  HttpSignatureError.call(this, message, ExpiredRequestError);\r\n}\r\nutil.inherits(ExpiredRequestError, HttpSignatureError);\r\n\r\n\r\nfunction InvalidHeaderError(message) {\r\n  HttpSignatureError.call(this, message, InvalidHeaderError);\r\n}\r\nutil.inherits(InvalidHeaderError, HttpSignatureError);\r\n\r\n\r\nfunction InvalidParamsError(message) {\r\n  HttpSignatureError.call(this, message, InvalidParamsError);\r\n}\r\nutil.inherits(InvalidParamsError, HttpSignatureError);\r\n\r\n\r\nfunction MissingHeaderError(message) {\r\n  HttpSignatureError.call(this, message, MissingHeaderError);\r\n}\r\nutil.inherits(MissingHeaderError, HttpSignatureError);\r\n\r\nfunction StrictParsingError(message) {\r\n  HttpSignatureError.call(this, message, StrictParsingError);\r\n}\r\nutil.inherits(StrictParsingError, HttpSignatureError);\r\n\r\n///--- Exported API\r\n\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\r\n   *\r\n   * Note that this API will fully validate the Authorization header, and throw\r\n   * on any error.  It will not however check the signature, or the keyId format\r\n   * as those are specific to your environment.  You can use the options object\r\n   * to pass in extra constraints.\r\n   *\r\n   * As a response object you can expect this:\r\n   *\r\n   *     {\r\n   *       \"scheme\": \"Signature\",\r\n   *       \"params\": {\r\n   *         \"keyId\": \"foo\",\r\n   *         \"algorithm\": \"rsa-sha256\",\r\n   *         \"headers\": [\r\n   *           \"date\" or \"x-date\",\r\n   *           \"digest\"\r\n   *         ],\r\n   *         \"signature\": \"base64\"\r\n   *       },\r\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\r\n   *     }\r\n   *\r\n   * @param {Object} request an http.ServerRequest.\r\n   * @param {Object} options an optional options object with:\r\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\r\n   *                   - headers: required header names (def: date or x-date)\r\n   *                   - algorithms: algorithms to support (default: all).\r\n   *                   - strict: should enforce latest spec parsing\r\n   *                             (default: false).\r\n   * @return {Object} parsed out object (see above).\r\n   * @throws {TypeError} on invalid input.\r\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\r\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\r\n   * @throws {MissingHeaderError} if the params indicate a header not present,\r\n   *                              either in the request headers from the params,\r\n   *                              or not in the params from a required header\r\n   *                              in options.\r\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\r\n   *                              mode.\r\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\r\n   */\r\n  parseRequest: function parseRequest(request, options) {\r\n    assert.object(request, 'request');\r\n    assert.object(request.headers, 'request.headers');\r\n    if (options === undefined) {\r\n      options = {};\r\n    }\r\n    if (options.headers === undefined) {\r\n      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];\r\n    }\r\n    assert.object(options, 'options');\r\n    assert.arrayOfString(options.headers, 'options.headers');\r\n    assert.optionalFinite(options.clockSkew, 'options.clockSkew');\r\n\r\n    var authzHeaderName = options.authorizationHeaderName || 'authorization';\r\n\r\n    if (!request.headers[authzHeaderName]) {\r\n      throw new MissingHeaderError('no ' + authzHeaderName + ' header ' +\r\n                                   'present in the request');\r\n    }\r\n\r\n    options.clockSkew = options.clockSkew || 300;\r\n\r\n\r\n    var i = 0;\r\n    var state = State.New;\r\n    var substate = ParamsState.Name;\r\n    var tmpName = '';\r\n    var tmpValue = '';\r\n\r\n    var parsed = {\r\n      scheme: '',\r\n      params: {},\r\n      signingString: ''\r\n    };\r\n\r\n    var authz = request.headers[authzHeaderName];\r\n    for (i = 0; i < authz.length; i++) {\r\n      var c = authz.charAt(i);\r\n\r\n      switch (Number(state)) {\r\n\r\n      case State.New:\r\n        if (c !== ' ') parsed.scheme += c;\r\n        else state = State.Params;\r\n        break;\r\n\r\n      case State.Params:\r\n        switch (Number(substate)) {\r\n\r\n        case ParamsState.Name:\r\n          var code = c.charCodeAt(0);\r\n          // restricted name of A-Z / a-z\r\n          if ((code >= 0x41 && code <= 0x5a) || // A-Z\r\n              (code >= 0x61 && code <= 0x7a)) { // a-z\r\n            tmpName += c;\r\n          } else if (c === '=') {\r\n            if (tmpName.length === 0)\r\n              throw new InvalidHeaderError('bad param format');\r\n            substate = ParamsState.Quote;\r\n          } else {\r\n            throw new InvalidHeaderError('bad param format');\r\n          }\r\n          break;\r\n\r\n        case ParamsState.Quote:\r\n          if (c === '\"') {\r\n            tmpValue = '';\r\n            substate = ParamsState.Value;\r\n          } else {\r\n            throw new InvalidHeaderError('bad param format');\r\n          }\r\n          break;\r\n\r\n        case ParamsState.Value:\r\n          if (c === '\"') {\r\n            parsed.params[tmpName] = tmpValue;\r\n            substate = ParamsState.Comma;\r\n          } else {\r\n            tmpValue += c;\r\n          }\r\n          break;\r\n\r\n        case ParamsState.Comma:\r\n          if (c === ',') {\r\n            tmpName = '';\r\n            substate = ParamsState.Name;\r\n          } else {\r\n            throw new InvalidHeaderError('bad param format');\r\n          }\r\n          break;\r\n\r\n        default:\r\n          throw new Error('Invalid substate');\r\n        }\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Invalid substate');\r\n      }\r\n\r\n    }\r\n\r\n    if (!parsed.params.headers || parsed.params.headers === '') {\r\n      if (request.headers['x-date']) {\r\n        parsed.params.headers = ['x-date'];\r\n      } else {\r\n        parsed.params.headers = ['date'];\r\n      }\r\n    } else {\r\n      parsed.params.headers = parsed.params.headers.split(' ');\r\n    }\r\n\r\n    // Minimally validate the parsed object\r\n    if (!parsed.scheme || parsed.scheme !== 'Signature')\r\n      throw new InvalidHeaderError('scheme was not \"Signature\"');\r\n\r\n    if (!parsed.params.keyId)\r\n      throw new InvalidHeaderError('keyId was not specified');\r\n\r\n    if (!parsed.params.algorithm)\r\n      throw new InvalidHeaderError('algorithm was not specified');\r\n\r\n    if (!parsed.params.signature)\r\n      throw new InvalidHeaderError('signature was not specified');\r\n\r\n    // Check the algorithm against the official list\r\n    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\r\n    try {\r\n      validateAlgorithm(parsed.params.algorithm);\r\n    } catch (e) {\r\n      if (e instanceof InvalidAlgorithmError)\r\n        throw (new InvalidParamsError(parsed.params.algorithm + ' is not ' +\r\n          'supported'));\r\n      else\r\n        throw (e);\r\n    }\r\n\r\n    // Build the signingString\r\n    for (i = 0; i < parsed.params.headers.length; i++) {\r\n      var h = parsed.params.headers[i].toLowerCase();\r\n      parsed.params.headers[i] = h;\r\n\r\n      if (h === 'request-line') {\r\n        if (!options.strict) {\r\n          /*\r\n           * We allow headers from the older spec drafts if strict parsing isn't\r\n           * specified in options.\r\n           */\r\n          parsed.signingString +=\r\n            request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;\r\n        } else {\r\n          /* Strict parsing doesn't allow older draft headers. */\r\n          throw (new StrictParsingError('request-line is not a valid header ' +\r\n            'with strict parsing enabled.'));\r\n        }\r\n      } else if (h === '(request-target)') {\r\n        parsed.signingString +=\r\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\r\n          request.url;\r\n      } else {\r\n        var value = request.headers[h];\r\n        if (value === undefined)\r\n          throw new MissingHeaderError(h + ' was not in the request');\r\n        parsed.signingString += h + ': ' + value;\r\n      }\r\n\r\n      if ((i + 1) < parsed.params.headers.length)\r\n        parsed.signingString += '\\n';\r\n    }\r\n\r\n    // Check against the constraints\r\n    var date;\r\n    if (request.headers.date || request.headers['x-date']) {\r\n        if (request.headers['x-date']) {\r\n          date = new Date(request.headers['x-date']);\r\n        } else {\r\n          date = new Date(request.headers.date);\r\n        }\r\n      var now = new Date();\r\n      var skew = Math.abs(now.getTime() - date.getTime());\r\n\r\n      if (skew > options.clockSkew * 1000) {\r\n        throw new ExpiredRequestError('clock skew of ' +\r\n                                      (skew / 1000) +\r\n                                      's was greater than ' +\r\n                                      options.clockSkew + 's');\r\n      }\r\n    }\r\n\r\n    options.headers.forEach(function (hdr) {\r\n      // Remember that we already checked any headers in the params\r\n      // were in the request, so if this passes we're good.\r\n      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)\r\n        throw new MissingHeaderError(hdr + ' was not a signed header');\r\n    });\r\n\r\n    if (options.algorithms) {\r\n      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)\r\n        throw new InvalidParamsError(parsed.params.algorithm +\r\n                                     ' is not a supported algorithm');\r\n    }\r\n\r\n    parsed.algorithm = parsed.params.algorithm.toUpperCase();\r\n    parsed.keyId = parsed.params.keyId;\r\n    return parsed;\r\n  }\r\n\r\n};\r\n","// Copyright 2012 Joyent, Inc.  All rights reserved.\r\n\r\nvar assert = require('assert-plus');\r\nvar sshpk = require('sshpk');\r\nvar util = require('util');\r\n\r\nvar HASH_ALGOS = {\r\n  'sha1': true,\r\n  'sha256': true,\r\n  'sha512': true\r\n};\r\n\r\nvar PK_ALGOS = {\r\n  'rsa': true,\r\n  'dsa': true,\r\n  'ecdsa': true\r\n};\r\n\r\nfunction HttpSignatureError(message, caller) {\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, caller || HttpSignatureError);\r\n\r\n  this.message = message;\r\n  this.name = caller.name;\r\n}\r\nutil.inherits(HttpSignatureError, Error);\r\n\r\nfunction InvalidAlgorithmError(message) {\r\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\r\n}\r\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\r\n\r\nfunction validateAlgorithm(algorithm) {\r\n  var alg = algorithm.toLowerCase().split('-');\r\n\r\n  if (alg.length !== 2) {\r\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\r\n      'valid algorithm'));\r\n  }\r\n\r\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\r\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\r\n      'are not supported'));\r\n  }\r\n\r\n  if (!HASH_ALGOS[alg[1]]) {\r\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\r\n      'supported hash algorithm'));\r\n  }\r\n\r\n  return (alg);\r\n}\r\n\r\n///--- API\r\n\r\nmodule.exports = {\r\n\r\n  HASH_ALGOS: HASH_ALGOS,\r\n  PK_ALGOS: PK_ALGOS,\r\n\r\n  HttpSignatureError: HttpSignatureError,\r\n  InvalidAlgorithmError: InvalidAlgorithmError,\r\n\r\n  validateAlgorithm: validateAlgorithm,\r\n\r\n  /**\r\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\r\n   *\r\n   * The intent of this module is to interoperate with OpenSSL only,\r\n   * specifically the node crypto module's `verify` method.\r\n   *\r\n   * @param {String} key an OpenSSH public key.\r\n   * @return {String} PEM encoded form of the RSA public key.\r\n   * @throws {TypeError} on bad input.\r\n   * @throws {Error} on invalid ssh key formatted data.\r\n   */\r\n  sshKeyToPEM: function sshKeyToPEM(key) {\r\n    assert.string(key, 'ssh_key');\r\n\r\n    var k = sshpk.parseKey(key, 'ssh');\r\n    return (k.toString('pem'));\r\n  },\r\n\r\n\r\n  /**\r\n   * Generates an OpenSSH fingerprint from an ssh public key.\r\n   *\r\n   * @param {String} key an OpenSSH public key.\r\n   * @return {String} key fingerprint.\r\n   * @throws {TypeError} on bad input.\r\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\r\n   */\r\n  fingerprint: function fingerprint(key) {\r\n    assert.string(key, 'ssh_key');\r\n\r\n    var k = sshpk.parseKey(key, 'ssh');\r\n    return (k.fingerprint('md5').toString('hex'));\r\n  },\r\n\r\n  /**\r\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\r\n   *\r\n   * The reverse of the above function.\r\n   */\r\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\r\n    assert.equal('string', typeof (pem), 'typeof pem');\r\n\r\n    var k = sshpk.parseKey(pem, 'pem');\r\n    k.comment = comment;\r\n    return (k.toString('ssh'));\r\n  }\r\n};\r\n","// Copyright 2012 Joyent, Inc.  All rights reserved.\r\n\r\nvar assert = require('assert-plus');\r\nvar crypto = require('crypto');\r\nvar http = require('http');\r\nvar util = require('util');\r\nvar sshpk = require('sshpk');\r\nvar jsprim = require('jsprim');\r\nvar utils = require('./utils');\r\n\r\nvar sprintf = require('util').format;\r\n\r\nvar HASH_ALGOS = utils.HASH_ALGOS;\r\nvar PK_ALGOS = utils.PK_ALGOS;\r\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\r\nvar HttpSignatureError = utils.HttpSignatureError;\r\nvar validateAlgorithm = utils.validateAlgorithm;\r\n\r\n///--- Globals\r\n\r\nvar AUTHZ_FMT =\r\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\r\n\r\n///--- Specific Errors\r\n\r\nfunction MissingHeaderError(message) {\r\n  HttpSignatureError.call(this, message, MissingHeaderError);\r\n}\r\nutil.inherits(MissingHeaderError, HttpSignatureError);\r\n\r\nfunction StrictParsingError(message) {\r\n  HttpSignatureError.call(this, message, StrictParsingError);\r\n}\r\nutil.inherits(StrictParsingError, HttpSignatureError);\r\n\r\n/* See createSigner() */\r\nfunction RequestSigner(options) {\r\n  assert.object(options, 'options');\r\n\r\n  var alg = [];\r\n  if (options.algorithm !== undefined) {\r\n    assert.string(options.algorithm, 'options.algorithm');\r\n    alg = validateAlgorithm(options.algorithm);\r\n  }\r\n  this.rs_alg = alg;\r\n\r\n  /*\r\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\r\n   * with an rs_signer.\r\n   *\r\n   * rs_signFunc-based RequestSigners have to build up their entire signing\r\n   * string within the rs_lines array and give it to rs_signFunc as a single\r\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\r\n   * their signing state by using rs_signer.update(), thus only needing to\r\n   * buffer the hash function state and one line at a time.\r\n   */\r\n  if (options.sign !== undefined) {\r\n    assert.func(options.sign, 'options.sign');\r\n    this.rs_signFunc = options.sign;\r\n\r\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\r\n    assert.string(options.keyId, 'options.keyId');\r\n    this.rs_keyId = options.keyId;\r\n\r\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\r\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\r\n\r\n    /*\r\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\r\n     * data in chunks rather than requiring it all to be given in one go\r\n     * at the end, so they are more similar to signers than signFuncs.\r\n     */\r\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\r\n    this.rs_signer.sign = function () {\r\n      var digest = this.digest('base64');\r\n      return ({\r\n        hashAlgorithm: alg[1],\r\n        toString: function () { return (digest); }\r\n      });\r\n    };\r\n\r\n  } else if (options.key !== undefined) {\r\n    var key = options.key;\r\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\r\n      key = sshpk.parsePrivateKey(key);\r\n\r\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\r\n      'options.key must be a sshpk.PrivateKey');\r\n    this.rs_key = key;\r\n\r\n    assert.string(options.keyId, 'options.keyId');\r\n    this.rs_keyId = options.keyId;\r\n\r\n    if (!PK_ALGOS[key.type]) {\r\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\r\n        'keys are not supported'));\r\n    }\r\n\r\n    if (alg[0] !== undefined && key.type !== alg[0]) {\r\n      throw (new InvalidAlgorithmError('options.key must be a ' +\r\n        alg[0].toUpperCase() + ' key, was given a ' +\r\n        key.type.toUpperCase() + ' key instead'));\r\n    }\r\n\r\n    this.rs_signer = key.createSign(alg[1]);\r\n\r\n  } else {\r\n    throw (new TypeError('options.sign (func) or options.key is required'));\r\n  }\r\n\r\n  this.rs_headers = [];\r\n  this.rs_lines = [];\r\n}\r\n\r\n/**\r\n * Adds a header to be signed, with its value, into this signer.\r\n *\r\n * @param {String} header\r\n * @param {String} value\r\n * @return {String} value written\r\n */\r\nRequestSigner.prototype.writeHeader = function (header, value) {\r\n  assert.string(header, 'header');\r\n  header = header.toLowerCase();\r\n  assert.string(value, 'value');\r\n\r\n  this.rs_headers.push(header);\r\n\r\n  if (this.rs_signFunc) {\r\n    this.rs_lines.push(header + ': ' + value);\r\n\r\n  } else {\r\n    var line = header + ': ' + value;\r\n    if (this.rs_headers.length > 0)\r\n      line = '\\n' + line;\r\n    this.rs_signer.update(line);\r\n  }\r\n\r\n  return (value);\r\n};\r\n\r\n/**\r\n * Adds a default Date header, returning its value.\r\n *\r\n * @return {String}\r\n */\r\nRequestSigner.prototype.writeDateHeader = function () {\r\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\r\n};\r\n\r\n/**\r\n * Adds the request target line to be signed.\r\n *\r\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\r\n * @param {String} path\r\n */\r\nRequestSigner.prototype.writeTarget = function (method, path) {\r\n  assert.string(method, 'method');\r\n  assert.string(path, 'path');\r\n  method = method.toLowerCase();\r\n  this.writeHeader('(request-target)', method + ' ' + path);\r\n};\r\n\r\n/**\r\n * Calculate the value for the Authorization header on this request\r\n * asynchronously.\r\n *\r\n * @param {Func} callback (err, authz)\r\n */\r\nRequestSigner.prototype.sign = function (cb) {\r\n  assert.func(cb, 'callback');\r\n\r\n  if (this.rs_headers.length < 1)\r\n    throw (new Error('At least one header must be signed'));\r\n\r\n  var alg, authz;\r\n  if (this.rs_signFunc) {\r\n    var data = this.rs_lines.join('\\n');\r\n    var self = this;\r\n    this.rs_signFunc(data, function (err, sig) {\r\n      if (err) {\r\n        cb(err);\r\n        return;\r\n      }\r\n      try {\r\n        assert.object(sig, 'signature');\r\n        assert.string(sig.keyId, 'signature.keyId');\r\n        assert.string(sig.algorithm, 'signature.algorithm');\r\n        assert.string(sig.signature, 'signature.signature');\r\n        alg = validateAlgorithm(sig.algorithm);\r\n\r\n        authz = sprintf(AUTHZ_FMT,\r\n          sig.keyId,\r\n          sig.algorithm,\r\n          self.rs_headers.join(' '),\r\n          sig.signature);\r\n      } catch (e) {\r\n        cb(e);\r\n        return;\r\n      }\r\n      cb(null, authz);\r\n    });\r\n\r\n  } else {\r\n    try {\r\n      var sigObj = this.rs_signer.sign();\r\n    } catch (e) {\r\n      cb(e);\r\n      return;\r\n    }\r\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\r\n    var signature = sigObj.toString();\r\n    authz = sprintf(AUTHZ_FMT,\r\n      this.rs_keyId,\r\n      alg,\r\n      this.rs_headers.join(' '),\r\n      signature);\r\n    cb(null, authz);\r\n  }\r\n};\r\n\r\n///--- Exported API\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Identifies whether a given object is a request signer or not.\r\n   *\r\n   * @param {Object} object, the object to identify\r\n   * @returns {Boolean}\r\n   */\r\n  isSigner: function (obj) {\r\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\r\n      return (true);\r\n    return (false);\r\n  },\r\n\r\n  /**\r\n   * Creates a request signer, used to asynchronously build a signature\r\n   * for a request (does not have to be an http.ClientRequest).\r\n   *\r\n   * @param {Object} options, either:\r\n   *                   - {String} keyId\r\n   *                   - {String|Buffer} key\r\n   *                   - {String} algorithm (optional, required for HMAC)\r\n   *                 or:\r\n   *                   - {Func} sign (data, cb)\r\n   * @return {RequestSigner}\r\n   */\r\n  createSigner: function createSigner(options) {\r\n    return (new RequestSigner(options));\r\n  },\r\n\r\n  /**\r\n   * Adds an 'Authorization' header to an http.ClientRequest object.\r\n   *\r\n   * Note that this API will add a Date header if it's not already set. Any\r\n   * other headers in the options.headers array MUST be present, or this\r\n   * will throw.\r\n   *\r\n   * You shouldn't need to check the return type; it's just there if you want\r\n   * to be pedantic.\r\n   *\r\n   * The optional flag indicates whether parsing should use strict enforcement\r\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\r\n   * The default is to be loose and support\r\n   * older versions for compatibility.\r\n   *\r\n   * @param {Object} request an instance of http.ClientRequest.\r\n   * @param {Object} options signing parameters object:\r\n   *                   - {String} keyId required.\r\n   *                   - {String} key required (either a PEM or HMAC key).\r\n   *                   - {Array} headers optional; defaults to ['date'].\r\n   *                   - {String} algorithm optional (unless key is HMAC);\r\n   *                              default is the same as the sshpk default\r\n   *                              signing algorithm for the type of key given\r\n   *                   - {String} httpVersion optional; defaults to '1.1'.\r\n   *                   - {Boolean} strict optional; defaults to 'false'.\r\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\r\n   * @throws {TypeError} on bad parameter types (input).\r\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\r\n   *                                 the given key.\r\n   * @throws {sshpk.KeyParseError} if key was bad.\r\n   * @throws {MissingHeaderError} if a header to be signed was specified but\r\n   *                              was not present.\r\n   */\r\n  signRequest: function signRequest(request, options) {\r\n    assert.object(request, 'request');\r\n    assert.object(options, 'options');\r\n    assert.optionalString(options.algorithm, 'options.algorithm');\r\n    assert.string(options.keyId, 'options.keyId');\r\n    assert.optionalArrayOfString(options.headers, 'options.headers');\r\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\r\n\r\n    if (!request.getHeader('Date'))\r\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\r\n    if (!options.headers)\r\n      options.headers = ['date'];\r\n    if (!options.httpVersion)\r\n      options.httpVersion = '1.1';\r\n\r\n    var alg = [];\r\n    if (options.algorithm) {\r\n      options.algorithm = options.algorithm.toLowerCase();\r\n      alg = validateAlgorithm(options.algorithm);\r\n    }\r\n\r\n    var i;\r\n    var stringToSign = '';\r\n    for (i = 0; i < options.headers.length; i++) {\r\n      if (typeof (options.headers[i]) !== 'string')\r\n        throw new TypeError('options.headers must be an array of Strings');\r\n\r\n      var h = options.headers[i].toLowerCase();\r\n\r\n      if (h === 'request-line') {\r\n        if (!options.strict) {\r\n          /**\r\n           * We allow headers from the older spec drafts if strict parsing isn't\r\n           * specified in options.\r\n           */\r\n          stringToSign +=\r\n            request.method + ' ' + request.path + ' HTTP/' +\r\n            options.httpVersion;\r\n        } else {\r\n          /* Strict parsing doesn't allow older draft headers. */\r\n          throw (new StrictParsingError('request-line is not a valid header ' +\r\n            'with strict parsing enabled.'));\r\n        }\r\n      } else if (h === '(request-target)') {\r\n        stringToSign +=\r\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\r\n          request.path;\r\n      } else {\r\n        var value = request.getHeader(h);\r\n        if (value === undefined || value === '') {\r\n          throw new MissingHeaderError(h + ' was not in the request');\r\n        }\r\n        stringToSign += h + ': ' + value;\r\n      }\r\n\r\n      if ((i + 1) < options.headers.length)\r\n        stringToSign += '\\n';\r\n    }\r\n\r\n    /* This is just for unit tests. */\r\n    if (request.hasOwnProperty('_stringToSign')) {\r\n      request._stringToSign = stringToSign;\r\n    }\r\n\r\n    var signature;\r\n    if (alg[0] === 'hmac') {\r\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\r\n        throw (new TypeError('options.key must be a string or Buffer'));\r\n\r\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\r\n      hmac.update(stringToSign);\r\n      signature = hmac.digest('base64');\r\n\r\n    } else {\r\n      var key = options.key;\r\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\r\n        key = sshpk.parsePrivateKey(options.key);\r\n\r\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\r\n        'options.key must be a sshpk.PrivateKey');\r\n\r\n      if (!PK_ALGOS[key.type]) {\r\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\r\n          'keys are not supported'));\r\n      }\r\n\r\n      if (alg[0] !== undefined && key.type !== alg[0]) {\r\n        throw (new InvalidAlgorithmError('options.key must be a ' +\r\n          alg[0].toUpperCase() + ' key, was given a ' +\r\n          key.type.toUpperCase() + ' key instead'));\r\n      }\r\n\r\n      var signer = key.createSign(alg[1]);\r\n      signer.update(stringToSign);\r\n      var sigObj = signer.sign();\r\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\r\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\r\n          ' is not a supported hash algorithm'));\r\n      }\r\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\r\n      signature = sigObj.toString();\r\n      assert.notStrictEqual(signature, '', 'empty signature produced');\r\n    }\r\n\r\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\r\n\r\n    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\r\n                                               options.keyId,\r\n                                               options.algorithm,\r\n                                               options.headers.join(' '),\r\n                                               signature));\r\n\r\n    return true;\r\n  }\r\n\r\n};\r\n","// Copyright 2015 Joyent, Inc.\r\n\r\nvar assert = require('assert-plus');\r\nvar crypto = require('crypto');\r\nvar sshpk = require('sshpk');\r\nvar utils = require('./utils');\r\n\r\nvar HASH_ALGOS = utils.HASH_ALGOS;\r\nvar PK_ALGOS = utils.PK_ALGOS;\r\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\r\nvar HttpSignatureError = utils.HttpSignatureError;\r\nvar validateAlgorithm = utils.validateAlgorithm;\r\n\r\n///--- Exported API\r\n\r\nmodule.exports = {\r\n  /**\r\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\r\n   * an object that was returned from `parse()`.\r\n   *\r\n   * @param {Object} parsedSignature the object you got from `parse`.\r\n   * @param {String} pubkey RSA/DSA private key PEM.\r\n   * @return {Boolean} true if valid, false otherwise.\r\n   * @throws {TypeError} if you pass in bad arguments.\r\n   * @throws {InvalidAlgorithmError}\r\n   */\r\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\r\n    assert.object(parsedSignature, 'parsedSignature');\r\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\r\n      pubkey = sshpk.parseKey(pubkey);\r\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\r\n\r\n    var alg = validateAlgorithm(parsedSignature.algorithm);\r\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\r\n      return (false);\r\n\r\n    var v = pubkey.createVerify(alg[1]);\r\n    v.update(parsedSignature.signingString);\r\n    return (v.verify(parsedSignature.params.signature, 'base64'));\r\n  },\r\n\r\n  /**\r\n   * Verify HMAC against shared secret.  You are expected to pass in an object\r\n   * that was returned from `parse()`.\r\n   *\r\n   * @param {Object} parsedSignature the object you got from `parse`.\r\n   * @param {String} secret HMAC shared secret.\r\n   * @return {Boolean} true if valid, false otherwise.\r\n   * @throws {TypeError} if you pass in bad arguments.\r\n   * @throws {InvalidAlgorithmError}\r\n   */\r\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\r\n    assert.object(parsedSignature, 'parsedHMAC');\r\n    assert.string(secret, 'secret');\r\n\r\n    var alg = validateAlgorithm(parsedSignature.algorithm);\r\n    if (alg[0] !== 'hmac')\r\n      return (false);\r\n\r\n    var hashAlg = alg[1].toUpperCase();\r\n\r\n    var hmac = crypto.createHmac(hashAlg, secret);\r\n    hmac.update(parsedSignature.signingString);\r\n\r\n    /*\r\n     * Now double-hash to avoid leaking timing information - there's\r\n     * no easy constant-time compare in JS, so we use this approach\r\n     * instead. See for more info:\r\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\r\n     * verification.aspx\r\n     */\r\n    var h1 = crypto.createHmac(hashAlg, secret);\r\n    h1.update(hmac.digest());\r\n    h1 = h1.digest();\r\n    var h2 = crypto.createHmac(hashAlg, secret);\r\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\r\n    h2 = h2.digest();\r\n\r\n    /* Node 0.8 returns strings from .digest(). */\r\n    if (typeof (h1) === 'string')\r\n      return (h1 === h2);\r\n    /* And node 0.10 lacks the .equals() method on Buffers. */\r\n    if (Buffer.isBuffer(h1) && !h1.equals)\r\n      return (h1.toString('binary') === h2.toString('binary'));\r\n\r\n    return (h1.equals(h2));\r\n  }\r\n};\r\n"]}
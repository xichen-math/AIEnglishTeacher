{"version":3,"sources":["index.js","cloudbase.js","functions/index.js","utils/httpRequest.js","utils/tracing.js","utils/utils.js","utils/metadata.js","const/code.js","const/symbol.js","utils/request.js","utils/retry.js","utils/request-timings-measurer.js","utils/requestHook.js","utils/wxCloudToken.js","utils/secretManager.js","../package.json","auth/index.js","wx/index.js","storage/index.js","analytics/index.js","utils/dbRequest.js","log/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA;AHUA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,ACHA,ACHA;AJaA,ACHA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,ACHA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,ACHA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,AMlBA,ALeA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,AMlBA,ALeA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,AMlBA,ALeA,AFMA,AGTA,AGTA,AFMA,ACHA;AJaA,AMlBA,ACHA,ANkBA,ACHA,AGTA,AFMA,ACHA;AJaA,AMlBA,ACHA,ANkBA,ACHA,AGTA,AFMA,ACHA;AJaA,AMlBA,ACHA,ANkBA,ACHA,AGTA,AFMA,ACHA;AJaA,AMlBA,ACHA,ANkBA,ACHA,AGTA,AGTA,ALeA,ACHA;AJaA,AMlBA,ALeA,ACHA,AGTA,AGTA,ALeA,ACHA;AJaA,AMlBA,ALeA,ACHA,AGTA,AGTA,ALeA,ACHA;AJaA,AMlBA,ALeA,ACHA,AGTA,AGTA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AGTA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AGTA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,ACHA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA;AJaA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA,AQxBA;AZqCA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA,AQxBA;AZqCA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,ALeA,AQxBA;AZqCA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AZqCA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AZqCA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,Ad0CA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,Ad0CA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,Ad0CA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,ACHA,Af6CA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,ACHA,Af6CA,AMlBA,ALeA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,ACHA,Af6CA,ACHA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA;AELA,ACHA,Af6CA,ACHA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA,AIZA;AFOA,ACHA,Af6CA,ACHA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA,AIZA;AFOA,ACHA,Af6CA,ACHA,ACHA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA,AIZA;AFOA,ACHA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,AGTA,AFMA,AIZA,AT2BA,AQxBA,AIZA;AFOA,ACHA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,ACHA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,Af6CA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AgBhDA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AmBzDA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,ACHA,AmBzDA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AGTA,AKfA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AQxBA,AIZA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,AENA,AjBmDA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,AIZA,AT2BA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,AIZA,AHSA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,ACHA,ALeA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;AFOA,ACHA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AFMA,AJYA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,ANkBA,AYpCA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,AQxBA,AMlBA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AoB5DA,AHSA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA,Ac1CA;ADIA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AatCA,Af6CA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;AFOA,AiBnDA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nconst cloudbase_1 = require(\"./cloudbase\");\r\nconst symbol_1 = require(\"./const/symbol\");\r\nconst request_1 = require(\"./utils/request\");\r\nconst { version } = require('../package.json');\r\nmodule.exports = {\r\n    request: request_1.extraRequest,\r\n    init: (config) => {\r\n        return new cloudbase_1.CloudBase(config);\r\n    },\r\n    parseContext: (context) => {\r\n        // 校验context 是否正确\r\n        return cloudbase_1.CloudBase.parseContext(context);\r\n    },\r\n    version,\r\n    getCloudbaseContext: (context) => {\r\n        return cloudbase_1.CloudBase.getCloudbaseContext(context);\r\n    },\r\n    /**\r\n     * 云函数下获取当前env\r\n     */\r\n    SYMBOL_CURRENT_ENV: symbol_1.SYMBOL_CURRENT_ENV\r\n};\r\n","\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst database_1 = require(\"@cloudbase/database\");\r\nconst functions_1 = require(\"./functions\");\r\nconst auth_1 = require(\"./auth\");\r\nconst wx_1 = require(\"./wx\");\r\nconst storage_1 = require(\"./storage\");\r\nconst analytics_1 = require(\"./analytics\");\r\nconst dbRequest_1 = require(\"./utils/dbRequest\");\r\nconst log_1 = require(\"./log\");\r\nconst code_1 = require(\"./const/code\");\r\nconst utils_1 = require(\"./utils/utils\");\r\nconst axios_1 = __importDefault(require(\"axios\"));\r\nclass CloudBase {\r\n    static parseContext(context) {\r\n        if (typeof context !== 'object') {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_CONTEXT, { message: 'context 必须为对象类型' }));\r\n        }\r\n        let { memory_limit_in_mb, time_limit_in_ms, request_id, environ, function_version, namespace, function_name, environment } = context;\r\n        let parseResult = {};\r\n        try {\r\n            parseResult.memoryLimitInMb = memory_limit_in_mb;\r\n            parseResult.timeLimitIns = time_limit_in_ms;\r\n            parseResult.requestId = request_id;\r\n            parseResult.functionVersion = function_version;\r\n            parseResult.namespace = namespace;\r\n            parseResult.functionName = function_name;\r\n            // 存在environment 为新架构 上新字段 JSON序列化字符串\r\n            if (environment) {\r\n                parseResult.environment = JSON.parse(environment);\r\n                return parseResult;\r\n            }\r\n            // 不存在environment 则为老字段，老架构上存在bug，无法识别value含特殊字符(若允许特殊字符，影响解析，这里特殊处理)\r\n            const parseEnviron = environ.split(';');\r\n            let parseEnvironObj = {};\r\n            for (let i in parseEnviron) {\r\n                // value含分号影响切割，未找到= 均忽略\r\n                if (parseEnviron[i].indexOf('=') >= 0) {\r\n                    const equalIndex = parseEnviron[i].indexOf('=');\r\n                    const key = parseEnviron[i].slice(0, equalIndex);\r\n                    let value = parseEnviron[i].slice(equalIndex + 1);\r\n                    // value 含, 为数组\r\n                    if (value.indexOf(',') >= 0) {\r\n                        value = value.split(',');\r\n                    }\r\n                    parseEnvironObj[key] = value;\r\n                }\r\n            }\r\n            parseResult.environ = parseEnvironObj;\r\n        }\r\n        catch (err) {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_CONTEXT));\r\n        }\r\n        CloudBase.scfContext = parseResult;\r\n        return parseResult;\r\n    }\r\n    /**\r\n     * 获取当前函数内的所有环境变量(作为获取变量的统一方法，取值来源process.env 和 context)\r\n     */\r\n    static getCloudbaseContext(context) {\r\n        // WX_CONTEXT_ENV  WX_APPID WX_OPENID WX_UNIONID WX_API_TOKEN\r\n        // TCB_CONTEXT_ENV TCB_ENV TCB_SEQID TRIGGER_SRC LOGINTYPE QQ_OPENID QQ_APPID TCB_UUID TCB_ISANONYMOUS_USER TCB_SESSIONTOKEN TCB_CUSTOM_USER_ID TCB_SOURCE_IP TCB_SOURCE TCB_ROUTE_KEY TCB_HTTP_CONTEXT TCB_CONTEXT_CNFG\r\n        // 解析process.env\r\n        const { TENCENTCLOUD_RUNENV, SCF_NAMESPACE, TCB_CONTEXT_KEYS, TENCENTCLOUD_SECRETID, TENCENTCLOUD_SECRETKEY, TENCENTCLOUD_SESSIONTOKEN, TRIGGER_SRC, WX_CONTEXT_KEYS, WX_TRIGGER_API_TOKEN_V0, WX_CLIENTIP, WX_CLIENTIPV6, _SCF_TCB_LOG, TCB_CONTEXT_CNFG, LOGINTYPE } = process.env;\r\n        let contextEnv = {};\r\n        if (context) {\r\n            const { environment, environ } = CloudBase.parseContext(context);\r\n            contextEnv = environment || environ || {};\r\n        }\r\n        // 从TCB_CONTEXT_KEYS 和 WX_CONTEXT_KEYS中解析环境变量 取值优先级为 context > process.env\r\n        const tcb_context_keys = contextEnv.TCB_CONTEXT_KEYS || TCB_CONTEXT_KEYS;\r\n        const wx_context_keys = contextEnv.WX_CONTEXT_KEYS || WX_CONTEXT_KEYS;\r\n        let rawContext = {\r\n            TENCENTCLOUD_RUNENV,\r\n            SCF_NAMESPACE,\r\n            TCB_CONTEXT_KEYS,\r\n            TENCENTCLOUD_SECRETID,\r\n            TENCENTCLOUD_SECRETKEY,\r\n            TENCENTCLOUD_SESSIONTOKEN,\r\n            TRIGGER_SRC,\r\n            WX_TRIGGER_API_TOKEN_V0,\r\n            WX_CLIENTIP,\r\n            WX_CLIENTIPV6,\r\n            WX_CONTEXT_KEYS,\r\n            _SCF_TCB_LOG,\r\n            TCB_CONTEXT_CNFG,\r\n            LOGINTYPE\r\n        };\r\n        // 遍历keys\r\n        if (tcb_context_keys) {\r\n            try {\r\n                const tcbKeysList = tcb_context_keys.split(',');\r\n                for (let item of tcbKeysList) {\r\n                    rawContext[item] = contextEnv[item] || process.env[item];\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (wx_context_keys) {\r\n            try {\r\n                const wxKeysList = wx_context_keys.split(',');\r\n                for (let item of wxKeysList) {\r\n                    rawContext[item] = contextEnv[item] || process.env[item];\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        rawContext = Object.assign({}, rawContext, contextEnv);\r\n        let finalContext = {};\r\n        for (let key in rawContext) {\r\n            if (rawContext[key] !== undefined) {\r\n                finalContext[key] = rawContext[key];\r\n            }\r\n        }\r\n        return finalContext;\r\n    }\r\n    constructor(config) {\r\n        this.init(config);\r\n    }\r\n    init(config = {}) {\r\n        let { debug, secretId, secretKey, sessionToken, env, timeout, headers = {}, throwOnCode } = config, restConfig = __rest(config, [\"debug\", \"secretId\", \"secretKey\", \"sessionToken\", \"env\", \"timeout\", \"headers\", \"throwOnCode\"]);\r\n        if ((secretId && !secretKey) || (!secretId && secretKey)) {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'secretId and secretKey must be a pair' }));\r\n        }\r\n        const newConfig = Object.assign({}, restConfig, { debug: !!debug, secretId: secretId, secretKey: secretKey, sessionToken: sessionToken, envName: env, headers: Object.assign({}, headers), timeout: timeout || 15000, throwOnCode: throwOnCode !== undefined ? throwOnCode : true });\r\n        this.config = newConfig;\r\n        this.extensionMap = {};\r\n    }\r\n    registerExtension(ext) {\r\n        this.extensionMap[ext.name] = ext;\r\n    }\r\n    async invokeExtension(name, opts) {\r\n        const ext = this.extensionMap[name];\r\n        if (!ext) {\r\n            throw Error(`扩展${name} 必须先注册`);\r\n        }\r\n        console.log(opts);\r\n        return ext.invoke(opts, this);\r\n    }\r\n    database(dbConfig = {}) {\r\n        database_1.Db.reqClass = dbRequest_1.DBRequest;\r\n        // 兼容方法预处理\r\n        if (Object.prototype.toString.call(dbConfig).slice(8, -1) !== 'Object') {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'dbConfig must be an object' }));\r\n        }\r\n        if (dbConfig && dbConfig.env) {\r\n            // env变量名转换\r\n            dbConfig.envName = dbConfig.env;\r\n            delete dbConfig.env;\r\n        }\r\n        return new database_1.Db(Object.assign({}, this.config, dbConfig));\r\n    }\r\n    /**\r\n     * 调用云函数\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callFunction(callFunctionOptions, opts) {\r\n        return functions_1.callFunction(this, callFunctionOptions, opts);\r\n    }\r\n    auth() {\r\n        return auth_1.auth(this);\r\n    }\r\n    /**\r\n     * openapi调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callWxOpenApi(wxOpenApiOptions, opts) {\r\n        return wx_1.callWxOpenApi(this, wxOpenApiOptions, opts);\r\n    }\r\n    /**\r\n     * wxpayapi调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callWxPayApi(wxOpenApiOptions, opts) {\r\n        return wx_1.callWxPayApi(this, wxOpenApiOptions, opts);\r\n    }\r\n    /**\r\n     * wxpayapi调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    wxCallContainerApi(wxOpenApiOptions, opts) {\r\n        return wx_1.wxCallContainerApi(this, wxOpenApiOptions, opts);\r\n    }\r\n    /**\r\n     * 微信云调用\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    callCompatibleWxOpenApi(wxOpenApiOptions, opts) {\r\n        return wx_1.callCompatibleWxOpenApi(this, wxOpenApiOptions, opts);\r\n    }\r\n    /**\r\n     * 上传文件\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    uploadFile({ cloudPath, fileContent }, opts) {\r\n        return storage_1.uploadFile(this, { cloudPath, fileContent }, opts);\r\n    }\r\n    /**\r\n     * 删除文件\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    deleteFile({ fileList }, opts) {\r\n        return storage_1.deleteFile(this, { fileList }, opts);\r\n    }\r\n    /**\r\n     * 获取临时连接\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    getTempFileURL({ fileList }, opts) {\r\n        return storage_1.getTempFileURL(this, { fileList }, opts);\r\n    }\r\n    /**\r\n     * 下载文件\r\n     *\r\n     * @param params\r\n     * @param opts\r\n     */\r\n    downloadFile(params, opts) {\r\n        return storage_1.downloadFile(this, params, opts);\r\n    }\r\n    /**\r\n     * 获取上传元数据\r\n     *\r\n     * @param param0\r\n     * @param opts\r\n     */\r\n    getUploadMetadata({ cloudPath }, opts) {\r\n        return storage_1.getUploadMetadata(this, { cloudPath }, opts);\r\n    }\r\n    getFileAuthority({ fileList }, opts) {\r\n        return storage_1.getFileAuthority(this, { fileList }, opts);\r\n    }\r\n    /**\r\n     * 获取logger\r\n     *\r\n     */\r\n    logger() {\r\n        if (!this.clsLogger) {\r\n            this.clsLogger = log_1.logger();\r\n        }\r\n        return this.clsLogger;\r\n    }\r\n    analytics(reportData) {\r\n        return analytics_1.analytics(this, reportData);\r\n    }\r\n    // shim for tcb extension ci\r\n    get requestClient() {\r\n        return {\r\n            get: axios_1.default,\r\n            post: axios_1.default,\r\n            put: axios_1.default,\r\n            delete: axios_1.default\r\n        };\r\n    }\r\n}\r\nexports.CloudBase = CloudBase;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\n/**\r\n * 调用云函数\r\n * @param {String} name  函数名\r\n * @param {Object} functionParam 函数参数\r\n * @return {Promise}\r\n */\r\nasync function callFunction(cloudbase, { name, qualifier, data }, opts) {\r\n    const { TCB_ROUTE_KEY } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n    let transformData;\r\n    try {\r\n        transformData = data ? JSON.stringify(data) : '';\r\n    }\r\n    catch (e) {\r\n        throw utils_1.E(Object.assign({}, e, { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\r\n    }\r\n    if (!name) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '函数名不能为空' }));\r\n    }\r\n    const params = {\r\n        action: 'functions.invokeFunction',\r\n        function_name: name,\r\n        qualifier: qualifier,\r\n        // async: async,\r\n        request_data: transformData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: Object.assign({ 'content-type': 'application/json' }, (TCB_ROUTE_KEY ? { 'X-Tcb-Route-Key': TCB_ROUTE_KEY } : {}))\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        let result;\r\n        try {\r\n            result = JSON.parse(res.data.response_data);\r\n        }\r\n        catch (e) {\r\n            result = res.data.response_data;\r\n        }\r\n        return {\r\n            result,\r\n            requestId: res.requestId\r\n        };\r\n    });\r\n}\r\nexports.callFunction = callFunction;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst http_1 = __importDefault(require(\"http\"));\r\nconst tracing_1 = require(\"./tracing\");\r\nconst utils = __importStar(require(\"./utils\"));\r\nconst code_1 = require(\"../const/code\");\r\nconst symbol_1 = require(\"../const/symbol\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst request_1 = require(\"./request\");\r\nconst requestHook_1 = require(\"./requestHook\");\r\nconst wxCloudToken_1 = require(\"./wxCloudToken\");\r\nconst signature_nodejs_1 = require(\"@cloudbase/signature-nodejs\");\r\nconst url_1 = __importDefault(require(\"url\"));\r\n// import { version } from '../../package.json'\r\nconst secretManager_1 = __importDefault(require(\"./secretManager\"));\r\nconst { version } = require('../../package.json');\r\nconst { E, second, processReturn, getServerInjectUrl } = utils;\r\nclass Request {\r\n    constructor(args) {\r\n        this.urlPath = '/admin';\r\n        this.defaultTimeout = 15000;\r\n        this.timestamp = new Date().valueOf();\r\n        this.tracingInfo = tracing_1.generateTracingInfo();\r\n        this.slowWarnTimer = null;\r\n        // 请求参数\r\n        this.hooks = {};\r\n        this.args = args;\r\n        this.config = args.config;\r\n        this.opts = args.opts || {};\r\n        this.secretManager = new secretManager_1.default();\r\n    }\r\n    /**\r\n     * 最终发送请求\r\n     */\r\n    async request() {\r\n        // 校验密钥是否存在\r\n        await this.validateSecretIdAndKey();\r\n        // 构造请求参数\r\n        const params = await this.makeParams();\r\n        const opts = await this.makeReqOpts(params);\r\n        const action = this.getAction();\r\n        const key = {\r\n            functions: 'function_name',\r\n            database: 'collectionName',\r\n            wx: 'apiName'\r\n        }[action.split('.')[0]];\r\n        const argopts = this.opts;\r\n        const config = this.config;\r\n        // 发请求时未找到有效环境字段\r\n        if (!params.envName) {\r\n            // 检查config中是否有设置\r\n            if (config.envName) {\r\n                return processReturn(config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '未取到init 指定 env！' }));\r\n            }\r\n            else {\r\n                console.warn(`当前未指定env，将默认使用第一个创建的环境！`);\r\n            }\r\n        }\r\n        // 注意：必须初始化为 null\r\n        let retryOptions = null;\r\n        if (argopts.retryOptions) {\r\n            retryOptions = argopts.retryOptions;\r\n        }\r\n        else if (config.retries && typeof config.retries === 'number') {\r\n            retryOptions = { retries: config.retries };\r\n        }\r\n        return request_1.extraRequest(opts, {\r\n            debug: config.debug,\r\n            op: `${action}:${this.args.params[key]}@${params.envName}`,\r\n            seqId: this.getSeqId(),\r\n            retryOptions: retryOptions,\r\n            timingsMeasurerOptions: config.timingsMeasurerOptions || {}\r\n        }).then((response) => {\r\n            this.slowWarnTimer && clearTimeout(this.slowWarnTimer);\r\n            const { body } = response;\r\n            if (response.statusCode === 200) {\r\n                let res;\r\n                try {\r\n                    res = typeof body === 'string' ? JSON.parse(body) : body;\r\n                    if (this.hooks && this.hooks.handleData) {\r\n                        res = this.hooks.handleData(res, null, response, body);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    res = body;\r\n                }\r\n                return res;\r\n            }\r\n            else {\r\n                const e = E({\r\n                    code: response.statusCode,\r\n                    message: ` ${response.statusCode} ${http_1.default.STATUS_CODES[response.statusCode]} | [${opts.url}]`\r\n                });\r\n                throw e;\r\n            }\r\n        });\r\n    }\r\n    setHooks(hooks) {\r\n        Object.assign(this.hooks, hooks);\r\n    }\r\n    getSeqId() {\r\n        return this.tracingInfo.seqId;\r\n    }\r\n    /**\r\n     * 接口action\r\n     */\r\n    getAction() {\r\n        const { params } = this.args;\r\n        const { action } = params;\r\n        return action;\r\n    }\r\n    /**\r\n     * 设置超时warning\r\n     */\r\n    setSlowWarning(timeout) {\r\n        const action = this.getAction();\r\n        const { seqId } = this.tracingInfo;\r\n        this.slowWarnTimer = setTimeout(() => {\r\n            /* istanbul ignore next */\r\n            const msg = `Your current request ${action ||\r\n                ''} is longer than 3s, it may be due to the network or your query performance | [${seqId}]`;\r\n            /* istanbul ignore next */\r\n            console.warn(msg);\r\n        }, timeout);\r\n    }\r\n    /**\r\n     * 构造params\r\n     */\r\n    async makeParams() {\r\n        const { TCB_SESSIONTOKEN, TCB_ENV, SCF_NAMESPACE } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n        const args = this.args;\r\n        const opts = this.opts;\r\n        const config = this.config;\r\n        const { eventId } = this.tracingInfo;\r\n        const crossAuthorizationData = opts.getCrossAccountInfo && (await opts.getCrossAccountInfo()).authorization;\r\n        const { wxCloudApiToken, wxCloudbaseAccesstoken } = wxCloudToken_1.getWxCloudToken();\r\n        const params = Object.assign({}, args.params, { envName: config.envName, eventId,\r\n            wxCloudApiToken,\r\n            wxCloudbaseAccesstoken, tcb_sessionToken: TCB_SESSIONTOKEN || '', sessionToken: config.sessionToken, crossAuthorizationToken: crossAuthorizationData\r\n                ? Buffer.from(JSON.stringify(crossAuthorizationData)).toString('base64')\r\n                : '' });\r\n        // 取当前云函数环境时，替换为云函数下环境变量\r\n        if (params.envName === symbol_1.SYMBOL_CURRENT_ENV) {\r\n            params.envName = TCB_ENV || SCF_NAMESPACE;\r\n        }\r\n        // 过滤value undefined\r\n        utils.filterUndefined(params);\r\n        return params;\r\n    }\r\n    /**\r\n     *  构造请求项\r\n     */\r\n    async makeReqOpts(params) {\r\n        const config = this.config;\r\n        const args = this.args;\r\n        const isInternal = await utils.checkIsInternalAsync();\r\n        const url = this.getUrl({ isInternal });\r\n        const method = this.getMethod();\r\n        const opts = {\r\n            url: url,\r\n            method,\r\n            // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\r\n            // timeout: args.timeout || config.timeout || 15000,\r\n            timeout: this.getTimeout(),\r\n            // 优先取config，其次取模块，最后取默认\r\n            headers: await this.getHeaders(url),\r\n            proxy: config.proxy\r\n        };\r\n        opts.keepalive = config.keepalive === true;\r\n        if (args.method === 'post') {\r\n            if (args.isFormData) {\r\n                opts.formData = params;\r\n                opts.encoding = null;\r\n            }\r\n            else {\r\n                opts.body = params;\r\n                opts.json = true;\r\n            }\r\n        }\r\n        else {\r\n            /* istanbul ignore next */\r\n            opts.qs = params;\r\n        }\r\n        return opts;\r\n    }\r\n    /**\r\n     * 协议\r\n     */\r\n    getProtocol() {\r\n        return this.config.isHttp === true ? 'http' : 'https';\r\n    }\r\n    /**\r\n     * 请求方法\r\n     */\r\n    getMethod() {\r\n        return this.args.method || 'get';\r\n    }\r\n    /**\r\n     * 超时时间\r\n     */\r\n    getTimeout() {\r\n        const { opts = {} } = this.args;\r\n        // timeout优先级 自定义接口timeout > config配置timeout > 默认timeout\r\n        return opts.timeout || this.config.timeout || this.defaultTimeout;\r\n    }\r\n    /**\r\n     * 校验密钥和token是否存在\r\n     */\r\n    async validateSecretIdAndKey() {\r\n        const { TENCENTCLOUD_SECRETID, TENCENTCLOUD_SECRETKEY, TENCENTCLOUD_SESSIONTOKEN } = cloudbase_1.CloudBase.getCloudbaseContext(); // 放在此处是为了兼容本地环境下读环境变量\r\n        const isInSCF = utils.checkIsInScf();\r\n        const isInContainer = utils.checkIsInEks();\r\n        let opts = this.opts;\r\n        let getCrossAccountInfo = opts.getCrossAccountInfo || this.config.getCrossAccountInfo;\r\n        /* istanbul ignore if  */\r\n        if (getCrossAccountInfo) {\r\n            let crossAccountInfo = await getCrossAccountInfo();\r\n            let { credential } = await getCrossAccountInfo();\r\n            let { secretId, secretKey, token } = credential || {};\r\n            this.config = Object.assign({}, this.config, { secretId,\r\n                secretKey, sessionToken: token });\r\n            this.opts.getCrossAccountInfo = () => Promise.resolve(crossAccountInfo);\r\n            if (!this.config.secretId || !this.config.secretKey) {\r\n                throw E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'missing secretId or secretKey of tencent cloud' }));\r\n            }\r\n        }\r\n        else {\r\n            const { secretId, secretKey } = this.config;\r\n            if (!secretId || !secretKey) {\r\n                /* istanbul ignore if  */\r\n                if (isInContainer) {\r\n                    // 这种情况有可能是在容器内，此时尝试拉取临时\r\n                    const tmpSecret = await this.secretManager.getTmpSecret();\r\n                    this.config = Object.assign({}, this.config, { secretId: tmpSecret.id, secretKey: tmpSecret.key, sessionToken: tmpSecret.token });\r\n                    return;\r\n                }\r\n                if (!TENCENTCLOUD_SECRETID || !TENCENTCLOUD_SECRETKEY) {\r\n                    if (isInSCF) {\r\n                        throw E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'missing authoration key, redeploy the function' }));\r\n                    }\r\n                    else {\r\n                        throw E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'missing secretId or secretKey of tencent cloud' }));\r\n                    }\r\n                }\r\n                else {\r\n                    this.config = Object.assign({}, this.config, { secretId: TENCENTCLOUD_SECRETID, secretKey: TENCENTCLOUD_SECRETKEY, sessionToken: TENCENTCLOUD_SESSIONTOKEN });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * 获取headers 此函数中设置authorization\r\n     */\r\n    async getHeaders(url) {\r\n        const config = this.config;\r\n        const { secretId, secretKey } = config;\r\n        const args = this.args;\r\n        const method = this.getMethod();\r\n        const { TCB_SOURCE } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n        // Note: 云函数被调用时可能调用端未传递 SOURCE，TCB_SOURCE 可能为空\r\n        const SOURCE = utils.checkIsInScf() ? `${TCB_SOURCE || ''},scf` : ',not_scf';\r\n        let requiredHeaders = {\r\n            'User-Agent': `tcb-node-sdk/${version}`,\r\n            'x-tcb-source': SOURCE,\r\n            'x-client-timestamp': this.timestamp,\r\n            'X-SDK-Version': `tcb-node-sdk/${version}`,\r\n            Host: url_1.default.parse(url).host\r\n        };\r\n        if (config.version) {\r\n            requiredHeaders['X-SDK-Version'] = config.version;\r\n        }\r\n        if (this.tracingInfo.trace) {\r\n            requiredHeaders['x-tcb-tracelog'] = this.tracingInfo.trace;\r\n        }\r\n        const region = this.config.region || process.env.TENCENTCLOUD_REGION || '';\r\n        if (region) {\r\n            requiredHeaders['X-TCB-Region'] = region;\r\n        }\r\n        requiredHeaders = Object.assign({}, config.headers, args.headers, requiredHeaders);\r\n        const { authorization, timestamp } = signature_nodejs_1.sign({\r\n            secretId: secretId,\r\n            secretKey: secretKey,\r\n            method: method,\r\n            url: url,\r\n            params: await this.makeParams(),\r\n            headers: requiredHeaders,\r\n            withSignedParams: true,\r\n            timestamp: second() - 1\r\n        });\r\n        requiredHeaders['Authorization'] = authorization;\r\n        requiredHeaders['X-Signature-Expires'] = 600;\r\n        requiredHeaders['X-Timestamp'] = timestamp;\r\n        return Object.assign({}, requiredHeaders);\r\n    }\r\n    /**\r\n     * 获取url\r\n     * @param action\r\n     */\r\n    /* eslint-disable-next-line complexity */\r\n    getUrl(options = {\r\n        isInternal: false\r\n    }) {\r\n        if (utils.checkIsInScf()) {\r\n            // 云函数环境下，应该包含以下环境变量，如果没有，后续逻辑可能会有问题\r\n            if (!process.env.TENCENTCLOUD_REGION) {\r\n                console.error('[ERROR] missing `TENCENTCLOUD_REGION` environment');\r\n            }\r\n            if (!process.env.SCF_NAMESPACE) {\r\n                console.error('[ERROR] missing `SCF_NAMESPACE` environment');\r\n            }\r\n        }\r\n        const { TCB_ENV, SCF_NAMESPACE } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n        // 优先级：用户配置 > 环境变量\r\n        const region = this.config.region || process.env.TENCENTCLOUD_REGION || '';\r\n        // 有地域信息则访问地域级别域名，无地域信息则访问默认域名，默认域名固定解析到上海地域保持兼容\r\n        const internetRegionEndpoint = region\r\n            ? `${region}.tcb-api.tencentcloudapi.com`\r\n            : `tcb-api.tencentcloudapi.com`;\r\n        const internalRegionEndpoint = region\r\n            ? `internal.${region}.tcb-api.tencentcloudapi.com`\r\n            : `internal.tcb-api.tencentcloudapi.com`;\r\n        // 同地域走内网，跨地域走公网\r\n        const isSameRegionVisit = this.config.region\r\n            ? this.config.region === process.env.TENCENTCLOUD_REGION\r\n            : true;\r\n        const endpoint = isSameRegionVisit && (options.isInternal)\r\n            ? internalRegionEndpoint\r\n            : internetRegionEndpoint;\r\n        const envName = this.config.envName || '';\r\n        const currEnv = TCB_ENV || SCF_NAMESPACE || '';\r\n        // 注意：特殊环境ID不能拼在请求地址的域名中，所以这里需要特殊处理\r\n        const envId = envName === symbol_1.SYMBOL_CURRENT_ENV || utils.isPageModuleName(envName)\r\n            ? currEnv\r\n            : envName;\r\n        const envEndpoint = utils.isValidEnvFormat(envId) ? `${envId}.${endpoint}` : endpoint;\r\n        const protocol = options.isInternal ? 'http' : this.getProtocol();\r\n        // 注意：云函数环境下有地域信息，云应用环境下不确定是否有，如果没有，用户必须显式的传入\r\n        const defaultUrl = `${protocol}://${envEndpoint}${this.urlPath}`;\r\n        const { eventId, seqId } = this.tracingInfo;\r\n        const { serviceUrl } = this.config;\r\n        const serverInjectUrl = getServerInjectUrl();\r\n        const url = serviceUrl || serverInjectUrl || defaultUrl;\r\n        const qs = cloudbase_1.CloudBase.scfContext\r\n            ? `&eventId=${eventId}&seqId=${seqId}&scfRequestId=${cloudbase_1.CloudBase.scfContext.requestId}`\r\n            : `&eventId=${eventId}&seqId=${seqId}`;\r\n        return url.includes('?') ? `${url}${qs}` : `${url}?${qs}`;\r\n    }\r\n}\r\nexports.Request = Request;\r\n// 业务逻辑都放在这里处理\r\nexports.default = async (args) => {\r\n    const req = new Request(args);\r\n    const config = args.config;\r\n    const { action } = args.params;\r\n    if (action === 'wx.openApi' || action === 'wx.wxPayApi') {\r\n        req.setHooks({ handleData: requestHook_1.handleWxOpenApiData });\r\n    }\r\n    if (action.startsWith('database')) {\r\n        req.setSlowWarning(3000);\r\n    }\r\n    try {\r\n        const res = await req.request();\r\n        // 检查res是否为return {code, message}回包\r\n        if (res && res.code) {\r\n            // 判断是否设置config._returnCodeByThrow = false\r\n            return processReturn(config.throwOnCode, res);\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        //\r\n    }\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nlet seqNum = 0;\r\nfunction getSeqNum() {\r\n    return ++seqNum;\r\n}\r\nfunction generateEventId() {\r\n    return Date.now().toString(16) + '_' + getSeqNum().toString(16);\r\n}\r\nexports.generateTracingInfo = () => {\r\n    let { TCB_SEQID, TCB_TRACELOG } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n    TCB_SEQID = TCB_SEQID || '';\r\n    const eventId = generateEventId();\r\n    const seqId = TCB_SEQID ? `${TCB_SEQID}-${eventId}` : eventId;\r\n    return { eventId, seqId, trace: TCB_TRACELOG };\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst metadata_1 = require(\"./metadata\");\r\nclass TcbError extends Error {\r\n    constructor(error) {\r\n        super(error.message);\r\n        this.code = error.code;\r\n        this.message = error.message;\r\n        this.requestId = error.requestId;\r\n    }\r\n}\r\nexports.TcbError = TcbError;\r\nfunction isAppId(appIdStr) {\r\n    return /^[1-9][0-9]{4,64}$/gim.test(appIdStr);\r\n}\r\nexports.isAppId = isAppId;\r\nexports.filterValue = function filterValue(o, value) {\r\n    for (let key in o) {\r\n        if (o[key] === value) {\r\n            delete o[key];\r\n        }\r\n    }\r\n};\r\nexports.filterUndefined = function (o) {\r\n    return exports.filterValue(o, undefined);\r\n};\r\nexports.E = (errObj) => {\r\n    return new TcbError(errObj);\r\n};\r\nfunction isNonEmptyString(str) {\r\n    return typeof str === 'string' && str !== '';\r\n}\r\nexports.isNonEmptyString = isNonEmptyString;\r\nfunction checkIsInScf() {\r\n    // TENCENTCLOUD_RUNENV\r\n    return process.env.TENCENTCLOUD_RUNENV === 'SCF';\r\n}\r\nexports.checkIsInScf = checkIsInScf;\r\nfunction checkIsInEks() {\r\n    // EKS_CLUSTER_ID=cls-abcdefg\r\n    // EKS_LOGS_xxx=\r\n    // return isNonEmptyString(process.env.EKS_CLUSTER_ID)\r\n    return !!process.env.KUBERNETES_SERVICE_HOST;\r\n}\r\nexports.checkIsInEks = checkIsInEks;\r\nconst kSumeruEnvSet = new Set(['formal', 'pre', 'test']);\r\nfunction checkIsInSumeru() {\r\n    // SUMERU_ENV=formal | test | pre\r\n    return kSumeruEnvSet.has(process.env.SUMERU_ENV);\r\n}\r\nexports.checkIsInSumeru = checkIsInSumeru;\r\nasync function checkIsInTencentCloud() {\r\n    return isNonEmptyString(await metadata_1.lookupAppId());\r\n}\r\nexports.checkIsInTencentCloud = checkIsInTencentCloud;\r\nfunction second() {\r\n    // istanbul ignore next\r\n    return Math.floor(new Date().getTime() / 1000);\r\n}\r\nexports.second = second;\r\nfunction processReturn(throwOnCode, res) {\r\n    if (throwOnCode === false) {\r\n        // 不抛报错，正常return，兼容旧逻辑\r\n        return res;\r\n    }\r\n    throw exports.E(Object.assign({}, res));\r\n}\r\nexports.processReturn = processReturn;\r\nfunction getServerInjectUrl() {\r\n    const tcbContextConfig = getTcbContextConfig();\r\n    return tcbContextConfig['URL'] || '';\r\n}\r\nexports.getServerInjectUrl = getServerInjectUrl;\r\nfunction getTcbContextConfig() {\r\n    try {\r\n        const { TCB_CONTEXT_CNFG } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n        if (TCB_CONTEXT_CNFG) {\r\n            // 检查约定环境变量字段是否存在\r\n            return JSON.parse(TCB_CONTEXT_CNFG);\r\n        }\r\n        return {};\r\n    }\r\n    catch (e) {\r\n        /* istanbul ignore next */\r\n        console.log('parse context error...');\r\n        /* istanbul ignore next */\r\n        return {};\r\n    }\r\n}\r\nexports.getTcbContextConfig = getTcbContextConfig;\r\n/* istanbul ignore next */\r\nfunction getWxUrl(config) {\r\n    const protocal = config.isHttp === true ? 'http' : 'https';\r\n    let wxUrl = protocal + '://tcb-open.tencentcloudapi.com/admin';\r\n    if (checkIsInScf()) {\r\n        wxUrl = 'http://tcb-open.tencentyun.com/admin';\r\n    }\r\n    return wxUrl;\r\n}\r\nexports.getWxUrl = getWxUrl;\r\nfunction checkIsInternal() {\r\n    return checkIsInScf() || checkIsInEks() || checkIsInSumeru();\r\n}\r\nexports.checkIsInternal = checkIsInternal;\r\nfunction checkIsInternalAsync() {\r\n    return checkIsInternal() ? Promise.resolve(true) : checkIsInTencentCloud();\r\n}\r\nexports.checkIsInternalAsync = checkIsInternalAsync;\r\nfunction getCurrRunEnvTag() {\r\n    if (checkIsInScf()) {\r\n        return 'scf';\r\n    }\r\n    else if (checkIsInEks()) {\r\n        return 'eks';\r\n    }\r\n    else if (checkIsInSumeru()) {\r\n        return 'sumeru';\r\n    }\r\n    else if (checkIsInTencentCloud()) {\r\n        return 'tencentcloud';\r\n    }\r\n    return 'unknown';\r\n}\r\nexports.getCurrRunEnvTag = getCurrRunEnvTag;\r\n/**\r\n * 是否是场景模块名\r\n *\r\n * $: 前缀，表示SaaS场景模块名，非实际环境ID，当前通过特殊环境ID标识\r\n *\r\n * @param env\r\n * @returns\r\n */\r\nfunction isPageModuleName(env = '') {\r\n    return typeof env === 'string' && env.startsWith('$:');\r\n}\r\nexports.isPageModuleName = isPageModuleName;\r\n// 20 + 1 + 16, 限制长度 40\r\nconst env_rule_reg = /^[a-z0-9_-]{1,40}$/;\r\nfunction isValidEnvFormat(env = '') {\r\n    return typeof env === 'string' && env_rule_reg.test(env);\r\n}\r\nexports.isValidEnvFormat = isValidEnvFormat;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst axios_1 = __importDefault(require(\"axios\"));\r\nexports.kMetadataBaseUrl = 'http://metadata.tencentyun.com';\r\nvar kMetadataVersions;\r\n(function (kMetadataVersions) {\r\n    kMetadataVersions[\"v20170919\"] = \"2017-09-19\";\r\n    kMetadataVersions[\"v1.0\"] = \"1.0\";\r\n    kMetadataVersions[\"latest\"] = \"latest\";\r\n})(kMetadataVersions = exports.kMetadataVersions || (exports.kMetadataVersions = {}));\r\nfunction isAppId(appIdStr) {\r\n    return /^[1-9][0-9]{4,64}$/gim.test(appIdStr);\r\n}\r\nexports.isAppId = isAppId;\r\nasync function lookup(path, options = {}) {\r\n    const url = `${exports.kMetadataBaseUrl}/${kMetadataVersions.latest}/${path}`;\r\n    const resp = await axios_1.default.get(url, options);\r\n    if (resp.status === 200) {\r\n        return resp.data;\r\n    }\r\n    else {\r\n        throw new Error(`[ERROR] GET ${url} status: ${resp.status}`);\r\n    }\r\n}\r\nexports.lookup = lookup;\r\nconst metadataCache = {\r\n    appId: undefined\r\n};\r\n/**\r\n * lookupAppId - 该方法主要用于判断是否在云上环境\r\n * @returns\r\n */\r\nasync function lookupAppId() {\r\n    if (metadataCache.appId === undefined) {\r\n        metadataCache.appId = '';\r\n        try {\r\n            // 只有首次会请求且要求快速返回，超时时间很短，DNS无法解析将会超时返回\r\n            // 在云环境中，这个时间通常在 10ms 内，部分耗时长（30+ms）的情况是 DNS 解析耗时长（27+ms）\r\n            const appId = await lookup('meta-data/app-id', { timeout: 30 });\r\n            if (isAppId(appId)) {\r\n                metadataCache.appId = appId;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // ignore\r\n        }\r\n    }\r\n    return metadataCache.appId || '';\r\n}\r\nexports.lookupAppId = lookupAppId;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ERROR = {\r\n    INVALID_PARAM: {\r\n        code: 'INVALID_PARAM',\r\n        message: 'invalid param'\r\n    },\r\n    SYS_ERR: {\r\n        code: 'SYS_ERR',\r\n        message: 'system error'\r\n    },\r\n    STORAGE_REQUEST_FAIL: {\r\n        code: 'STORAGE_REQUEST_FAIL',\r\n        message: 'storage request fail'\r\n    },\r\n    STORAGE_FILE_NONEXIST: {\r\n        code: 'STORAGE_FILE_NONEXIST',\r\n        message: 'storage file not exist'\r\n    },\r\n    TCB_CLS_UNOPEN: {\r\n        code: 'TCB_CLS_UNOPEN',\r\n        message: '需要先开通日志检索功能'\r\n    },\r\n    INVALID_CONTEXT: {\r\n        code: 'INVALID_CONTEXT',\r\n        message: '无效的context对象，请使用 云函数入口的context参数'\r\n    }\r\n};\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SYMBOL_CURRENT_ENV = Symbol.for(\"SYMBOL_CURRENT_ENV\");\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst http_1 = __importDefault(require(\"http\"));\r\nconst request_1 = __importDefault(require(\"request\"));\r\nconst retry_1 = require(\"./retry\");\r\nconst request_timings_measurer_1 = require(\"./request-timings-measurer\");\r\nconst agentkeepalive_1 = __importStar(require(\"agentkeepalive\"));\r\nconst SAFE_RETRY_CODE_SET = new Set([\r\n    'ENOTFOUND',\r\n    'ENETDOWN',\r\n    'EHOSTDOWN',\r\n    'ENETUNREACH',\r\n    'EHOSTUNREACH',\r\n    'ECONNREFUSED'\r\n]);\r\nconst RETRY_CODE_SET = new Set(['ECONNRESET', 'ESOCKETTIMEDOUT']);\r\nconst RETRY_STATUS_CODE_SET = new Set([]);\r\n/* istanbul ignore next */\r\nfunction shouldRetry(e, result, operation) {\r\n    // 重试的错误码\r\n    if (e && SAFE_RETRY_CODE_SET.has(e.code)) {\r\n        return {\r\n            retryAble: true,\r\n            message: e.message\r\n        };\r\n    }\r\n    // 连接超时\r\n    if (e && e.code === 'ETIMEDOUT' && e.connect === true) {\r\n        return {\r\n            retryAble: true,\r\n            message: e.message\r\n        };\r\n    }\r\n    // 重试的状态码\r\n    if (result && RETRY_STATUS_CODE_SET.has(result.statusCode)) {\r\n        return {\r\n            retryAble: true,\r\n            message: `${result.request.method} ${result.request.href} ${result.statusCode} ${http_1.default.STATUS_CODES[result.statusCode]}`\r\n        };\r\n    }\r\n    return {\r\n        retryAble: false,\r\n        message: ''\r\n    };\r\n}\r\n/* istanbul ignore next */\r\nfunction requestWithTimingsMeasure(opts, extraOptions) {\r\n    return new Promise((resolve, reject) => {\r\n        const timingsMeasurerOptions = extraOptions.timingsMeasurerOptions || {};\r\n        const { waitingTime = 1000, interval = 200, enable = !!extraOptions.debug } = timingsMeasurerOptions;\r\n        const timingsMeasurer = request_timings_measurer_1.RequestTimgingsMeasurer.new({\r\n            waitingTime,\r\n            interval,\r\n            enable\r\n        });\r\n        timingsMeasurer.on('progress', (timings, reason = '') => {\r\n            const timingsLine = `s:${timings.socket || '-'}|l:${timings.lookup ||\r\n                '-'}|c:${timings.connect || '-'}|r:${timings.ready || '-'}|w:${timings.waiting ||\r\n                '-'}|d:${timings.download || '-'}|e:${timings.end || '-'}|E:${timings.error || '-'}`;\r\n            console.warn(`[RequestTimgings][${extraOptions.op || ''}] spent ${Date.now() -\r\n                timings.start}ms(${timingsLine}) [${extraOptions.seqId}][${extraOptions.attempts || 1}][${reason}]`);\r\n        });\r\n        if (opts.keepalive) {\r\n            ;\r\n            opts.agentClass = opts.url.startsWith('https')\r\n                ? agentkeepalive_1.HttpsAgent\r\n                : agentkeepalive_1.default;\r\n            opts.agentOptions = {\r\n                // keepAlive: true,\r\n                keepAliveMsecs: 3000,\r\n                maxSockets: 100,\r\n                maxFreeSockets: 10,\r\n                freeSocketTimeout: 20000,\r\n                timeout: 20000,\r\n                socketActiveTTL: null\r\n            };\r\n        }\r\n        ;\r\n        (function r(times) {\r\n            const clientRequest = request_1.default(opts, function (err, response, body) {\r\n                const reusedSocket = !!(clientRequest && clientRequest.req && clientRequest.req.reusedSocket);\r\n                if (err && extraOptions.debug) {\r\n                    console.warn(`[RequestTimgings][keepalive:${opts.keepalive}][reusedSocket:${reusedSocket}][times:${times}][code:${err.code}][message:${err.message}]${opts.url}`);\r\n                }\r\n                if (err && err.code === 'ECONNRESET' && reusedSocket && times >= 0 && opts.keepalive) {\r\n                    return r(--times);\r\n                }\r\n                return err ? reject(err) : resolve(response);\r\n            });\r\n            if ((request_1.default.Request && clientRequest instanceof request_1.default.Request) ||\r\n                clientRequest instanceof http_1.default.ClientRequest) {\r\n                timingsMeasurer.measure(clientRequest);\r\n            }\r\n        }(1));\r\n    });\r\n}\r\nexports.requestWithTimingsMeasure = requestWithTimingsMeasure;\r\nfunction extraRequest(opts, extraOptions) {\r\n    if (extraOptions && extraOptions.retryOptions) {\r\n        return retry_1.withRetry(attempts => {\r\n            return requestWithTimingsMeasure(opts, Object.assign({}, extraOptions, { attempts }));\r\n        }, Object.assign({ shouldRetry }, extraOptions.retryOptions));\r\n    }\r\n    else {\r\n        return requestWithTimingsMeasure(opts, Object.assign({}, extraOptions, { attempts: 1 }));\r\n    }\r\n}\r\nexports.extraRequest = extraRequest;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst retry_1 = __importDefault(require(\"retry\"));\r\n// import { RetryOperation } from 'retry/lib/retry_operation'\r\nconst RetryOperation = require('retry/lib/retry_operation');\r\n/* istanbul ignore next */\r\nfunction defaultShouldRetry(e, result) {\r\n    return { retryAble: false, message: '' };\r\n}\r\n/**\r\n * withRetry 重试封装函数\r\n * @param fn\r\n * @param retryOptions\r\n */\r\n/* istanbul ignore next */\r\nfunction withRetry(fn, retryOptions) {\r\n    // 默认不重试，0 表达未开启的含义，所以直接返回 promise\r\n    if (!retryOptions || retryOptions.retries === 0) {\r\n        return fn();\r\n    }\r\n    // 默认重试策略采取指数退避策略，超时时间计算公式及参数可查文档\r\n    // https://github.com/tim-kos/node-retry/\r\n    // 自定重试时间：\r\n    // timeouts: [1000, 2000, 4000, 8000]\r\n    const timeouts = retryOptions.timeouts\r\n        ? [...retryOptions.timeouts]\r\n        : retry_1.default.timeouts(retryOptions);\r\n    const operation = new RetryOperation(timeouts, {\r\n        forever: retryOptions.forever,\r\n        unref: retryOptions.unref,\r\n        maxRetryTime: retryOptions.maxRetryTime // 重试总的时间，单位毫秒，默认：Infinity\r\n    });\r\n    const shouldRetry = retryOptions.shouldRetry || defaultShouldRetry;\r\n    return new Promise((resolve, reject) => {\r\n        const isReadyToRetry = (e, resp, operation) => {\r\n            // 外层有效识别需要或者能够进行重试\r\n            // shouldRetry 中可调用 operation.stop 停掉重试，operation.retry 返回 false\r\n            const { retryAble, message } = shouldRetry(e, resp, operation);\r\n            const info = {};\r\n            info.nth = operation.attempts();\r\n            info.at = new Date();\r\n            info.message = message;\r\n            // 双重条件判断是否重试，外层判断满足条件与否，还需判断是否满足再次重试条件\r\n            const readyToRetry = retryAble && operation.retry(Object.assign({}, info));\r\n            if (!readyToRetry) {\r\n                // 如果不准备进行重试，并且尝试不止一次\r\n                // 最后一个错误记录重试信息\r\n                const ref = e || resp;\r\n                if (ref && operation.attempts() > 1) {\r\n                    ref.attempt = {};\r\n                    ref.attempt.timeouts = operation._originalTimeouts;\r\n                    ref.attempt.attempts = operation.attempts();\r\n                    ref.attempt.errors = operation.errors();\r\n                    // 如果最后一次因为 !retryAble 而没有进行重试\r\n                    // ref.attempt.errors 中将缺少最后的这个错误\r\n                    // ref.attempt.errors 中包含最后一次错误信息\r\n                    if (!retryAble) {\r\n                        ref.attempt.errors.push(info);\r\n                    }\r\n                }\r\n            }\r\n            return readyToRetry;\r\n        };\r\n        operation.attempt(async () => {\r\n            try {\r\n                const result = await fn(operation.attempts());\r\n                if (!isReadyToRetry(null, result, operation)) {\r\n                    resolve(result);\r\n                }\r\n            }\r\n            catch (e) {\r\n                try {\r\n                    if (!isReadyToRetry(e, null, operation)) {\r\n                        reject(e);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n        }, retryOptions.timeoutOps);\r\n    });\r\n}\r\nexports.withRetry = withRetry;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst EventEmitter = require('events').EventEmitter;\r\nclass RequestTimgingsMeasurer extends EventEmitter {\r\n    constructor(options) {\r\n        super();\r\n        this.e = null;\r\n        this.timings = {\r\n        // start: 0,\r\n        // lookup: -1,\r\n        // connect: -1,\r\n        // ready: -1,\r\n        // waiting: -1,\r\n        // download: -1,\r\n        // end: -1\r\n        };\r\n        this.e = null;\r\n        this.enable = options.enable === true;\r\n        this.timerStarted = false;\r\n        this.intervalId = null;\r\n        this.timeoutId = null;\r\n        this.waitingTime = options.waitingTime || 1000;\r\n        this.interval = options.interval || 200;\r\n    }\r\n    static new(options) {\r\n        return new RequestTimgingsMeasurer(options);\r\n    }\r\n    /* istanbul ignore next */\r\n    measure(clientRequest) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n        this.startTimer();\r\n        const timings = this.timings;\r\n        timings.start = Date.now();\r\n        clientRequest\r\n            .once('response', message => {\r\n            timings.response = Date.now();\r\n            timings.waiting = Date.now() - timings.start;\r\n            message.once('end', () => {\r\n                timings.socket = timings.socket || 0;\r\n                // timings.lookup = timings.lookup || timings.socket\r\n                // timings.connect = timings.connect || timings.lookup\r\n                timings.download = Date.now() - timings.response;\r\n                timings.end = Date.now() - timings.start;\r\n                this.stopTimer('end');\r\n            });\r\n        })\r\n            .once('socket', socket => {\r\n            timings.socket = Date.now() - timings.start;\r\n            const onlookup = () => {\r\n                this.timings.lookup = Date.now() - this.timings.start;\r\n            };\r\n            const onconnect = () => {\r\n                this.timings.connect = Date.now() - this.timings.start;\r\n            };\r\n            const onready = () => {\r\n                this.timings.ready = Date.now() - this.timings.start;\r\n            };\r\n            if (socket.connecting) {\r\n                socket.once('lookup', onlookup);\r\n                socket.once('connect', onconnect);\r\n                socket.once('ready', onready);\r\n                socket.once('error', e => {\r\n                    socket.off('lookup', onlookup);\r\n                    socket.off('connect', onconnect);\r\n                    socket.off('ready', onready);\r\n                    this.e = e;\r\n                    this.timings.error = Date.now() - this.timings.start;\r\n                    this.stopTimer(`ee:${e.message}`);\r\n                });\r\n            }\r\n            else {\r\n                this.timings.lookup = -1;\r\n                this.timings.connect = -1;\r\n                this.timings.ready = -1;\r\n            }\r\n            // socket.once('data', () => {})\r\n            // socket.once('drain', () => {})\r\n            // socket.once('end', () => {\r\n            //   this.stopTimer('end')\r\n            // })\r\n            // socket.once('timeout', () => {\r\n            //   this.timings.timeout = Date.now() - this.timings.start\r\n            // })\r\n        })\r\n            .on('error', (e) => {\r\n            this.stopTimer(`ee:${e.message}`);\r\n        });\r\n    }\r\n    /* istanbul ignore next */\r\n    startTimer() {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n        if (this.timerStarted) {\r\n            return;\r\n        }\r\n        this.timerStarted = true;\r\n        this.intervalId = null;\r\n        this.timeoutId = setTimeout(() => {\r\n            this.process('inprogress');\r\n            this.intervalId = setInterval(() => {\r\n                this.process('inprogress');\r\n            }, this.interval);\r\n        }, this.waitingTime);\r\n    }\r\n    /* istanbul ignore next */\r\n    stopTimer(reason) {\r\n        // if (!this.enable) {\r\n        //   return\r\n        // }\r\n        // if (!this.timerStarted) {\r\n        //   return\r\n        // }\r\n        this.timerStarted = false;\r\n        clearTimeout(this.timeoutId);\r\n        clearInterval(this.intervalId);\r\n        this.process(reason);\r\n    }\r\n    /* istanbul ignore next */\r\n    process(reason) {\r\n        this.emit('progress', Object.assign({}, this.timings), reason);\r\n    }\r\n}\r\nexports.RequestTimgingsMeasurer = RequestTimgingsMeasurer;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 处理wxopenapi返回\r\n *\r\n * @param err\r\n * @param response\r\n * @param body\r\n */\r\nexports.handleWxOpenApiData = (res, err, response, body) => {\r\n    // wx.openApi 调用时，需用content-type区分buffer or JSON\r\n    const { headers } = response;\r\n    let transformRes = res;\r\n    if (headers['content-type'] === 'application/json; charset=utf-8') {\r\n        transformRes = JSON.parse(transformRes.toString()); // JSON错误时buffer转JSON\r\n    }\r\n    return transformRes;\r\n};\r\n","\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// 由定时触发器触发时（TRIGGER_SRC=timer）：优先使用 WX_TRIGGER_API_TOKEN_V0，不存在的话，为了兼容兼容旧的开发者工具，也是使用 WX_API_TOKEN\r\n// 非定时触发器触发时（TRIGGER_SRC!=timer）: 使用 WX_API_TOKEN\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst utils = __importStar(require(\"./utils\"));\r\nconst fs = __importStar(require(\"fs\"));\r\nexports.CLOUDBASE_ACCESS_TOKEN_PATH = '/.tencentcloudbase/wx/cloudbase_access_token';\r\nfunction getWxCloudToken() {\r\n    const { TRIGGER_SRC, WX_TRIGGER_API_TOKEN_V0, WX_API_TOKEN, WX_CLOUDBASE_ACCESSTOKEN = '' } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n    const wxCloudToken = {};\r\n    if (TRIGGER_SRC === 'timer') {\r\n        wxCloudToken.wxCloudApiToken = WX_TRIGGER_API_TOKEN_V0 || WX_API_TOKEN || '';\r\n    }\r\n    else {\r\n        wxCloudToken.wxCloudApiToken = WX_API_TOKEN || '';\r\n    }\r\n    // 只在不存在 wxCloudApiToken 时，才尝试读取 wxCloudbaseAccesstoken\r\n    if (!wxCloudToken.wxCloudApiToken) {\r\n        wxCloudToken.wxCloudbaseAccesstoken = WX_CLOUDBASE_ACCESSTOKEN || loadWxCloudbaseAccesstoken();\r\n    }\r\n    return wxCloudToken;\r\n}\r\nexports.getWxCloudToken = getWxCloudToken;\r\nconst maxCacheAge = 10 * 60 * 1000;\r\nconst cloudbaseAccessTokenInfo = { token: '', timestamp: 0 };\r\nfunction loadWxCloudbaseAccesstoken() {\r\n    if (cloudbaseAccessTokenInfo.token && Date.now() - cloudbaseAccessTokenInfo.timestamp < maxCacheAge) {\r\n        return cloudbaseAccessTokenInfo.token;\r\n    }\r\n    try {\r\n        if (utils.checkIsInEks() && fs.existsSync(exports.CLOUDBASE_ACCESS_TOKEN_PATH)) {\r\n            cloudbaseAccessTokenInfo.token = fs.readFileSync(exports.CLOUDBASE_ACCESS_TOKEN_PATH).toString();\r\n            cloudbaseAccessTokenInfo.timestamp = Date.now();\r\n            return cloudbaseAccessTokenInfo.token;\r\n        }\r\n    }\r\n    catch (e) {\r\n        console.warn('[ERROR]: loadWxCloudbaseAccesstoken error: ', e.message);\r\n    }\r\n    return '';\r\n}\r\nexports.loadWxCloudbaseAccesstoken = loadWxCloudbaseAccesstoken;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = __importDefault(require(\"request\"));\r\nconst metadata_1 = require(\"./metadata\");\r\n/**\r\n * 容器托管内的密钥管理器\r\n */\r\nclass SecretManager {\r\n    constructor() {\r\n        this.TMP_SECRET_URL = `${metadata_1.kMetadataBaseUrl}/meta-data/cam/security-credentials/TCB_QcsRole`;\r\n        this.tmpSecret = null;\r\n    }\r\n    /* istanbul ignore next */\r\n    async getTmpSecret() {\r\n        if (this.tmpSecret) {\r\n            const now = new Date().getTime();\r\n            const expire = this.tmpSecret.expire * 1000;\r\n            const oneHour = 3600 * 1000;\r\n            if (now < expire - oneHour) {\r\n                // 密钥没过期\r\n                return this.tmpSecret;\r\n            }\r\n            else {\r\n                // 密钥过期\r\n                return this.fetchTmpSecret();\r\n            }\r\n        }\r\n        else {\r\n            return this.fetchTmpSecret();\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    async fetchTmpSecret() {\r\n        const body = await this.get(this.TMP_SECRET_URL);\r\n        const payload = JSON.parse(body);\r\n        this.tmpSecret = {\r\n            id: payload.TmpSecretId,\r\n            key: payload.TmpSecretKey,\r\n            expire: payload.ExpiredTime,\r\n            token: payload.Token\r\n        };\r\n        return this.tmpSecret;\r\n    }\r\n    /* istanbul ignore next */\r\n    get(url) {\r\n        return new Promise((resolve, reject) => {\r\n            request_1.default.get(url, (err, res, body) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(body);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.default = SecretManager;\r\n","module.exports = {\r\n    \"name\": \"@cloudbase/node-sdk\",\r\n    \"version\": \"2.9.1\",\r\n    \"description\": \"tencent cloud base server sdk for node.js\",\r\n    \"main\": \"lib/index.js\",\r\n    \"scripts\": {\r\n        \"eslint\": \"eslint \\\"./**/*.ts\\\"\",\r\n        \"eslint-fix\": \"eslint --fix \\\"./**/*.ts\\\"\",\r\n        \"build\": \"rm -rf lib/* && npm run tsc\",\r\n        \"tsc\": \"tsc -p tsconfig.json\",\r\n        \"tsc:w\": \"tsc -p tsconfig.json -w\",\r\n        \"tstest\": \"mocha --timeout 5000 --require espower-typescript/guess test/**/*.test.ts\",\r\n        \"test\": \"jest --detectOpenHandles --verbose --coverage --runInBand\",\r\n        \"coverage\": \"jest --detectOpenHandles --coverage\",\r\n        \"coveralls\": \"cat ./coverage/lcov.info | coveralls\"\r\n    },\r\n    \"repository\": {\r\n        \"type\": \"git\",\r\n        \"url\": \"https://github.com/TencentCloudBase/node-sdk\"\r\n    },\r\n    \"bugs\": {\r\n        \"url\": \"https://github.com/TencentCloudBase/node-sdk/issues\"\r\n    },\r\n    \"homepage\": \"https://github.com/TencentCloudBase/node-sdk#readme\",\r\n    \"keywords\": [\r\n        \"node sdk\"\r\n    ],\r\n    \"author\": \"lukejyhuang\",\r\n    \"license\": \"MIT\",\r\n    \"typings\": \"types/index.d.ts\",\r\n    \"dependencies\": {\r\n        \"@cloudbase/database\": \"1.4.1\",\r\n        \"@cloudbase/signature-nodejs\": \"1.0.0-beta.0\",\r\n        \"@types/retry\": \"^0.12.0\",\r\n        \"agentkeepalive\": \"^4.1.3\",\r\n        \"axios\": \"^0.21.1\",\r\n        \"is-regex\": \"^1.0.4\",\r\n        \"jsonwebtoken\": \"^8.5.1\",\r\n        \"lodash.merge\": \"^4.6.1\",\r\n        \"request\": \"^2.87.0\",\r\n        \"request-promise\": \"^4.2.5\",\r\n        \"retry\": \"^0.12.0\",\r\n        \"ts-node\": \"^8.10.2\",\r\n        \"xml2js\": \"^0.4.19\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"@types/jest\": \"^23.1.4\",\r\n        \"@types/mocha\": \"^5.2.4\",\r\n        \"@types/node\": \"^10.12.12\",\r\n        \"@typescript-eslint/eslint-plugin\": \"^2.16.0\",\r\n        \"@typescript-eslint/parser\": \"^2.16.0\",\r\n        \"babel-eslint\": \"^10.0.3\",\r\n        \"coveralls\": \"^3.0.9\",\r\n        \"dumper.js\": \"^1.3.0\",\r\n        \"eslint\": \"^7.1.0\",\r\n        \"eslint-config-alloy\": \"^3.5.0\",\r\n        \"eslint-plugin-prettier\": \"^3.1.2\",\r\n        \"husky\": \"^3.1.0\",\r\n        \"jest\": \"^23.3.0\",\r\n        \"lint-staged\": \"^9.2.5\",\r\n        \"mocha\": \"^5.2.0\",\r\n        \"power-assert\": \"^1.5.0\",\r\n        \"prettier\": \"^1.19.1\",\r\n        \"ts-jest\": \"^23.10.4\",\r\n        \"tslib\": \"^1.7.1\",\r\n        \"typescript\": \"3.5.3\"\r\n    },\r\n    \"engines\": {\r\n        \"node\": \">=8.6.0\"\r\n    },\r\n    \"husky\": {\r\n        \"hooks\": {\r\n            \"pre-commit\": \"npm run build && git add . && lint-staged\"\r\n        }\r\n    },\r\n    \"lint-staged\": {\r\n        \"*.ts\": [\r\n            \"eslint --fix\",\r\n            \"git add\"\r\n        ]\r\n    }\r\n}\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst jsonwebtoken_1 = __importDefault(require(\"jsonwebtoken\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst symbol_1 = require(\"../const/symbol\");\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst checkCustomUserIdRegex = /^[a-zA-Z0-9_\\-#@~=*(){}[\\]:.,<>+]{4,32}$/;\r\nfunction validateUid(uid) {\r\n    if (typeof uid !== 'string') {\r\n        // console.log('debug:', { ...ERROR.INVALID_PARAM, message: 'uid must be a string' })\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'uid must be a string' }));\r\n    }\r\n    if (!checkCustomUserIdRegex.test(uid)) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: `Invalid uid: \"${uid}\"` }));\r\n    }\r\n}\r\nfunction auth(cloudbase) {\r\n    return {\r\n        getUserInfo() {\r\n            const { WX_OPENID, WX_APPID, TCB_UUID, TCB_CUSTOM_USER_ID, TCB_ISANONYMOUS_USER } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n            return {\r\n                openId: WX_OPENID || '',\r\n                appId: WX_APPID || '',\r\n                uid: TCB_UUID || '',\r\n                customUserId: TCB_CUSTOM_USER_ID || '',\r\n                isAnonymous: TCB_ISANONYMOUS_USER === 'true' ? true : false\r\n            };\r\n        },\r\n        getEndUserInfo(uid, opts) {\r\n            const { WX_OPENID, WX_APPID, TCB_UUID, TCB_CUSTOM_USER_ID, TCB_ISANONYMOUS_USER } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n            const defaultUserInfo = {\r\n                openId: WX_OPENID || '',\r\n                appId: WX_APPID || '',\r\n                uid: TCB_UUID || '',\r\n                customUserId: TCB_CUSTOM_USER_ID || '',\r\n                isAnonymous: TCB_ISANONYMOUS_USER === 'true' ? true : false\r\n            };\r\n            if (uid === undefined) {\r\n                return {\r\n                    userInfo: defaultUserInfo\r\n                };\r\n            }\r\n            validateUid(uid);\r\n            const params = {\r\n                action: 'auth.getUserInfoForAdmin',\r\n                uuid: uid\r\n            };\r\n            return httpRequest_1.default({\r\n                config: cloudbase.config,\r\n                params,\r\n                method: 'post',\r\n                opts,\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n            }).then(res => {\r\n                if (res.code) {\r\n                    return res;\r\n                }\r\n                return {\r\n                    userInfo: Object.assign({}, defaultUserInfo, res.data),\r\n                    requestId: res.requestId\r\n                };\r\n            });\r\n        },\r\n        queryUserInfo(query, opts) {\r\n            const { uid, platform, platformId } = query;\r\n            const params = {\r\n                action: 'auth.getUserInfoForAdmin',\r\n                uuid: uid,\r\n                platform,\r\n                platformId\r\n            };\r\n            return httpRequest_1.default({\r\n                config: cloudbase.config,\r\n                params,\r\n                method: 'post',\r\n                opts,\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n            }).then(res => {\r\n                if (res.code) {\r\n                    return res;\r\n                }\r\n                return {\r\n                    userInfo: Object.assign({}, res.data),\r\n                    requestId: res.requestId\r\n                };\r\n            });\r\n        },\r\n        async getAuthContext(context) {\r\n            const { TCB_UUID, LOGINTYPE, QQ_OPENID, QQ_APPID } = cloudbase_1.CloudBase.getCloudbaseContext(context);\r\n            const res = {\r\n                uid: TCB_UUID,\r\n                loginType: LOGINTYPE\r\n            };\r\n            if (LOGINTYPE === 'QQ-MINI') {\r\n                res.appId = QQ_APPID;\r\n                res.openId = QQ_OPENID;\r\n            }\r\n            return res;\r\n        },\r\n        getClientIP() {\r\n            const { TCB_SOURCE_IP } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n            return TCB_SOURCE_IP || '';\r\n        },\r\n        createTicket: (uid, options = {}) => {\r\n            validateUid(uid);\r\n            const timestamp = new Date().getTime();\r\n            const { TCB_ENV, SCF_NAMESPACE } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n            const { credentials } = cloudbase.config;\r\n            const { env_id } = credentials;\r\n            let { envName } = cloudbase.config;\r\n            if (!envName) {\r\n                throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'no env in config' }));\r\n            }\r\n            // 检查credentials 是否包含env\r\n            if (!env_id) {\r\n                throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '当前私钥未包含env_id 信息， 请前往腾讯云云开发控制台，获取自定义登录最新私钥' }));\r\n            }\r\n            // 使用symbol时替换为环境变量内的env\r\n            if (envName === symbol_1.SYMBOL_CURRENT_ENV) {\r\n                envName = TCB_ENV || SCF_NAMESPACE;\r\n            }\r\n            // 检查 credentials env 和 init 指定env 是否一致\r\n            if (env_id && env_id !== envName) {\r\n                throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '当前私钥所属环境与 init 指定环境不一致！' }));\r\n            }\r\n            const { refresh = 3600 * 1000, expire = timestamp + 7 * 24 * 60 * 60 * 1000 } = options;\r\n            const token = jsonwebtoken_1.default.sign({\r\n                alg: 'RS256',\r\n                env: envName,\r\n                iat: timestamp,\r\n                exp: timestamp + 10 * 60 * 1000,\r\n                uid,\r\n                refresh,\r\n                expire\r\n            }, credentials.private_key, { algorithm: 'RS256' });\r\n            return credentials.private_key_id + '/@@/' + token;\r\n        }\r\n    };\r\n}\r\nexports.auth = auth;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nfunction validateCrossAccount(config, opts = {}) {\r\n    let getCrossAccountInfo = opts.getCrossAccountInfo || config.getCrossAccountInfo;\r\n    if (getCrossAccountInfo) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'invalid config: getCrossAccountInfo' }));\r\n    }\r\n}\r\nasync function callWxOpenApi(cloudbase, { apiName, apiOptions, cgiName, requestData }, opts) {\r\n    let transformRequestData;\r\n    try {\r\n        transformRequestData = requestData ? JSON.stringify(requestData) : '';\r\n    }\r\n    catch (e) {\r\n        throw utils_1.E(Object.assign({}, e, { code: code_1.ERROR.INVALID_PARAM.code, message: '对象出现了循环引用' }));\r\n    }\r\n    validateCrossAccount(cloudbase.config, opts);\r\n    const params = {\r\n        action: 'wx.api',\r\n        apiName,\r\n        apiOptions,\r\n        cgiName,\r\n        requestData: transformRequestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        let result;\r\n        try {\r\n            result = JSON.parse(res.data.responseData);\r\n        }\r\n        catch (e) {\r\n            result = res.data.responseData;\r\n        }\r\n        return {\r\n            result,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.callWxOpenApi = callWxOpenApi;\r\n/**\r\n * 调用wxopenAPi\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nasync function callCompatibleWxOpenApi(cloudbase, { apiName, apiOptions, cgiName, requestData }, opts) {\r\n    validateCrossAccount(cloudbase.config, opts);\r\n    const params = {\r\n        action: 'wx.openApi',\r\n        apiName,\r\n        apiOptions,\r\n        cgiName,\r\n        requestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        method: 'post',\r\n        headers: { 'content-type': 'multipart/form-data' },\r\n        params,\r\n        isFormData: true,\r\n        opts\r\n    }).then(res => res);\r\n}\r\nexports.callCompatibleWxOpenApi = callCompatibleWxOpenApi;\r\n/**\r\n * wx.wxPayApi 微信支付用\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nasync function callWxPayApi(cloudbase, { apiName, apiOptions, cgiName, requestData }, opts) {\r\n    validateCrossAccount(cloudbase.config, opts);\r\n    const params = {\r\n        action: 'wx.wxPayApi',\r\n        apiName,\r\n        apiOptions,\r\n        cgiName,\r\n        requestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        method: 'post',\r\n        headers: { 'content-type': 'multipart/form-data' },\r\n        params,\r\n        isFormData: true,\r\n        opts\r\n    });\r\n}\r\nexports.callWxPayApi = callWxPayApi;\r\n/**\r\n * wx.wxCallContainerApi\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nasync function wxCallContainerApi(cloudbase, { apiName, apiOptions, cgiName, requestData }, opts) {\r\n    validateCrossAccount(cloudbase.config, opts);\r\n    const params = {\r\n        action: 'wx.wxCallContainerApi',\r\n        apiName,\r\n        apiOptions,\r\n        cgiName,\r\n        requestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        method: 'post',\r\n        headers: { 'content-type': 'multipart/form-data' },\r\n        params,\r\n        isFormData: true,\r\n        opts\r\n    });\r\n}\r\nexports.wxCallContainerApi = wxCallContainerApi;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = __importDefault(require(\"request\"));\r\nconst fs_1 = __importDefault(require(\"fs\"));\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst xml2js_1 = require(\"xml2js\");\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nasync function parseXML(str) {\r\n    return new Promise((resolve, reject) => {\r\n        xml2js_1.parseString(str, (err, result) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.parseXML = parseXML;\r\n/*\r\n * 上传文件\r\n * @param {string} cloudPath 上传后的文件路径\r\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\r\n */\r\nasync function uploadFile(cloudbase, { cloudPath, fileContent }, opts) {\r\n    const { data: { url, token, authorization, fileId, cosFileId } } = await getUploadMetadata(cloudbase, { cloudPath }, opts);\r\n    const formData = {\r\n        Signature: authorization,\r\n        'x-cos-security-token': token,\r\n        'x-cos-meta-fileid': cosFileId,\r\n        key: cloudPath,\r\n        file: fileContent\r\n    };\r\n    let body = await new Promise((resolve, reject) => {\r\n        request_1.default({\r\n            method: 'post',\r\n            url,\r\n            formData: formData,\r\n            proxy: cloudbase.config.proxy\r\n        }, function (err, res, body) {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(body);\r\n            }\r\n        });\r\n    });\r\n    body = await parseXML(body);\r\n    if (body && body.Error) {\r\n        const { Code: [code], Message: [message] } = body.Error;\r\n        if (code === 'SignatureDoesNotMatch') {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.SYS_ERR, { message }));\r\n        }\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.STORAGE_REQUEST_FAIL, { message }));\r\n    }\r\n    return {\r\n        fileID: fileId\r\n    };\r\n}\r\nexports.uploadFile = uploadFile;\r\n/**\r\n * 删除文件\r\n * @param {Array.<string>} fileList 文件id数组\r\n */\r\nasync function deleteFile(cloudbase, { fileList }, opts) {\r\n    if (!fileList || !Array.isArray(fileList)) {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'fileList必须是非空的数组' }));\r\n    }\r\n    for (let file of fileList) {\r\n        if (!file || typeof file !== 'string') {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'fileList的元素必须是非空的字符串' }));\r\n        }\r\n    }\r\n    let params = {\r\n        action: 'storage.batchDeleteFile',\r\n        fileid_list: fileList\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        return {\r\n            fileList: res.data.delete_list,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.deleteFile = deleteFile;\r\n/**\r\n * 获取文件下载链接\r\n * @param {Array.<Object>} fileList\r\n */\r\nasync function getTempFileURL(cloudbase, { fileList }, opts) {\r\n    if (!fileList || !Array.isArray(fileList)) {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'fileList必须是非空的数组' }));\r\n    }\r\n    let file_list = [];\r\n    for (let file of fileList) {\r\n        if (typeof file === 'object') {\r\n            if (!file.hasOwnProperty('fileID') || !file.hasOwnProperty('maxAge')) {\r\n                return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'fileList的元素如果是对象，必须是包含fileID和maxAge的对象' }));\r\n            }\r\n            file_list.push({\r\n                fileid: file.fileID,\r\n                max_age: file.maxAge\r\n            });\r\n        }\r\n        else if (typeof file === 'string') {\r\n            file_list.push({\r\n                fileid: file\r\n            });\r\n        }\r\n        else {\r\n            return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'fileList的元素如果不是对象，则必须是字符串' }));\r\n        }\r\n    }\r\n    let params = {\r\n        action: 'storage.batchGetDownloadUrl',\r\n        file_list\r\n    };\r\n    // console.log(params);\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    }).then(res => {\r\n        if (res.code) {\r\n            return res;\r\n        }\r\n        // if (res.code) {\r\n        //     throw E({ ...res })\r\n        // } else {\r\n        return {\r\n            fileList: res.data.download_list,\r\n            requestId: res.requestId\r\n        };\r\n        // }\r\n    });\r\n}\r\nexports.getTempFileURL = getTempFileURL;\r\nasync function downloadFile(cloudbase, params, opts) {\r\n    let tmpUrl;\r\n    const { fileID, tempFilePath } = params;\r\n    const tmpUrlRes = await getTempFileURL(cloudbase, {\r\n        fileList: [\r\n            {\r\n                fileID,\r\n                maxAge: 600\r\n            }\r\n        ]\r\n    }, opts);\r\n    // console.log(tmpUrlRes);\r\n    const res = tmpUrlRes.fileList[0];\r\n    if (res.code !== 'SUCCESS') {\r\n        return utils_1.processReturn(cloudbase.config.throwOnCode, Object.assign({}, res));\r\n    }\r\n    tmpUrl = res.tempFileURL;\r\n    tmpUrl = encodeURI(tmpUrl);\r\n    let req = request_1.default({\r\n        url: tmpUrl,\r\n        encoding: null,\r\n        proxy: cloudbase.config.proxy\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        let fileContent = Buffer.alloc(0);\r\n        req.on('response', function (response) {\r\n            /* istanbul ignore else  */\r\n            if (response && Number(response.statusCode) === 200) {\r\n                if (tempFilePath) {\r\n                    response.pipe(fs_1.default.createWriteStream(tempFilePath));\r\n                }\r\n                else {\r\n                    response.on('data', data => {\r\n                        fileContent = Buffer.concat([fileContent, data]);\r\n                    });\r\n                }\r\n                response.on('end', () => {\r\n                    resolve({\r\n                        fileContent: tempFilePath ? undefined : fileContent,\r\n                        message: '文件下载完成'\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(response);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.downloadFile = downloadFile;\r\nasync function getUploadMetadata(cloudbase, { cloudPath }, opts) {\r\n    let params = {\r\n        action: 'storage.getUploadMetadata',\r\n        path: cloudPath\r\n    };\r\n    const res = await httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        opts,\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    });\r\n    // if (res.code) {\r\n    //     throw E({\r\n    //         ...ERROR.STORAGE_REQUEST_FAIL,\r\n    //         message: 'get upload metadata failed: ' + res.code\r\n    //     })\r\n    // } else {\r\n    return res;\r\n    // }\r\n}\r\nexports.getUploadMetadata = getUploadMetadata;\r\nasync function getFileAuthority(cloudbase, { fileList }, opts) {\r\n    const { LOGINTYPE } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n    if (!Array.isArray(fileList)) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '[node-sdk] getCosFileAuthority fileList must be a array' }));\r\n    }\r\n    if (fileList.some(file => {\r\n        if (!file || !file.path) {\r\n            return true;\r\n        }\r\n        if (['READ', 'WRITE', 'READWRITE'].indexOf(file.type) === -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    })) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '[node-sdk] getCosFileAuthority fileList param error' }));\r\n    }\r\n    const userInfo = cloudbase.auth().getUserInfo();\r\n    const { openId, uid } = userInfo;\r\n    if (!openId && !uid) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '[node-sdk] admin do not need getCosFileAuthority.' }));\r\n    }\r\n    let params = {\r\n        action: 'storage.getFileAuthority',\r\n        openId,\r\n        uid,\r\n        loginType: LOGINTYPE,\r\n        fileList\r\n    };\r\n    const res = await httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    });\r\n    if (res.code) {\r\n        /* istanbul ignore next  */\r\n        throw utils_1.E(Object.assign({}, res, { message: '[node-sdk] getCosFileAuthority failed: ' + res.code }));\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\nexports.getFileAuthority = getFileAuthority;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"../utils/httpRequest\"));\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\nconst reportTypes = ['mall'];\r\nfunction validateAnalyticsData(data) {\r\n    if (Object.prototype.toString.call(data).slice(8, -1) !== 'Object') {\r\n        return false;\r\n    }\r\n    const { report_data, report_type } = data;\r\n    if (reportTypes.includes(report_type) === false) {\r\n        return false;\r\n    }\r\n    if (Object.prototype.toString.call(report_data).slice(8, -1) !== 'Object') {\r\n        return false;\r\n    }\r\n    if (report_data.action_time !== undefined && !Number.isInteger(report_data.action_time)) {\r\n        return false;\r\n    }\r\n    if (typeof report_data.action_type !== 'string') {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nasync function analytics(cloudbase, requestData) {\r\n    // 获取openid, wxappid\r\n    const { WX_OPENID, WX_APPID, } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n    if (!validateAnalyticsData(requestData)) {\r\n        throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: '当前的上报数据结构不符合规范' }));\r\n    }\r\n    const action_time = requestData.report_data.action_time === undefined ? Math.floor(Date.now() / 1000) : requestData.report_data.action_time;\r\n    const transformRequestData = {\r\n        analytics_scene: requestData.report_type,\r\n        analytics_data: Object.assign({ openid: WX_OPENID, wechat_mini_program_appid: WX_APPID }, requestData.report_data, { action_time })\r\n    };\r\n    const params = {\r\n        action: 'analytics.report',\r\n        requestData: transformRequestData\r\n    };\r\n    return httpRequest_1.default({\r\n        config: cloudbase.config,\r\n        params,\r\n        method: 'post',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        }\r\n    });\r\n}\r\nexports.analytics = analytics;\r\n","\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst httpRequest_1 = __importDefault(require(\"./httpRequest\"));\r\n/**\r\n * 数据库模块的通用请求方法\r\n *\r\n * @author haroldhu\r\n * @internal\r\n */\r\nclass DBRequest {\r\n    /**\r\n     * 初始化\r\n     *\r\n     * @internal\r\n     * @param config\r\n     */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * 发送请求\r\n     *\r\n     * @param dbParams   - 数据库请求参数\r\n     * @param opts  - 可选配置项\r\n     */\r\n    async send(api, data, opts) {\r\n        const params = Object.assign({}, data, { action: api });\r\n        return httpRequest_1.default({\r\n            config: this.config,\r\n            params,\r\n            method: 'post',\r\n            opts,\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.DBRequest = DBRequest;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst code_1 = require(\"../const/code\");\r\nconst cloudbase_1 = require(\"../cloudbase\");\r\n/**\r\n *\r\n *\r\n * @class Log\r\n */\r\nclass Log {\r\n    constructor() {\r\n        const { _SCF_TCB_LOG } = cloudbase_1.CloudBase.getCloudbaseContext();\r\n        this.src = 'app';\r\n        this.isSupportClsReport = true;\r\n        if (`${_SCF_TCB_LOG}` !== '1') {\r\n            this.isSupportClsReport = false;\r\n        }\r\n        else if (!console.__baseLog__) {\r\n            this.isSupportClsReport = false;\r\n        }\r\n        if (!this.isSupportClsReport) {\r\n            // 当前非tcb scf环境  log功能会退化为console\r\n            console.warn('请检查您是否在本地环境 或者 未开通高级日志功能，当前环境下无法上报cls日志，默认使用console');\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @param {*} logLevel\r\n     * @returns\r\n     * @memberof Log\r\n     */\r\n    transformMsg(logMsg) {\r\n        // 目前logMsg只支持字符串value且不支持多级, 加一层转换处理\r\n        let realMsg = {};\r\n        realMsg = Object.assign({}, realMsg, logMsg);\r\n        return realMsg;\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @param {*} logLevel\r\n     * @memberof Log\r\n     */\r\n    baseLog(logMsg, logLevel) {\r\n        // 判断当前是否属于tcb scf环境\r\n        if (Object.prototype.toString.call(logMsg).slice(8, -1) !== 'Object') {\r\n            throw utils_1.E(Object.assign({}, code_1.ERROR.INVALID_PARAM, { message: 'log msg must be an object' }));\r\n        }\r\n        const msgContent = this.transformMsg(logMsg);\r\n        if (this.isSupportClsReport) {\r\n            ;\r\n            console.__baseLog__(msgContent, logLevel);\r\n        }\r\n        else {\r\n            if (console[logLevel]) {\r\n                console[logLevel](msgContent);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    log(logMsg) {\r\n        this.baseLog(logMsg, 'log');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    info(logMsg) {\r\n        this.baseLog(logMsg, 'info');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    error(logMsg) {\r\n        this.baseLog(logMsg, 'error');\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * @param {*} logMsg\r\n     * @memberof Log\r\n     */\r\n    warn(logMsg) {\r\n        this.baseLog(logMsg, 'warn');\r\n    }\r\n}\r\nexports.Log = Log;\r\nfunction logger() {\r\n    return new Log();\r\n}\r\nexports.logger = logger;\r\n"]}
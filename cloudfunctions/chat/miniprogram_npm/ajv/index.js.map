{"version":3,"sources":["ajv.js","compile/index.js","compile/resolve.js","compile/util.js","compile/ucs2length.js","compile/schema_obj.js","compile/error_classes.js","dotjs/validate.js","cache.js","compile/formats.js","compile/rules.js","dotjs/index.js","dotjs/ref.js","dotjs/allOf.js","dotjs/anyOf.js","dotjs/comment.js","dotjs/const.js","dotjs/contains.js","dotjs/dependencies.js","dotjs/enum.js","dotjs/format.js","dotjs/if.js","dotjs/items.js","dotjs/_limit.js","dotjs/_limitItems.js","dotjs/_limitLength.js","dotjs/_limitProperties.js","dotjs/multipleOf.js","dotjs/not.js","dotjs/oneOf.js","dotjs/pattern.js","dotjs/properties.js","dotjs/propertyNames.js","dotjs/required.js","dotjs/uniqueItems.js","data.js","compile/async.js","keyword.js","dotjs/custom.js","definition_schema.js","refs/json-schema-draft-07.json","refs/data.json"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,ACHA,AENA,ADGA;AHUA,ACHA,ACHA,AGTA,ADGA,ADGA;AHUA,ACHA,ACHA,AGTA,ADGA,ADGA;AHUA,ACHA,ACHA,AGTA,ADGA,ADGA;AHUA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA;AHUA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA;AHUA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA;AHUA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA,AIZA;APsBA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA,AIZA;APsBA,AMlBA,ALeA,ACHA,AGTA,ADGA,ADGA,AIZA;APsBA,AQxBA,AFMA,ALeA,ACHA,AGTA,ADGA,ADGA,AIZA;APsBA,AQxBA,AFMA,ALeA,ACHA,AENA,ADGA,AIZA;APsBA,AQxBA,AFMA,ALeA,ACHA,AENA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AENA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AENA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AENA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,ANkBA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,ANkBA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,ANkBA,ADGA,AIZA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,AJYA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,AJYA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,AJYA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AQxBA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,AFMA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,AFMA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,AFMA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AHSA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AHSA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AHSA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,AJYA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,AJYA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,AJYA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ALeA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ALeA,ACHA,ALeA;APsBA,AQxBA,AFMA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ALeA,ACHA,ALeA;APsBA,AMlBA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,ALeA;APsBA,AMlBA,AGTA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ANkBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,APqBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ARwBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ARwBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,ARwBA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,AT2BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ACHA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,AWjCA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AU9BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,AV8BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,AV8BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,AV8BA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,AXiCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,AXiCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,AXiCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,AZoCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,AZoCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,AZoCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AbuCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AbuCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AbuCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AV8BA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AbuCA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,Af6CA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,Af6CA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,Af6CA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,AhBgDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,AhBgDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,AhBgDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,AjBmDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,AjBmDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,AjBmDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,AlBsDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,AlBsDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,AlBsDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,AnByDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,AnByDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,AnByDA,ALeA;APsBA,AS3BA,ARwBA,ACHA,AQxBA,APqBA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,ALeA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,ALeA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,ALeA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,A1B8EA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,A1B8EA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,A1B8EA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AoB5DA,ACHA,ACHA,ACHA,AZoCA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AS3BA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA;APsBA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,ACHA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AZoCA,AGTA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AZoCA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA;ArCgHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,ACHA,ACHA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AT2BA,AqB/DA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AIZA,ADGA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,ACHA,ACHA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AgChGA,AIZA,AhBgDA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,ACHA,AYpCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,AavCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,AENA,AavCA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,ACHA,ACHA,ACHA,ACHA,ApB4DA,AqB/DA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AKfA,ACHA,AENA,ACHA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AMlBA,AENA,ACHA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AMlBA,AENA,ACHA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AMlBA,AENA,ACHA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AMlBA,AENA,ACHA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,ACHA,ACHA,AMlBA,AGTA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AMlBA,AGTA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AMlBA,AGTA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,A3BiFA,ARwBA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,ACHA,ACHA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,ACHA,A3BiFA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,AoC5GA,AnCyGA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AENA,AS3BA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AWjCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AWjCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AWjCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AENA,AWjCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,ApB4DA,AavCA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AoB5DA,Ae7CA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,ACHA,AmCzGA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,A8B1FA,AGTA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,ACHA,AoC5GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA,AiCnGA;AxCyHA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,AqC/GA,APqBA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AENA,A1B8EA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,ACHA,A8B1FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,A+B7FA,AxBwEA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA,AOrBA;APsBA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nvar compileSchema = require('./compile')\r\n  , resolve = require('./compile/resolve')\r\n  , Cache = require('./cache')\r\n  , SchemaObject = require('./compile/schema_obj')\r\n  , stableStringify = require('fast-json-stable-stringify')\r\n  , formats = require('./compile/formats')\r\n  , rules = require('./compile/rules')\r\n  , $dataMetaSchema = require('./data')\r\n  , util = require('./compile/util');\r\n\r\nmodule.exports = Ajv;\r\n\r\nAjv.prototype.validate = validate;\r\nAjv.prototype.compile = compile;\r\nAjv.prototype.addSchema = addSchema;\r\nAjv.prototype.addMetaSchema = addMetaSchema;\r\nAjv.prototype.validateSchema = validateSchema;\r\nAjv.prototype.getSchema = getSchema;\r\nAjv.prototype.removeSchema = removeSchema;\r\nAjv.prototype.addFormat = addFormat;\r\nAjv.prototype.errorsText = errorsText;\r\n\r\nAjv.prototype._addSchema = _addSchema;\r\nAjv.prototype._compile = _compile;\r\n\r\nAjv.prototype.compileAsync = require('./compile/async');\r\nvar customKeyword = require('./keyword');\r\nAjv.prototype.addKeyword = customKeyword.add;\r\nAjv.prototype.getKeyword = customKeyword.get;\r\nAjv.prototype.removeKeyword = customKeyword.remove;\r\nAjv.prototype.validateKeyword = customKeyword.validate;\r\n\r\nvar errorClasses = require('./compile/error_classes');\r\nAjv.ValidationError = errorClasses.Validation;\r\nAjv.MissingRefError = errorClasses.MissingRef;\r\nAjv.$dataMetaSchema = $dataMetaSchema;\r\n\r\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\r\n\r\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\r\nvar META_SUPPORT_DATA = ['/properties'];\r\n\r\n/**\r\n * Creates validator instance.\r\n * Usage: `Ajv(opts)`\r\n * @param {Object} opts optional options\r\n * @return {Object} ajv instance\r\n */\r\nfunction Ajv(opts) {\r\n  if (!(this instanceof Ajv)) return new Ajv(opts);\r\n  opts = this._opts = util.copy(opts) || {};\r\n  setLogger(this);\r\n  this._schemas = {};\r\n  this._refs = {};\r\n  this._fragments = {};\r\n  this._formats = formats(opts.format);\r\n\r\n  this._cache = opts.cache || new Cache;\r\n  this._loadingSchemas = {};\r\n  this._compilations = [];\r\n  this.RULES = rules();\r\n  this._getId = chooseGetId(opts);\r\n\r\n  opts.loopRequired = opts.loopRequired || Infinity;\r\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\r\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\r\n  this._metaOpts = getMetaSchemaOptions(this);\r\n\r\n  if (opts.formats) addInitialFormats(this);\r\n  if (opts.keywords) addInitialKeywords(this);\r\n  addDefaultMetaSchema(this);\r\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\r\n  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\r\n  addInitialSchemas(this);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Validate data using schema\r\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\r\n * @this   Ajv\r\n * @param  {String|Object} schemaKeyRef key, ref or schema object\r\n * @param  {Any} data to be validated\r\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\r\n */\r\nfunction validate(schemaKeyRef, data) {\r\n  var v;\r\n  if (typeof schemaKeyRef == 'string') {\r\n    v = this.getSchema(schemaKeyRef);\r\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\r\n  } else {\r\n    var schemaObj = this._addSchema(schemaKeyRef);\r\n    v = schemaObj.validate || this._compile(schemaObj);\r\n  }\r\n\r\n  var valid = v(data);\r\n  if (v.$async !== true) this.errors = v.errors;\r\n  return valid;\r\n}\r\n\r\n\r\n/**\r\n * Create validating function for passed schema.\r\n * @this   Ajv\r\n * @param  {Object} schema schema object\r\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\r\n * @return {Function} validating function\r\n */\r\nfunction compile(schema, _meta) {\r\n  var schemaObj = this._addSchema(schema, undefined, _meta);\r\n  return schemaObj.validate || this._compile(schemaObj);\r\n}\r\n\r\n\r\n/**\r\n * Adds schema to the instance.\r\n * @this   Ajv\r\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\r\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\r\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\r\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction addSchema(schema, key, _skipValidation, _meta) {\r\n  if (Array.isArray(schema)){\r\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\r\n    return this;\r\n  }\r\n  var id = this._getId(schema);\r\n  if (id !== undefined && typeof id != 'string')\r\n    throw new Error('schema id must be string');\r\n  key = resolve.normalizeId(key || id);\r\n  checkUnique(this, key);\r\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n * Add schema that will be used to validate other schemas\r\n * options in META_IGNORE_OPTIONS are alway set to false\r\n * @this   Ajv\r\n * @param {Object} schema schema object\r\n * @param {String} key optional schema key\r\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction addMetaSchema(schema, key, skipValidation) {\r\n  this.addSchema(schema, key, skipValidation, true);\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n * Validate schema\r\n * @this   Ajv\r\n * @param {Object} schema schema to validate\r\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\r\n * @return {Boolean} true if schema is valid\r\n */\r\nfunction validateSchema(schema, throwOrLogError) {\r\n  var $schema = schema.$schema;\r\n  if ($schema !== undefined && typeof $schema != 'string')\r\n    throw new Error('$schema must be a string');\r\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\r\n  if (!$schema) {\r\n    this.logger.warn('meta-schema not available');\r\n    this.errors = null;\r\n    return true;\r\n  }\r\n  var valid = this.validate($schema, schema);\r\n  if (!valid && throwOrLogError) {\r\n    var message = 'schema is invalid: ' + this.errorsText();\r\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\r\n    else throw new Error(message);\r\n  }\r\n  return valid;\r\n}\r\n\r\n\r\nfunction defaultMeta(self) {\r\n  var meta = self._opts.meta;\r\n  self._opts.defaultMeta = typeof meta == 'object'\r\n                            ? self._getId(meta) || meta\r\n                            : self.getSchema(META_SCHEMA_ID)\r\n                              ? META_SCHEMA_ID\r\n                              : undefined;\r\n  return self._opts.defaultMeta;\r\n}\r\n\r\n\r\n/**\r\n * Get compiled schema from the instance by `key` or `ref`.\r\n * @this   Ajv\r\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\r\n * @return {Function} schema validating function (with property `schema`).\r\n */\r\nfunction getSchema(keyRef) {\r\n  var schemaObj = _getSchemaObj(this, keyRef);\r\n  switch (typeof schemaObj) {\r\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\r\n    case 'string': return this.getSchema(schemaObj);\r\n    case 'undefined': return _getSchemaFragment(this, keyRef);\r\n  }\r\n}\r\n\r\n\r\nfunction _getSchemaFragment(self, ref) {\r\n  var res = resolve.schema.call(self, { schema: {} }, ref);\r\n  if (res) {\r\n    var schema = res.schema\r\n      , root = res.root\r\n      , baseId = res.baseId;\r\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\r\n    self._fragments[ref] = new SchemaObject({\r\n      ref: ref,\r\n      fragment: true,\r\n      schema: schema,\r\n      root: root,\r\n      baseId: baseId,\r\n      validate: v\r\n    });\r\n    return v;\r\n  }\r\n}\r\n\r\n\r\nfunction _getSchemaObj(self, keyRef) {\r\n  keyRef = resolve.normalizeId(keyRef);\r\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\r\n}\r\n\r\n\r\n/**\r\n * Remove cached schema(s).\r\n * If no parameter is passed all schemas but meta-schemas are removed.\r\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\r\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\r\n * @this   Ajv\r\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction removeSchema(schemaKeyRef) {\r\n  if (schemaKeyRef instanceof RegExp) {\r\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\r\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\r\n    return this;\r\n  }\r\n  switch (typeof schemaKeyRef) {\r\n    case 'undefined':\r\n      _removeAllSchemas(this, this._schemas);\r\n      _removeAllSchemas(this, this._refs);\r\n      this._cache.clear();\r\n      return this;\r\n    case 'string':\r\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\r\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\r\n      delete this._schemas[schemaKeyRef];\r\n      delete this._refs[schemaKeyRef];\r\n      return this;\r\n    case 'object':\r\n      var serialize = this._opts.serialize;\r\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\r\n      this._cache.del(cacheKey);\r\n      var id = this._getId(schemaKeyRef);\r\n      if (id) {\r\n        id = resolve.normalizeId(id);\r\n        delete this._schemas[id];\r\n        delete this._refs[id];\r\n      }\r\n  }\r\n  return this;\r\n}\r\n\r\n\r\nfunction _removeAllSchemas(self, schemas, regex) {\r\n  for (var keyRef in schemas) {\r\n    var schemaObj = schemas[keyRef];\r\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\r\n      self._cache.del(schemaObj.cacheKey);\r\n      delete schemas[keyRef];\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/* @this   Ajv */\r\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\r\n  if (typeof schema != 'object' && typeof schema != 'boolean')\r\n    throw new Error('schema should be object or boolean');\r\n  var serialize = this._opts.serialize;\r\n  var cacheKey = serialize ? serialize(schema) : schema;\r\n  var cached = this._cache.get(cacheKey);\r\n  if (cached) return cached;\r\n\r\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\r\n\r\n  var id = resolve.normalizeId(this._getId(schema));\r\n  if (id && shouldAddSchema) checkUnique(this, id);\r\n\r\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\r\n  var recursiveMeta;\r\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\r\n    this.validateSchema(schema, true);\r\n\r\n  var localRefs = resolve.ids.call(this, schema);\r\n\r\n  var schemaObj = new SchemaObject({\r\n    id: id,\r\n    schema: schema,\r\n    localRefs: localRefs,\r\n    cacheKey: cacheKey,\r\n    meta: meta\r\n  });\r\n\r\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\r\n  this._cache.put(cacheKey, schemaObj);\r\n\r\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\r\n\r\n  return schemaObj;\r\n}\r\n\r\n\r\n/* @this   Ajv */\r\nfunction _compile(schemaObj, root) {\r\n  if (schemaObj.compiling) {\r\n    schemaObj.validate = callValidate;\r\n    callValidate.schema = schemaObj.schema;\r\n    callValidate.errors = null;\r\n    callValidate.root = root ? root : callValidate;\r\n    if (schemaObj.schema.$async === true)\r\n      callValidate.$async = true;\r\n    return callValidate;\r\n  }\r\n  schemaObj.compiling = true;\r\n\r\n  var currentOpts;\r\n  if (schemaObj.meta) {\r\n    currentOpts = this._opts;\r\n    this._opts = this._metaOpts;\r\n  }\r\n\r\n  var v;\r\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\r\n  catch(e) {\r\n    delete schemaObj.validate;\r\n    throw e;\r\n  }\r\n  finally {\r\n    schemaObj.compiling = false;\r\n    if (schemaObj.meta) this._opts = currentOpts;\r\n  }\r\n\r\n  schemaObj.validate = v;\r\n  schemaObj.refs = v.refs;\r\n  schemaObj.refVal = v.refVal;\r\n  schemaObj.root = v.root;\r\n  return v;\r\n\r\n\r\n  /* @this   {*} - custom context, see passContext option */\r\n  function callValidate() {\r\n    /* jshint validthis: true */\r\n    var _validate = schemaObj.validate;\r\n    var result = _validate.apply(this, arguments);\r\n    callValidate.errors = _validate.errors;\r\n    return result;\r\n  }\r\n}\r\n\r\n\r\nfunction chooseGetId(opts) {\r\n  switch (opts.schemaId) {\r\n    case 'auto': return _get$IdOrId;\r\n    case 'id': return _getId;\r\n    default: return _get$Id;\r\n  }\r\n}\r\n\r\n/* @this   Ajv */\r\nfunction _getId(schema) {\r\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\r\n  return schema.id;\r\n}\r\n\r\n/* @this   Ajv */\r\nfunction _get$Id(schema) {\r\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\r\n  return schema.$id;\r\n}\r\n\r\n\r\nfunction _get$IdOrId(schema) {\r\n  if (schema.$id && schema.id && schema.$id != schema.id)\r\n    throw new Error('schema $id is different from id');\r\n  return schema.$id || schema.id;\r\n}\r\n\r\n\r\n/**\r\n * Convert array of error message objects to string\r\n * @this   Ajv\r\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\r\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\r\n * @return {String} human readable string with all errors descriptions\r\n */\r\nfunction errorsText(errors, options) {\r\n  errors = errors || this.errors;\r\n  if (!errors) return 'No errors';\r\n  options = options || {};\r\n  var separator = options.separator === undefined ? ', ' : options.separator;\r\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\r\n\r\n  var text = '';\r\n  for (var i=0; i<errors.length; i++) {\r\n    var e = errors[i];\r\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\r\n  }\r\n  return text.slice(0, -separator.length);\r\n}\r\n\r\n\r\n/**\r\n * Add custom format\r\n * @this   Ajv\r\n * @param {String} name format name\r\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction addFormat(name, format) {\r\n  if (typeof format == 'string') format = new RegExp(format);\r\n  this._formats[name] = format;\r\n  return this;\r\n}\r\n\r\n\r\nfunction addDefaultMetaSchema(self) {\r\n  var $dataSchema;\r\n  if (self._opts.$data) {\r\n    $dataSchema = require('./refs/data.json');\r\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\r\n  }\r\n  if (self._opts.meta === false) return;\r\n  var metaSchema = require('./refs/json-schema-draft-07.json');\r\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\r\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\r\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\r\n}\r\n\r\n\r\nfunction addInitialSchemas(self) {\r\n  var optsSchemas = self._opts.schemas;\r\n  if (!optsSchemas) return;\r\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\r\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\r\n}\r\n\r\n\r\nfunction addInitialFormats(self) {\r\n  for (var name in self._opts.formats) {\r\n    var format = self._opts.formats[name];\r\n    self.addFormat(name, format);\r\n  }\r\n}\r\n\r\n\r\nfunction addInitialKeywords(self) {\r\n  for (var name in self._opts.keywords) {\r\n    var keyword = self._opts.keywords[name];\r\n    self.addKeyword(name, keyword);\r\n  }\r\n}\r\n\r\n\r\nfunction checkUnique(self, id) {\r\n  if (self._schemas[id] || self._refs[id])\r\n    throw new Error('schema with key or id \"' + id + '\" already exists');\r\n}\r\n\r\n\r\nfunction getMetaSchemaOptions(self) {\r\n  var metaOpts = util.copy(self._opts);\r\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\r\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\r\n  return metaOpts;\r\n}\r\n\r\n\r\nfunction setLogger(self) {\r\n  var logger = self._opts.logger;\r\n  if (logger === false) {\r\n    self.logger = {log: noop, warn: noop, error: noop};\r\n  } else {\r\n    if (logger === undefined) logger = console;\r\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\r\n      throw new Error('logger must implement log, warn and error methods');\r\n    self.logger = logger;\r\n  }\r\n}\r\n\r\n\r\nfunction noop() {}\r\n","\r\n\r\nvar resolve = require('./resolve')\r\n  , util = require('./util')\r\n  , errorClasses = require('./error_classes')\r\n  , stableStringify = require('fast-json-stable-stringify');\r\n\r\nvar validateGenerator = require('../dotjs/validate');\r\n\r\n/**\r\n * Functions below are used inside compiled validations function\r\n */\r\n\r\nvar ucs2length = util.ucs2length;\r\nvar equal = require('fast-deep-equal');\r\n\r\n// this error is thrown by async schemas to return validation errors via exception\r\nvar ValidationError = errorClasses.Validation;\r\n\r\nmodule.exports = compile;\r\n\r\n\r\n/**\r\n * Compiles schema to validation function\r\n * @this   Ajv\r\n * @param  {Object} schema schema object\r\n * @param  {Object} root object with information about the root schema for this schema\r\n * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution\r\n * @param  {String} baseId base ID for IDs in the schema\r\n * @return {Function} validation function\r\n */\r\nfunction compile(schema, root, localRefs, baseId) {\r\n  /* jshint validthis: true, evil: true */\r\n  /* eslint no-shadow: 0 */\r\n  var self = this\r\n    , opts = this._opts\r\n    , refVal = [ undefined ]\r\n    , refs = {}\r\n    , patterns = []\r\n    , patternsHash = {}\r\n    , defaults = []\r\n    , defaultsHash = {}\r\n    , customRules = [];\r\n\r\n  root = root || { schema: schema, refVal: refVal, refs: refs };\r\n\r\n  var c = checkCompiling.call(this, schema, root, baseId);\r\n  var compilation = this._compilations[c.index];\r\n  if (c.compiling) return (compilation.callValidate = callValidate);\r\n\r\n  var formats = this._formats;\r\n  var RULES = this.RULES;\r\n\r\n  try {\r\n    var v = localCompile(schema, root, localRefs, baseId);\r\n    compilation.validate = v;\r\n    var cv = compilation.callValidate;\r\n    if (cv) {\r\n      cv.schema = v.schema;\r\n      cv.errors = null;\r\n      cv.refs = v.refs;\r\n      cv.refVal = v.refVal;\r\n      cv.root = v.root;\r\n      cv.$async = v.$async;\r\n      if (opts.sourceCode) cv.source = v.source;\r\n    }\r\n    return v;\r\n  } finally {\r\n    endCompiling.call(this, schema, root, baseId);\r\n  }\r\n\r\n  /* @this   {*} - custom context, see passContext option */\r\n  function callValidate() {\r\n    /* jshint validthis: true */\r\n    var validate = compilation.validate;\r\n    var result = validate.apply(this, arguments);\r\n    callValidate.errors = validate.errors;\r\n    return result;\r\n  }\r\n\r\n  function localCompile(_schema, _root, localRefs, baseId) {\r\n    var isRoot = !_root || (_root && _root.schema == _schema);\r\n    if (_root.schema != root.schema)\r\n      return compile.call(self, _schema, _root, localRefs, baseId);\r\n\r\n    var $async = _schema.$async === true;\r\n\r\n    var sourceCode = validateGenerator({\r\n      isTop: true,\r\n      schema: _schema,\r\n      isRoot: isRoot,\r\n      baseId: baseId,\r\n      root: _root,\r\n      schemaPath: '',\r\n      errSchemaPath: '#',\r\n      errorPath: '\"\"',\r\n      MissingRefError: errorClasses.MissingRef,\r\n      RULES: RULES,\r\n      validate: validateGenerator,\r\n      util: util,\r\n      resolve: resolve,\r\n      resolveRef: resolveRef,\r\n      usePattern: usePattern,\r\n      useDefault: useDefault,\r\n      useCustomRule: useCustomRule,\r\n      opts: opts,\r\n      formats: formats,\r\n      logger: self.logger,\r\n      self: self\r\n    });\r\n\r\n    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)\r\n                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)\r\n                   + sourceCode;\r\n\r\n    if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema);\r\n    // console.log('\\n\\n\\n *** \\n', JSON.stringify(sourceCode));\r\n    var validate;\r\n    try {\r\n      var makeValidate = new Function(\r\n        'self',\r\n        'RULES',\r\n        'formats',\r\n        'root',\r\n        'refVal',\r\n        'defaults',\r\n        'customRules',\r\n        'equal',\r\n        'ucs2length',\r\n        'ValidationError',\r\n        sourceCode\r\n      );\r\n\r\n      validate = makeValidate(\r\n        self,\r\n        RULES,\r\n        formats,\r\n        root,\r\n        refVal,\r\n        defaults,\r\n        customRules,\r\n        equal,\r\n        ucs2length,\r\n        ValidationError\r\n      );\r\n\r\n      refVal[0] = validate;\r\n    } catch(e) {\r\n      self.logger.error('Error compiling schema, function code:', sourceCode);\r\n      throw e;\r\n    }\r\n\r\n    validate.schema = _schema;\r\n    validate.errors = null;\r\n    validate.refs = refs;\r\n    validate.refVal = refVal;\r\n    validate.root = isRoot ? validate : _root;\r\n    if ($async) validate.$async = true;\r\n    if (opts.sourceCode === true) {\r\n      validate.source = {\r\n        code: sourceCode,\r\n        patterns: patterns,\r\n        defaults: defaults\r\n      };\r\n    }\r\n\r\n    return validate;\r\n  }\r\n\r\n  function resolveRef(baseId, ref, isRoot) {\r\n    ref = resolve.url(baseId, ref);\r\n    var refIndex = refs[ref];\r\n    var _refVal, refCode;\r\n    if (refIndex !== undefined) {\r\n      _refVal = refVal[refIndex];\r\n      refCode = 'refVal[' + refIndex + ']';\r\n      return resolvedRef(_refVal, refCode);\r\n    }\r\n    if (!isRoot && root.refs) {\r\n      var rootRefId = root.refs[ref];\r\n      if (rootRefId !== undefined) {\r\n        _refVal = root.refVal[rootRefId];\r\n        refCode = addLocalRef(ref, _refVal);\r\n        return resolvedRef(_refVal, refCode);\r\n      }\r\n    }\r\n\r\n    refCode = addLocalRef(ref);\r\n    var v = resolve.call(self, localCompile, root, ref);\r\n    if (v === undefined) {\r\n      var localSchema = localRefs && localRefs[ref];\r\n      if (localSchema) {\r\n        v = resolve.inlineRef(localSchema, opts.inlineRefs)\r\n            ? localSchema\r\n            : compile.call(self, localSchema, root, localRefs, baseId);\r\n      }\r\n    }\r\n\r\n    if (v === undefined) {\r\n      removeLocalRef(ref);\r\n    } else {\r\n      replaceLocalRef(ref, v);\r\n      return resolvedRef(v, refCode);\r\n    }\r\n  }\r\n\r\n  function addLocalRef(ref, v) {\r\n    var refId = refVal.length;\r\n    refVal[refId] = v;\r\n    refs[ref] = refId;\r\n    return 'refVal' + refId;\r\n  }\r\n\r\n  function removeLocalRef(ref) {\r\n    delete refs[ref];\r\n  }\r\n\r\n  function replaceLocalRef(ref, v) {\r\n    var refId = refs[ref];\r\n    refVal[refId] = v;\r\n  }\r\n\r\n  function resolvedRef(refVal, code) {\r\n    return typeof refVal == 'object' || typeof refVal == 'boolean'\r\n            ? { code: code, schema: refVal, inline: true }\r\n            : { code: code, $async: refVal && !!refVal.$async };\r\n  }\r\n\r\n  function usePattern(regexStr) {\r\n    var index = patternsHash[regexStr];\r\n    if (index === undefined) {\r\n      index = patternsHash[regexStr] = patterns.length;\r\n      patterns[index] = regexStr;\r\n    }\r\n    return 'pattern' + index;\r\n  }\r\n\r\n  function useDefault(value) {\r\n    switch (typeof value) {\r\n      case 'boolean':\r\n      case 'number':\r\n        return '' + value;\r\n      case 'string':\r\n        return util.toQuotedString(value);\r\n      case 'object':\r\n        if (value === null) return 'null';\r\n        var valueStr = stableStringify(value);\r\n        var index = defaultsHash[valueStr];\r\n        if (index === undefined) {\r\n          index = defaultsHash[valueStr] = defaults.length;\r\n          defaults[index] = value;\r\n        }\r\n        return 'default' + index;\r\n    }\r\n  }\r\n\r\n  function useCustomRule(rule, schema, parentSchema, it) {\r\n    if (self._opts.validateSchema !== false) {\r\n      var deps = rule.definition.dependencies;\r\n      if (deps && !deps.every(function(keyword) {\r\n        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);\r\n      }))\r\n        throw new Error('parent schema must have all required keywords: ' + deps.join(','));\r\n\r\n      var validateSchema = rule.definition.validateSchema;\r\n      if (validateSchema) {\r\n        var valid = validateSchema(schema);\r\n        if (!valid) {\r\n          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);\r\n          if (self._opts.validateSchema == 'log') self.logger.error(message);\r\n          else throw new Error(message);\r\n        }\r\n      }\r\n    }\r\n\r\n    var compile = rule.definition.compile\r\n      , inline = rule.definition.inline\r\n      , macro = rule.definition.macro;\r\n\r\n    var validate;\r\n    if (compile) {\r\n      validate = compile.call(self, schema, parentSchema, it);\r\n    } else if (macro) {\r\n      validate = macro.call(self, schema, parentSchema, it);\r\n      if (opts.validateSchema !== false) self.validateSchema(validate, true);\r\n    } else if (inline) {\r\n      validate = inline.call(self, it, rule.keyword, schema, parentSchema);\r\n    } else {\r\n      validate = rule.definition.validate;\r\n      if (!validate) return;\r\n    }\r\n\r\n    if (validate === undefined)\r\n      throw new Error('custom keyword \"' + rule.keyword + '\"failed to compile');\r\n\r\n    var index = customRules.length;\r\n    customRules[index] = validate;\r\n\r\n    return {\r\n      code: 'customRule' + index,\r\n      validate: validate\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Checks if the schema is currently compiled\r\n * @this   Ajv\r\n * @param  {Object} schema schema to compile\r\n * @param  {Object} root root object\r\n * @param  {String} baseId base schema ID\r\n * @return {Object} object with properties \"index\" (compilation index) and \"compiling\" (boolean)\r\n */\r\nfunction checkCompiling(schema, root, baseId) {\r\n  /* jshint validthis: true */\r\n  var index = compIndex.call(this, schema, root, baseId);\r\n  if (index >= 0) return { index: index, compiling: true };\r\n  index = this._compilations.length;\r\n  this._compilations[index] = {\r\n    schema: schema,\r\n    root: root,\r\n    baseId: baseId\r\n  };\r\n  return { index: index, compiling: false };\r\n}\r\n\r\n\r\n/**\r\n * Removes the schema from the currently compiled list\r\n * @this   Ajv\r\n * @param  {Object} schema schema to compile\r\n * @param  {Object} root root object\r\n * @param  {String} baseId base schema ID\r\n */\r\nfunction endCompiling(schema, root, baseId) {\r\n  /* jshint validthis: true */\r\n  var i = compIndex.call(this, schema, root, baseId);\r\n  if (i >= 0) this._compilations.splice(i, 1);\r\n}\r\n\r\n\r\n/**\r\n * Index of schema compilation in the currently compiled list\r\n * @this   Ajv\r\n * @param  {Object} schema schema to compile\r\n * @param  {Object} root root object\r\n * @param  {String} baseId base schema ID\r\n * @return {Integer} compilation index\r\n */\r\nfunction compIndex(schema, root, baseId) {\r\n  /* jshint validthis: true */\r\n  for (var i=0; i<this._compilations.length; i++) {\r\n    var c = this._compilations[i];\r\n    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\n\r\nfunction patternCode(i, patterns) {\r\n  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';\r\n}\r\n\r\n\r\nfunction defaultCode(i) {\r\n  return 'var default' + i + ' = defaults[' + i + '];';\r\n}\r\n\r\n\r\nfunction refValCode(i, refVal) {\r\n  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';\r\n}\r\n\r\n\r\nfunction customRuleCode(i) {\r\n  return 'var customRule' + i + ' = customRules[' + i + '];';\r\n}\r\n\r\n\r\nfunction vars(arr, statement) {\r\n  if (!arr.length) return '';\r\n  var code = '';\r\n  for (var i=0; i<arr.length; i++)\r\n    code += statement(i, arr);\r\n  return code;\r\n}\r\n","\r\n\r\nvar URI = require('uri-js')\r\n  , equal = require('fast-deep-equal')\r\n  , util = require('./util')\r\n  , SchemaObject = require('./schema_obj')\r\n  , traverse = require('json-schema-traverse');\r\n\r\nmodule.exports = resolve;\r\n\r\nresolve.normalizeId = normalizeId;\r\nresolve.fullPath = getFullPath;\r\nresolve.url = resolveUrl;\r\nresolve.ids = resolveIds;\r\nresolve.inlineRef = inlineRef;\r\nresolve.schema = resolveSchema;\r\n\r\n/**\r\n * [resolve and compile the references ($ref)]\r\n * @this   Ajv\r\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\r\n * @param  {Object} root object with information about the root schema for the current schema\r\n * @param  {String} ref reference to resolve\r\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\r\n */\r\nfunction resolve(compile, root, ref) {\r\n  /* jshint validthis: true */\r\n  var refVal = this._refs[ref];\r\n  if (typeof refVal == 'string') {\r\n    if (this._refs[refVal]) refVal = this._refs[refVal];\r\n    else return resolve.call(this, compile, root, refVal);\r\n  }\r\n\r\n  refVal = refVal || this._schemas[ref];\r\n  if (refVal instanceof SchemaObject) {\r\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\r\n            ? refVal.schema\r\n            : refVal.validate || this._compile(refVal);\r\n  }\r\n\r\n  var res = resolveSchema.call(this, root, ref);\r\n  var schema, v, baseId;\r\n  if (res) {\r\n    schema = res.schema;\r\n    root = res.root;\r\n    baseId = res.baseId;\r\n  }\r\n\r\n  if (schema instanceof SchemaObject) {\r\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\r\n  } else if (schema !== undefined) {\r\n    v = inlineRef(schema, this._opts.inlineRefs)\r\n        ? schema\r\n        : compile.call(this, schema, root, undefined, baseId);\r\n  }\r\n\r\n  return v;\r\n}\r\n\r\n\r\n/**\r\n * Resolve schema, its root and baseId\r\n * @this Ajv\r\n * @param  {Object} root root object with properties schema, refVal, refs\r\n * @param  {String} ref  reference to resolve\r\n * @return {Object} object with properties schema, root, baseId\r\n */\r\nfunction resolveSchema(root, ref) {\r\n  /* jshint validthis: true */\r\n  var p = URI.parse(ref)\r\n    , refPath = _getFullPath(p)\r\n    , baseId = getFullPath(this._getId(root.schema));\r\n  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {\r\n    var id = normalizeId(refPath);\r\n    var refVal = this._refs[id];\r\n    if (typeof refVal == 'string') {\r\n      return resolveRecursive.call(this, root, refVal, p);\r\n    } else if (refVal instanceof SchemaObject) {\r\n      if (!refVal.validate) this._compile(refVal);\r\n      root = refVal;\r\n    } else {\r\n      refVal = this._schemas[id];\r\n      if (refVal instanceof SchemaObject) {\r\n        if (!refVal.validate) this._compile(refVal);\r\n        if (id == normalizeId(ref))\r\n          return { schema: refVal, root: root, baseId: baseId };\r\n        root = refVal;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n    if (!root.schema) return;\r\n    baseId = getFullPath(this._getId(root.schema));\r\n  }\r\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\r\n}\r\n\r\n\r\n/* @this Ajv */\r\nfunction resolveRecursive(root, ref, parsedRef) {\r\n  /* jshint validthis: true */\r\n  var res = resolveSchema.call(this, root, ref);\r\n  if (res) {\r\n    var schema = res.schema;\r\n    var baseId = res.baseId;\r\n    root = res.root;\r\n    var id = this._getId(schema);\r\n    if (id) baseId = resolveUrl(baseId, id);\r\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\r\n  }\r\n}\r\n\r\n\r\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\r\n/* @this Ajv */\r\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\r\n  /* jshint validthis: true */\r\n  parsedRef.fragment = parsedRef.fragment || '';\r\n  if (parsedRef.fragment.slice(0,1) != '/') return;\r\n  var parts = parsedRef.fragment.split('/');\r\n\r\n  for (var i = 1; i < parts.length; i++) {\r\n    var part = parts[i];\r\n    if (part) {\r\n      part = util.unescapeFragment(part);\r\n      schema = schema[part];\r\n      if (schema === undefined) break;\r\n      var id;\r\n      if (!PREVENT_SCOPE_CHANGE[part]) {\r\n        id = this._getId(schema);\r\n        if (id) baseId = resolveUrl(baseId, id);\r\n        if (schema.$ref) {\r\n          var $ref = resolveUrl(baseId, schema.$ref);\r\n          var res = resolveSchema.call(this, root, $ref);\r\n          if (res) {\r\n            schema = res.schema;\r\n            root = res.root;\r\n            baseId = res.baseId;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (schema !== undefined && schema !== root.schema)\r\n    return { schema: schema, root: root, baseId: baseId };\r\n}\r\n\r\n\r\nvar SIMPLE_INLINED = util.toHash([\r\n  'type', 'format', 'pattern',\r\n  'maxLength', 'minLength',\r\n  'maxProperties', 'minProperties',\r\n  'maxItems', 'minItems',\r\n  'maximum', 'minimum',\r\n  'uniqueItems', 'multipleOf',\r\n  'required', 'enum'\r\n]);\r\nfunction inlineRef(schema, limit) {\r\n  if (limit === false) return false;\r\n  if (limit === undefined || limit === true) return checkNoRef(schema);\r\n  else if (limit) return countKeys(schema) <= limit;\r\n}\r\n\r\n\r\nfunction checkNoRef(schema) {\r\n  var item;\r\n  if (Array.isArray(schema)) {\r\n    for (var i=0; i<schema.length; i++) {\r\n      item = schema[i];\r\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\r\n    }\r\n  } else {\r\n    for (var key in schema) {\r\n      if (key == '$ref') return false;\r\n      item = schema[key];\r\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n\r\nfunction countKeys(schema) {\r\n  var count = 0, item;\r\n  if (Array.isArray(schema)) {\r\n    for (var i=0; i<schema.length; i++) {\r\n      item = schema[i];\r\n      if (typeof item == 'object') count += countKeys(item);\r\n      if (count == Infinity) return Infinity;\r\n    }\r\n  } else {\r\n    for (var key in schema) {\r\n      if (key == '$ref') return Infinity;\r\n      if (SIMPLE_INLINED[key]) {\r\n        count++;\r\n      } else {\r\n        item = schema[key];\r\n        if (typeof item == 'object') count += countKeys(item) + 1;\r\n        if (count == Infinity) return Infinity;\r\n      }\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\n\r\nfunction getFullPath(id, normalize) {\r\n  if (normalize !== false) id = normalizeId(id);\r\n  var p = URI.parse(id);\r\n  return _getFullPath(p);\r\n}\r\n\r\n\r\nfunction _getFullPath(p) {\r\n  return URI.serialize(p).split('#')[0] + '#';\r\n}\r\n\r\n\r\nvar TRAILING_SLASH_HASH = /#\\/?$/;\r\nfunction normalizeId(id) {\r\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\r\n}\r\n\r\n\r\nfunction resolveUrl(baseId, id) {\r\n  id = normalizeId(id);\r\n  return URI.resolve(baseId, id);\r\n}\r\n\r\n\r\n/* @this Ajv */\r\nfunction resolveIds(schema) {\r\n  var schemaId = normalizeId(this._getId(schema));\r\n  var baseIds = {'': schemaId};\r\n  var fullPaths = {'': getFullPath(schemaId, false)};\r\n  var localRefs = {};\r\n  var self = this;\r\n\r\n  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\r\n    if (jsonPtr === '') return;\r\n    var id = self._getId(sch);\r\n    var baseId = baseIds[parentJsonPtr];\r\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\r\n    if (keyIndex !== undefined)\r\n      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\r\n\r\n    if (typeof id == 'string') {\r\n      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);\r\n\r\n      var refVal = self._refs[id];\r\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\r\n      if (refVal && refVal.schema) {\r\n        if (!equal(sch, refVal.schema))\r\n          throw new Error('id \"' + id + '\" resolves to more than one schema');\r\n      } else if (id != normalizeId(fullPath)) {\r\n        if (id[0] == '#') {\r\n          if (localRefs[id] && !equal(sch, localRefs[id]))\r\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\r\n          localRefs[id] = sch;\r\n        } else {\r\n          self._refs[id] = fullPath;\r\n        }\r\n      }\r\n    }\r\n    baseIds[jsonPtr] = baseId;\r\n    fullPaths[jsonPtr] = fullPath;\r\n  });\r\n\r\n  return localRefs;\r\n}\r\n","\r\n\r\n\r\nmodule.exports = {\r\n  copy: copy,\r\n  checkDataType: checkDataType,\r\n  checkDataTypes: checkDataTypes,\r\n  coerceToTypes: coerceToTypes,\r\n  toHash: toHash,\r\n  getProperty: getProperty,\r\n  escapeQuotes: escapeQuotes,\r\n  equal: require('fast-deep-equal'),\r\n  ucs2length: require('./ucs2length'),\r\n  varOccurences: varOccurences,\r\n  varReplace: varReplace,\r\n  schemaHasRules: schemaHasRules,\r\n  schemaHasRulesExcept: schemaHasRulesExcept,\r\n  schemaUnknownRules: schemaUnknownRules,\r\n  toQuotedString: toQuotedString,\r\n  getPathExpr: getPathExpr,\r\n  getPath: getPath,\r\n  getData: getData,\r\n  unescapeFragment: unescapeFragment,\r\n  unescapeJsonPointer: unescapeJsonPointer,\r\n  escapeFragment: escapeFragment,\r\n  escapeJsonPointer: escapeJsonPointer\r\n};\r\n\r\n\r\nfunction copy(o, to) {\r\n  to = to || {};\r\n  for (var key in o) to[key] = o[key];\r\n  return to;\r\n}\r\n\r\n\r\nfunction checkDataType(dataType, data, strictNumbers, negate) {\r\n  var EQUAL = negate ? ' !== ' : ' === '\r\n    , AND = negate ? ' || ' : ' && '\r\n    , OK = negate ? '!' : ''\r\n    , NOT = negate ? '' : '!';\r\n  switch (dataType) {\r\n    case 'null': return data + EQUAL + 'null';\r\n    case 'array': return OK + 'Array.isArray(' + data + ')';\r\n    case 'object': return '(' + OK + data + AND +\r\n                          'typeof ' + data + EQUAL + '\"object\"' + AND +\r\n                          NOT + 'Array.isArray(' + data + '))';\r\n    case 'integer': return '(typeof ' + data + EQUAL + '\"number\"' + AND +\r\n                           NOT + '(' + data + ' % 1)' +\r\n                           AND + data + EQUAL + data +\r\n                           (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';\r\n    case 'number': return '(typeof ' + data + EQUAL + '\"' + dataType + '\"' +\r\n                          (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';\r\n    default: return 'typeof ' + data + EQUAL + '\"' + dataType + '\"';\r\n  }\r\n}\r\n\r\n\r\nfunction checkDataTypes(dataTypes, data, strictNumbers) {\r\n  switch (dataTypes.length) {\r\n    case 1: return checkDataType(dataTypes[0], data, strictNumbers, true);\r\n    default:\r\n      var code = '';\r\n      var types = toHash(dataTypes);\r\n      if (types.array && types.object) {\r\n        code = types.null ? '(': '(!' + data + ' || ';\r\n        code += 'typeof ' + data + ' !== \"object\")';\r\n        delete types.null;\r\n        delete types.array;\r\n        delete types.object;\r\n      }\r\n      if (types.number) delete types.integer;\r\n      for (var t in types)\r\n        code += (code ? ' && ' : '' ) + checkDataType(t, data, strictNumbers, true);\r\n\r\n      return code;\r\n  }\r\n}\r\n\r\n\r\nvar COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);\r\nfunction coerceToTypes(optionCoerceTypes, dataTypes) {\r\n  if (Array.isArray(dataTypes)) {\r\n    var types = [];\r\n    for (var i=0; i<dataTypes.length; i++) {\r\n      var t = dataTypes[i];\r\n      if (COERCE_TO_TYPES[t]) types[types.length] = t;\r\n      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;\r\n    }\r\n    if (types.length) return types;\r\n  } else if (COERCE_TO_TYPES[dataTypes]) {\r\n    return [dataTypes];\r\n  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {\r\n    return ['array'];\r\n  }\r\n}\r\n\r\n\r\nfunction toHash(arr) {\r\n  var hash = {};\r\n  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;\r\n  return hash;\r\n}\r\n\r\n\r\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\r\nvar SINGLE_QUOTE = /'|\\\\/g;\r\nfunction getProperty(key) {\r\n  return typeof key == 'number'\r\n          ? '[' + key + ']'\r\n          : IDENTIFIER.test(key)\r\n            ? '.' + key\r\n            : \"['\" + escapeQuotes(key) + \"']\";\r\n}\r\n\r\n\r\nfunction escapeQuotes(str) {\r\n  return str.replace(SINGLE_QUOTE, '\\\\$&')\r\n            .replace(/\\n/g, '\\\\n')\r\n            .replace(/\\r/g, '\\\\r')\r\n            .replace(/\\f/g, '\\\\f')\r\n            .replace(/\\t/g, '\\\\t');\r\n}\r\n\r\n\r\nfunction varOccurences(str, dataVar) {\r\n  dataVar += '[^0-9]';\r\n  var matches = str.match(new RegExp(dataVar, 'g'));\r\n  return matches ? matches.length : 0;\r\n}\r\n\r\n\r\nfunction varReplace(str, dataVar, expr) {\r\n  dataVar += '([^0-9])';\r\n  expr = expr.replace(/\\$/g, '$$$$');\r\n  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');\r\n}\r\n\r\n\r\nfunction schemaHasRules(schema, rules) {\r\n  if (typeof schema == 'boolean') return !schema;\r\n  for (var key in schema) if (rules[key]) return true;\r\n}\r\n\r\n\r\nfunction schemaHasRulesExcept(schema, rules, exceptKeyword) {\r\n  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';\r\n  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;\r\n}\r\n\r\n\r\nfunction schemaUnknownRules(schema, rules) {\r\n  if (typeof schema == 'boolean') return;\r\n  for (var key in schema) if (!rules[key]) return key;\r\n}\r\n\r\n\r\nfunction toQuotedString(str) {\r\n  return '\\'' + escapeQuotes(str) + '\\'';\r\n}\r\n\r\n\r\nfunction getPathExpr(currentPath, expr, jsonPointers, isNumber) {\r\n  var path = jsonPointers // false by default\r\n              ? '\\'/\\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \\'~0\\').replace(/\\\\//g, \\'~1\\')')\r\n              : (isNumber ? '\\'[\\' + ' + expr + ' + \\']\\'' : '\\'[\\\\\\'\\' + ' + expr + ' + \\'\\\\\\']\\'');\r\n  return joinPaths(currentPath, path);\r\n}\r\n\r\n\r\nfunction getPath(currentPath, prop, jsonPointers) {\r\n  var path = jsonPointers // false by default\r\n              ? toQuotedString('/' + escapeJsonPointer(prop))\r\n              : toQuotedString(getProperty(prop));\r\n  return joinPaths(currentPath, path);\r\n}\r\n\r\n\r\nvar JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\r\nvar RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\r\nfunction getData($data, lvl, paths) {\r\n  var up, jsonPointer, data, matches;\r\n  if ($data === '') return 'rootData';\r\n  if ($data[0] == '/') {\r\n    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);\r\n    jsonPointer = $data;\r\n    data = 'rootData';\r\n  } else {\r\n    matches = $data.match(RELATIVE_JSON_POINTER);\r\n    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);\r\n    up = +matches[1];\r\n    jsonPointer = matches[2];\r\n    if (jsonPointer == '#') {\r\n      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);\r\n      return paths[lvl - up];\r\n    }\r\n\r\n    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);\r\n    data = 'data' + ((lvl - up) || '');\r\n    if (!jsonPointer) return data;\r\n  }\r\n\r\n  var expr = data;\r\n  var segments = jsonPointer.split('/');\r\n  for (var i=0; i<segments.length; i++) {\r\n    var segment = segments[i];\r\n    if (segment) {\r\n      data += getProperty(unescapeJsonPointer(segment));\r\n      expr += ' && ' + data;\r\n    }\r\n  }\r\n  return expr;\r\n}\r\n\r\n\r\nfunction joinPaths (a, b) {\r\n  if (a == '\"\"') return b;\r\n  return (a + ' + ' + b).replace(/([^\\\\])' \\+ '/g, '$1');\r\n}\r\n\r\n\r\nfunction unescapeFragment(str) {\r\n  return unescapeJsonPointer(decodeURIComponent(str));\r\n}\r\n\r\n\r\nfunction escapeFragment(str) {\r\n  return encodeURIComponent(escapeJsonPointer(str));\r\n}\r\n\r\n\r\nfunction escapeJsonPointer(str) {\r\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\r\n}\r\n\r\n\r\nfunction unescapeJsonPointer(str) {\r\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\r\n}\r\n","\r\n\r\n// https://mathiasbynens.be/notes/javascript-encoding\r\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\r\nmodule.exports = function ucs2length(str) {\r\n  var length = 0\r\n    , len = str.length\r\n    , pos = 0\r\n    , value;\r\n  while (pos < len) {\r\n    length++;\r\n    value = str.charCodeAt(pos++);\r\n    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {\r\n      // high surrogate, and there is a next character\r\n      value = str.charCodeAt(pos);\r\n      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate\r\n    }\r\n  }\r\n  return length;\r\n};\r\n","\r\n\r\nvar util = require('./util');\r\n\r\nmodule.exports = SchemaObject;\r\n\r\nfunction SchemaObject(obj) {\r\n  util.copy(obj, this);\r\n}\r\n","\r\n\r\nvar resolve = require('./resolve');\r\n\r\nmodule.exports = {\r\n  Validation: errorSubclass(ValidationError),\r\n  MissingRef: errorSubclass(MissingRefError)\r\n};\r\n\r\n\r\nfunction ValidationError(errors) {\r\n  this.message = 'validation failed';\r\n  this.errors = errors;\r\n  this.ajv = this.validation = true;\r\n}\r\n\r\n\r\nMissingRefError.message = function (baseId, ref) {\r\n  return 'can\\'t resolve reference ' + ref + ' from id ' + baseId;\r\n};\r\n\r\n\r\nfunction MissingRefError(baseId, ref, message) {\r\n  this.message = message || MissingRefError.message(baseId, ref);\r\n  this.missingRef = resolve.url(baseId, ref);\r\n  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));\r\n}\r\n\r\n\r\nfunction errorSubclass(Subclass) {\r\n  Subclass.prototype = Object.create(Error.prototype);\r\n  Subclass.prototype.constructor = Subclass;\r\n  return Subclass;\r\n}\r\n","\r\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\r\n  var out = '';\r\n  var $async = it.schema.$async === true,\r\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\r\n    $id = it.self._getId(it.schema);\r\n  if (it.opts.strictKeywords) {\r\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\r\n    if ($unknownKwd) {\r\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\r\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\r\n      else throw new Error($keywordsMsg);\r\n    }\r\n  }\r\n  if (it.isTop) {\r\n    out += ' var validate = ';\r\n    if ($async) {\r\n      it.async = true;\r\n      out += 'async ';\r\n    }\r\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\r\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\r\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\r\n    }\r\n  }\r\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\r\n    var $keyword = 'false schema';\r\n    var $lvl = it.level;\r\n    var $dataLvl = it.dataLevel;\r\n    var $schema = it.schema[$keyword];\r\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n    var $breakOnError = !it.opts.allErrors;\r\n    var $errorKeyword;\r\n    var $data = 'data' + ($dataLvl || '');\r\n    var $valid = 'valid' + $lvl;\r\n    if (it.schema === false) {\r\n      if (it.isTop) {\r\n        $breakOnError = true;\r\n      } else {\r\n        out += ' var ' + ($valid) + ' = false; ';\r\n      }\r\n      var $$outStack = $$outStack || [];\r\n      $$outStack.push(out);\r\n      out = ''; /* istanbul ignore else */\r\n      if (it.createErrors !== false) {\r\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n        if (it.opts.messages !== false) {\r\n          out += ' , message: \\'boolean schema is false\\' ';\r\n        }\r\n        if (it.opts.verbose) {\r\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n        }\r\n        out += ' } ';\r\n      } else {\r\n        out += ' {} ';\r\n      }\r\n      var __err = out;\r\n      out = $$outStack.pop();\r\n      if (!it.compositeRule && $breakOnError) {\r\n        /* istanbul ignore if */\r\n        if (it.async) {\r\n          out += ' throw new ValidationError([' + (__err) + ']); ';\r\n        } else {\r\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n        }\r\n      } else {\r\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n      }\r\n    } else {\r\n      if (it.isTop) {\r\n        if ($async) {\r\n          out += ' return data; ';\r\n        } else {\r\n          out += ' validate.errors = null; return true; ';\r\n        }\r\n      } else {\r\n        out += ' var ' + ($valid) + ' = true; ';\r\n      }\r\n    }\r\n    if (it.isTop) {\r\n      out += ' }; return validate; ';\r\n    }\r\n    return out;\r\n  }\r\n  if (it.isTop) {\r\n    var $top = it.isTop,\r\n      $lvl = it.level = 0,\r\n      $dataLvl = it.dataLevel = 0,\r\n      $data = 'data';\r\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\r\n    it.baseId = it.baseId || it.rootId;\r\n    delete it.isTop;\r\n    it.dataPathArr = [\"\"];\r\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\r\n      var $defaultMsg = 'default is ignored in the schema root';\r\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\r\n      else throw new Error($defaultMsg);\r\n    }\r\n    out += ' var vErrors = null; ';\r\n    out += ' var errors = 0;     ';\r\n    out += ' if (rootData === undefined) rootData = data; ';\r\n  } else {\r\n    var $lvl = it.level,\r\n      $dataLvl = it.dataLevel,\r\n      $data = 'data' + ($dataLvl || '');\r\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\r\n    if ($async && !it.async) throw new Error('async schema in sync schema');\r\n    out += ' var errs_' + ($lvl) + ' = errors;';\r\n  }\r\n  var $valid = 'valid' + $lvl,\r\n    $breakOnError = !it.opts.allErrors,\r\n    $closingBraces1 = '',\r\n    $closingBraces2 = '';\r\n  var $errorKeyword;\r\n  var $typeSchema = it.schema.type,\r\n    $typeIsArray = Array.isArray($typeSchema);\r\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\r\n    if ($typeIsArray) {\r\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\r\n    } else if ($typeSchema != 'null') {\r\n      $typeSchema = [$typeSchema, 'null'];\r\n      $typeIsArray = true;\r\n    }\r\n  }\r\n  if ($typeIsArray && $typeSchema.length == 1) {\r\n    $typeSchema = $typeSchema[0];\r\n    $typeIsArray = false;\r\n  }\r\n  if (it.schema.$ref && $refKeywords) {\r\n    if (it.opts.extendRefs == 'fail') {\r\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\r\n    } else if (it.opts.extendRefs !== true) {\r\n      $refKeywords = false;\r\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\r\n    }\r\n  }\r\n  if (it.schema.$comment && it.opts.$comment) {\r\n    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\r\n  }\r\n  if ($typeSchema) {\r\n    if (it.opts.coerceTypes) {\r\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\r\n    }\r\n    var $rulesGroup = it.RULES.types[$typeSchema];\r\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\r\n      var $schemaPath = it.schemaPath + '.type',\r\n        $errSchemaPath = it.errSchemaPath + '/type';\r\n      var $schemaPath = it.schemaPath + '.type',\r\n        $errSchemaPath = it.errSchemaPath + '/type',\r\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\r\n      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';\r\n      if ($coerceToTypes) {\r\n        var $dataType = 'dataType' + $lvl,\r\n          $coerced = 'coerced' + $lvl;\r\n        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';\r\n        if (it.opts.coerceTypes == 'array') {\r\n          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';\r\n        }\r\n        out += ' if (' + ($coerced) + ' !== undefined) ; ';\r\n        var arr1 = $coerceToTypes;\r\n        if (arr1) {\r\n          var $type, $i = -1,\r\n            l1 = arr1.length - 1;\r\n          while ($i < l1) {\r\n            $type = arr1[$i += 1];\r\n            if ($type == 'string') {\r\n              out += ' else if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\r\n            } else if ($type == 'number' || $type == 'integer') {\r\n              out += ' else if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\r\n              if ($type == 'integer') {\r\n                out += ' && !(' + ($data) + ' % 1)';\r\n              }\r\n              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\r\n            } else if ($type == 'boolean') {\r\n              out += ' else if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\r\n            } else if ($type == 'null') {\r\n              out += ' else if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\r\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\r\n              out += ' else if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\r\n            }\r\n          }\r\n        }\r\n        out += ' else {   ';\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\r\n          if ($typeIsArray) {\r\n            out += '' + ($typeSchema.join(\",\"));\r\n          } else {\r\n            out += '' + ($typeSchema);\r\n          }\r\n          out += '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'should be ';\r\n            if ($typeIsArray) {\r\n              out += '' + ($typeSchema.join(\",\"));\r\n            } else {\r\n              out += '' + ($typeSchema);\r\n            }\r\n            out += '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n        out += ' } if (' + ($coerced) + ' !== undefined) {  ';\r\n        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\r\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\r\n        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\r\n        if (!$dataLvl) {\r\n          out += 'if (' + ($parentData) + ' !== undefined)';\r\n        }\r\n        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\r\n      } else {\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\r\n          if ($typeIsArray) {\r\n            out += '' + ($typeSchema.join(\",\"));\r\n          } else {\r\n            out += '' + ($typeSchema);\r\n          }\r\n          out += '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'should be ';\r\n            if ($typeIsArray) {\r\n              out += '' + ($typeSchema.join(\",\"));\r\n            } else {\r\n              out += '' + ($typeSchema);\r\n            }\r\n            out += '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n      }\r\n      out += ' } ';\r\n    }\r\n  }\r\n  if (it.schema.$ref && !$refKeywords) {\r\n    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\r\n    if ($breakOnError) {\r\n      out += ' } if (errors === ';\r\n      if ($top) {\r\n        out += '0';\r\n      } else {\r\n        out += 'errs_' + ($lvl);\r\n      }\r\n      out += ') { ';\r\n      $closingBraces2 += '}';\r\n    }\r\n  } else {\r\n    var arr2 = it.RULES;\r\n    if (arr2) {\r\n      var $rulesGroup, i2 = -1,\r\n        l2 = arr2.length - 1;\r\n      while (i2 < l2) {\r\n        $rulesGroup = arr2[i2 += 1];\r\n        if ($shouldUseGroup($rulesGroup)) {\r\n          if ($rulesGroup.type) {\r\n            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';\r\n          }\r\n          if (it.opts.useDefaults) {\r\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\r\n              var $schema = it.schema.properties,\r\n                $schemaKeys = Object.keys($schema);\r\n              var arr3 = $schemaKeys;\r\n              if (arr3) {\r\n                var $propertyKey, i3 = -1,\r\n                  l3 = arr3.length - 1;\r\n                while (i3 < l3) {\r\n                  $propertyKey = arr3[i3 += 1];\r\n                  var $sch = $schema[$propertyKey];\r\n                  if ($sch.default !== undefined) {\r\n                    var $passData = $data + it.util.getProperty($propertyKey);\r\n                    if (it.compositeRule) {\r\n                      if (it.opts.strictDefaults) {\r\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\r\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\r\n                        else throw new Error($defaultMsg);\r\n                      }\r\n                    } else {\r\n                      out += ' if (' + ($passData) + ' === undefined ';\r\n                      if (it.opts.useDefaults == 'empty') {\r\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\r\n                      }\r\n                      out += ' ) ' + ($passData) + ' = ';\r\n                      if (it.opts.useDefaults == 'shared') {\r\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\r\n                      } else {\r\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\r\n                      }\r\n                      out += '; ';\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\r\n              var arr4 = it.schema.items;\r\n              if (arr4) {\r\n                var $sch, $i = -1,\r\n                  l4 = arr4.length - 1;\r\n                while ($i < l4) {\r\n                  $sch = arr4[$i += 1];\r\n                  if ($sch.default !== undefined) {\r\n                    var $passData = $data + '[' + $i + ']';\r\n                    if (it.compositeRule) {\r\n                      if (it.opts.strictDefaults) {\r\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\r\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\r\n                        else throw new Error($defaultMsg);\r\n                      }\r\n                    } else {\r\n                      out += ' if (' + ($passData) + ' === undefined ';\r\n                      if (it.opts.useDefaults == 'empty') {\r\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\r\n                      }\r\n                      out += ' ) ' + ($passData) + ' = ';\r\n                      if (it.opts.useDefaults == 'shared') {\r\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\r\n                      } else {\r\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\r\n                      }\r\n                      out += '; ';\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          var arr5 = $rulesGroup.rules;\r\n          if (arr5) {\r\n            var $rule, i5 = -1,\r\n              l5 = arr5.length - 1;\r\n            while (i5 < l5) {\r\n              $rule = arr5[i5 += 1];\r\n              if ($shouldUseRule($rule)) {\r\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\r\n                if ($code) {\r\n                  out += ' ' + ($code) + ' ';\r\n                  if ($breakOnError) {\r\n                    $closingBraces1 += '}';\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if ($breakOnError) {\r\n            out += ' ' + ($closingBraces1) + ' ';\r\n            $closingBraces1 = '';\r\n          }\r\n          if ($rulesGroup.type) {\r\n            out += ' } ';\r\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\r\n              out += ' else { ';\r\n              var $schemaPath = it.schemaPath + '.type',\r\n                $errSchemaPath = it.errSchemaPath + '/type';\r\n              var $$outStack = $$outStack || [];\r\n              $$outStack.push(out);\r\n              out = ''; /* istanbul ignore else */\r\n              if (it.createErrors !== false) {\r\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\r\n                if ($typeIsArray) {\r\n                  out += '' + ($typeSchema.join(\",\"));\r\n                } else {\r\n                  out += '' + ($typeSchema);\r\n                }\r\n                out += '\\' } ';\r\n                if (it.opts.messages !== false) {\r\n                  out += ' , message: \\'should be ';\r\n                  if ($typeIsArray) {\r\n                    out += '' + ($typeSchema.join(\",\"));\r\n                  } else {\r\n                    out += '' + ($typeSchema);\r\n                  }\r\n                  out += '\\' ';\r\n                }\r\n                if (it.opts.verbose) {\r\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n                }\r\n                out += ' } ';\r\n              } else {\r\n                out += ' {} ';\r\n              }\r\n              var __err = out;\r\n              out = $$outStack.pop();\r\n              if (!it.compositeRule && $breakOnError) {\r\n                /* istanbul ignore if */\r\n                if (it.async) {\r\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\r\n                } else {\r\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n                }\r\n              } else {\r\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n              }\r\n              out += ' } ';\r\n            }\r\n          }\r\n          if ($breakOnError) {\r\n            out += ' if (errors === ';\r\n            if ($top) {\r\n              out += '0';\r\n            } else {\r\n              out += 'errs_' + ($lvl);\r\n            }\r\n            out += ') { ';\r\n            $closingBraces2 += '}';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if ($breakOnError) {\r\n    out += ' ' + ($closingBraces2) + ' ';\r\n  }\r\n  if ($top) {\r\n    if ($async) {\r\n      out += ' if (errors === 0) return data;           ';\r\n      out += ' else throw new ValidationError(vErrors); ';\r\n    } else {\r\n      out += ' validate.errors = vErrors; ';\r\n      out += ' return errors === 0;       ';\r\n    }\r\n    out += ' }; return validate;';\r\n  } else {\r\n    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\r\n  }\r\n\r\n  function $shouldUseGroup($rulesGroup) {\r\n    var rules = $rulesGroup.rules;\r\n    for (var i = 0; i < rules.length; i++)\r\n      if ($shouldUseRule(rules[i])) return true;\r\n  }\r\n\r\n  function $shouldUseRule($rule) {\r\n    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\r\n  }\r\n\r\n  function $ruleImplementsSomeKeyword($rule) {\r\n    var impl = $rule.implements;\r\n    for (var i = 0; i < impl.length; i++)\r\n      if (it.schema[impl[i]] !== undefined) return true;\r\n  }\r\n  return out;\r\n}\r\n","\r\n\r\n\r\nvar Cache = module.exports = function Cache() {\r\n  this._cache = {};\r\n};\r\n\r\n\r\nCache.prototype.put = function Cache_put(key, value) {\r\n  this._cache[key] = value;\r\n};\r\n\r\n\r\nCache.prototype.get = function Cache_get(key) {\r\n  return this._cache[key];\r\n};\r\n\r\n\r\nCache.prototype.del = function Cache_del(key) {\r\n  delete this._cache[key];\r\n};\r\n\r\n\r\nCache.prototype.clear = function Cache_clear() {\r\n  this._cache = {};\r\n};\r\n","\r\n\r\nvar util = require('./util');\r\n\r\nvar DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\r\nvar DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];\r\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\r\nvar HOSTNAME = /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i;\r\nvar URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\r\nvar URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\r\n// uri-template: https://tools.ietf.org/html/rfc6570\r\nvar URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\r\n// For the source: https://gist.github.com/dperini/729294\r\n// For test cases: https://mathiasbynens.be/demo/url-regex\r\n// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.\r\n// var URL = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\r\nvar URL = /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-)*(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-)*(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i;\r\nvar UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\r\nvar JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\r\nvar JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\r\nvar RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\r\n\r\n\r\nmodule.exports = formats;\r\n\r\nfunction formats(mode) {\r\n  mode = mode == 'full' ? 'full' : 'fast';\r\n  return util.copy(formats[mode]);\r\n}\r\n\r\n\r\nformats.fast = {\r\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\r\n  date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\r\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\r\n  time: /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\r\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,\r\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\r\n  uri: /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\r\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+\\-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\r\n  'uri-template': URITEMPLATE,\r\n  url: URL,\r\n  // email (sources from jsen validator):\r\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\r\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\r\n  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\r\n  hostname: HOSTNAME,\r\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\r\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\r\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\r\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\r\n  regex: regex,\r\n  // uuid: http://tools.ietf.org/html/rfc4122\r\n  uuid: UUID,\r\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\r\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\r\n  'json-pointer': JSON_POINTER,\r\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\r\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\r\n  'relative-json-pointer': RELATIVE_JSON_POINTER\r\n};\r\n\r\n\r\nformats.full = {\r\n  date: date,\r\n  time: time,\r\n  'date-time': date_time,\r\n  uri: uri,\r\n  'uri-reference': URIREF,\r\n  'uri-template': URITEMPLATE,\r\n  url: URL,\r\n  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\r\n  hostname: HOSTNAME,\r\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\r\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\r\n  regex: regex,\r\n  uuid: UUID,\r\n  'json-pointer': JSON_POINTER,\r\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\r\n  'relative-json-pointer': RELATIVE_JSON_POINTER\r\n};\r\n\r\n\r\nfunction isLeapYear(year) {\r\n  // https://tools.ietf.org/html/rfc3339#appendix-C\r\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\r\n}\r\n\r\n\r\nfunction date(str) {\r\n  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\r\n  var matches = str.match(DATE);\r\n  if (!matches) return false;\r\n\r\n  var year = +matches[1];\r\n  var month = +matches[2];\r\n  var day = +matches[3];\r\n\r\n  return month >= 1 && month <= 12 && day >= 1 &&\r\n          day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\r\n}\r\n\r\n\r\nfunction time(str, full) {\r\n  var matches = str.match(TIME);\r\n  if (!matches) return false;\r\n\r\n  var hour = matches[1];\r\n  var minute = matches[2];\r\n  var second = matches[3];\r\n  var timeZone = matches[5];\r\n  return ((hour <= 23 && minute <= 59 && second <= 59) ||\r\n          (hour == 23 && minute == 59 && second == 60)) &&\r\n         (!full || timeZone);\r\n}\r\n\r\n\r\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\r\nfunction date_time(str) {\r\n  // http://tools.ietf.org/html/rfc3339#section-5.6\r\n  var dateTime = str.split(DATE_TIME_SEPARATOR);\r\n  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);\r\n}\r\n\r\n\r\nvar NOT_URI_FRAGMENT = /\\/|:/;\r\nfunction uri(str) {\r\n  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\r\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str);\r\n}\r\n\r\n\r\nvar Z_ANCHOR = /[^\\\\]\\\\Z/;\r\nfunction regex(str) {\r\n  if (Z_ANCHOR.test(str)) return false;\r\n  try {\r\n    new RegExp(str);\r\n    return true;\r\n  } catch(e) {\r\n    return false;\r\n  }\r\n}\r\n","\r\n\r\nvar ruleModules = require('../dotjs')\r\n  , toHash = require('./util').toHash;\r\n\r\nmodule.exports = function rules() {\r\n  var RULES = [\r\n    { type: 'number',\r\n      rules: [ { 'maximum': ['exclusiveMaximum'] },\r\n               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },\r\n    { type: 'string',\r\n      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },\r\n    { type: 'array',\r\n      rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },\r\n    { type: 'object',\r\n      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',\r\n               { 'properties': ['additionalProperties', 'patternProperties'] } ] },\r\n    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }\r\n  ];\r\n\r\n  var ALL = [ 'type', '$comment' ];\r\n  var KEYWORDS = [\r\n    '$schema', '$id', 'id', '$data', '$async', 'title',\r\n    'description', 'default', 'definitions',\r\n    'examples', 'readOnly', 'writeOnly',\r\n    'contentMediaType', 'contentEncoding',\r\n    'additionalItems', 'then', 'else'\r\n  ];\r\n  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];\r\n  RULES.all = toHash(ALL);\r\n  RULES.types = toHash(TYPES);\r\n\r\n  RULES.forEach(function (group) {\r\n    group.rules = group.rules.map(function (keyword) {\r\n      var implKeywords;\r\n      if (typeof keyword == 'object') {\r\n        var key = Object.keys(keyword)[0];\r\n        implKeywords = keyword[key];\r\n        keyword = key;\r\n        implKeywords.forEach(function (k) {\r\n          ALL.push(k);\r\n          RULES.all[k] = true;\r\n        });\r\n      }\r\n      ALL.push(keyword);\r\n      var rule = RULES.all[keyword] = {\r\n        keyword: keyword,\r\n        code: ruleModules[keyword],\r\n        implements: implKeywords\r\n      };\r\n      return rule;\r\n    });\r\n\r\n    RULES.all.$comment = {\r\n      keyword: '$comment',\r\n      code: ruleModules.$comment\r\n    };\r\n\r\n    if (group.type) RULES.types[group.type] = group;\r\n  });\r\n\r\n  RULES.keywords = toHash(ALL.concat(KEYWORDS));\r\n  RULES.custom = {};\r\n\r\n  return RULES;\r\n};\r\n","\r\n\r\n//all requires must be explicit because browserify won't work with dynamic requires\r\nmodule.exports = {\r\n  '$ref': require('./ref'),\r\n  allOf: require('./allOf'),\r\n  anyOf: require('./anyOf'),\r\n  '$comment': require('./comment'),\r\n  const: require('./const'),\r\n  contains: require('./contains'),\r\n  dependencies: require('./dependencies'),\r\n  'enum': require('./enum'),\r\n  format: require('./format'),\r\n  'if': require('./if'),\r\n  items: require('./items'),\r\n  maximum: require('./_limit'),\r\n  minimum: require('./_limit'),\r\n  maxItems: require('./_limitItems'),\r\n  minItems: require('./_limitItems'),\r\n  maxLength: require('./_limitLength'),\r\n  minLength: require('./_limitLength'),\r\n  maxProperties: require('./_limitProperties'),\r\n  minProperties: require('./_limitProperties'),\r\n  multipleOf: require('./multipleOf'),\r\n  not: require('./not'),\r\n  oneOf: require('./oneOf'),\r\n  pattern: require('./pattern'),\r\n  properties: require('./properties'),\r\n  propertyNames: require('./propertyNames'),\r\n  required: require('./required'),\r\n  uniqueItems: require('./uniqueItems'),\r\n  validate: require('./validate')\r\n};\r\n","\r\nmodule.exports = function generate_ref(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $async, $refCode;\r\n  if ($schema == '#' || $schema == '#/') {\r\n    if (it.isRoot) {\r\n      $async = it.async;\r\n      $refCode = 'validate';\r\n    } else {\r\n      $async = it.root.schema.$async === true;\r\n      $refCode = 'root.refVal[0]';\r\n    }\r\n  } else {\r\n    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);\r\n    if ($refVal === undefined) {\r\n      var $message = it.MissingRefError.message(it.baseId, $schema);\r\n      if (it.opts.missingRefs == 'fail') {\r\n        it.logger.error($message);\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ('$ref') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \\'' + (it.util.escapeQuotes($schema)) + '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'can\\\\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n        if ($breakOnError) {\r\n          out += ' if (false) { ';\r\n        }\r\n      } else if (it.opts.missingRefs == 'ignore') {\r\n        it.logger.warn($message);\r\n        if ($breakOnError) {\r\n          out += ' if (true) { ';\r\n        }\r\n      } else {\r\n        throw new it.MissingRefError(it.baseId, $schema, $message);\r\n      }\r\n    } else if ($refVal.inline) {\r\n      var $it = it.util.copy(it);\r\n      $it.level++;\r\n      var $nextValid = 'valid' + $it.level;\r\n      $it.schema = $refVal.schema;\r\n      $it.schemaPath = '';\r\n      $it.errSchemaPath = $schema;\r\n      var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code);\r\n      out += ' ' + ($code) + ' ';\r\n      if ($breakOnError) {\r\n        out += ' if (' + ($nextValid) + ') { ';\r\n      }\r\n    } else {\r\n      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);\r\n      $refCode = $refVal.code;\r\n    }\r\n  }\r\n  if ($refCode) {\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = '';\r\n    if (it.opts.passContext) {\r\n      out += ' ' + ($refCode) + '.call(this, ';\r\n    } else {\r\n      out += ' ' + ($refCode) + '( ';\r\n    }\r\n    out += ' ' + ($data) + ', (dataPath || \\'\\')';\r\n    if (it.errorPath != '\"\"') {\r\n      out += ' + ' + (it.errorPath);\r\n    }\r\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\r\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\r\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';\r\n    var __callValidate = out;\r\n    out = $$outStack.pop();\r\n    if ($async) {\r\n      if (!it.async) throw new Error('async schema referenced by sync schema');\r\n      if ($breakOnError) {\r\n        out += ' var ' + ($valid) + '; ';\r\n      }\r\n      out += ' try { await ' + (__callValidate) + '; ';\r\n      if ($breakOnError) {\r\n        out += ' ' + ($valid) + ' = true; ';\r\n      }\r\n      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';\r\n      if ($breakOnError) {\r\n        out += ' ' + ($valid) + ' = false; ';\r\n      }\r\n      out += ' } ';\r\n      if ($breakOnError) {\r\n        out += ' if (' + ($valid) + ') { ';\r\n      }\r\n    } else {\r\n      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';\r\n      if ($breakOnError) {\r\n        out += ' else { ';\r\n      }\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_allOf(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $currentBaseId = $it.baseId,\r\n    $allSchemasEmpty = true;\r\n  var arr1 = $schema;\r\n  if (arr1) {\r\n    var $sch, $i = -1,\r\n      l1 = arr1.length - 1;\r\n    while ($i < l1) {\r\n      $sch = arr1[$i += 1];\r\n      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n        $allSchemasEmpty = false;\r\n        $it.schema = $sch;\r\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\r\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\r\n        out += '  ' + (it.validate($it)) + ' ';\r\n        $it.baseId = $currentBaseId;\r\n        if ($breakOnError) {\r\n          out += ' if (' + ($nextValid) + ') { ';\r\n          $closingBraces += '}';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if ($breakOnError) {\r\n    if ($allSchemasEmpty) {\r\n      out += ' if (true) { ';\r\n    } else {\r\n      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_anyOf(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $noEmptySchema = $schema.every(function($sch) {\r\n    return (it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all));\r\n  });\r\n  if ($noEmptySchema) {\r\n    var $currentBaseId = $it.baseId;\r\n    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    var arr1 = $schema;\r\n    if (arr1) {\r\n      var $sch, $i = -1,\r\n        l1 = arr1.length - 1;\r\n      while ($i < l1) {\r\n        $sch = arr1[$i += 1];\r\n        $it.schema = $sch;\r\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\r\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\r\n        out += '  ' + (it.validate($it)) + ' ';\r\n        $it.baseId = $currentBaseId;\r\n        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';\r\n        $closingBraces += '}';\r\n      }\r\n    }\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('anyOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should match some schema in anyOf\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError(vErrors); ';\r\n      } else {\r\n        out += ' validate.errors = vErrors; return false; ';\r\n      }\r\n    }\r\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\r\n    if (it.opts.allErrors) {\r\n      out += ' } ';\r\n    }\r\n  } else {\r\n    if ($breakOnError) {\r\n      out += ' if (true) { ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_comment(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $schema = it.schema[$keyword];\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $comment = it.util.toQuotedString($schema);\r\n  if (it.opts.$comment === true) {\r\n    out += ' console.log(' + ($comment) + ');';\r\n  } else if (typeof it.opts.$comment == 'function') {\r\n    out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_const(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (!$isData) {\r\n    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';\r\n  }\r\n  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('const') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should be equal to constant\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += ' }';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_contains(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $idx = 'i' + $lvl,\r\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\r\n    $nextData = 'data' + $dataNxt,\r\n    $currentBaseId = it.baseId,\r\n    $nonEmptySchema = (it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all));\r\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\r\n  if ($nonEmptySchema) {\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    $it.schema = $schema;\r\n    $it.schemaPath = $schemaPath;\r\n    $it.errSchemaPath = $errSchemaPath;\r\n    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\r\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\r\n    var $passData = $data + '[' + $idx + ']';\r\n    $it.dataPathArr[$dataNxt] = $idx;\r\n    var $code = it.validate($it);\r\n    $it.baseId = $currentBaseId;\r\n    if (it.util.varOccurences($code, $nextData) < 2) {\r\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n    } else {\r\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n    }\r\n    out += ' if (' + ($nextValid) + ') break; }  ';\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';\r\n  } else {\r\n    out += ' if (' + ($data) + '.length == 0) {';\r\n  }\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('contains') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should contain a valid item\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += ' } else { ';\r\n  if ($nonEmptySchema) {\r\n    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\r\n  }\r\n  if (it.opts.allErrors) {\r\n    out += ' } ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_dependencies(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $schemaDeps = {},\r\n    $propertyDeps = {},\r\n    $ownProperties = it.opts.ownProperties;\r\n  for ($property in $schema) {\r\n    if ($property == '__proto__') continue;\r\n    var $sch = $schema[$property];\r\n    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\r\n    $deps[$property] = $sch;\r\n  }\r\n  out += 'var ' + ($errs) + ' = errors;';\r\n  var $currentErrorPath = it.errorPath;\r\n  out += 'var missing' + ($lvl) + ';';\r\n  for (var $property in $propertyDeps) {\r\n    $deps = $propertyDeps[$property];\r\n    if ($deps.length) {\r\n      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\r\n      if ($ownProperties) {\r\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\r\n      }\r\n      if ($breakOnError) {\r\n        out += ' && ( ';\r\n        var arr1 = $deps;\r\n        if (arr1) {\r\n          var $propertyKey, $i = -1,\r\n            l1 = arr1.length - 1;\r\n          while ($i < l1) {\r\n            $propertyKey = arr1[$i += 1];\r\n            if ($i) {\r\n              out += ' || ';\r\n            }\r\n            var $prop = it.util.getProperty($propertyKey),\r\n              $useData = $data + $prop;\r\n            out += ' ( ( ' + ($useData) + ' === undefined ';\r\n            if ($ownProperties) {\r\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n            }\r\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\r\n          }\r\n        }\r\n        out += ')) {  ';\r\n        var $propertyPath = 'missing' + $lvl,\r\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\r\n        if (it.opts._errorDataPathProperty) {\r\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\r\n        }\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'should have ';\r\n            if ($deps.length == 1) {\r\n              out += 'property ' + (it.util.escapeQuotes($deps[0]));\r\n            } else {\r\n              out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\r\n            }\r\n            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n      } else {\r\n        out += ' ) { ';\r\n        var arr2 = $deps;\r\n        if (arr2) {\r\n          var $propertyKey, i2 = -1,\r\n            l2 = arr2.length - 1;\r\n          while (i2 < l2) {\r\n            $propertyKey = arr2[i2 += 1];\r\n            var $prop = it.util.getProperty($propertyKey),\r\n              $missingProperty = it.util.escapeQuotes($propertyKey),\r\n              $useData = $data + $prop;\r\n            if (it.opts._errorDataPathProperty) {\r\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\r\n            }\r\n            out += ' if ( ' + ($useData) + ' === undefined ';\r\n            if ($ownProperties) {\r\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n            }\r\n            out += ') {  var err =   '; /* istanbul ignore else */\r\n            if (it.createErrors !== false) {\r\n              out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\r\n              if (it.opts.messages !== false) {\r\n                out += ' , message: \\'should have ';\r\n                if ($deps.length == 1) {\r\n                  out += 'property ' + (it.util.escapeQuotes($deps[0]));\r\n                } else {\r\n                  out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\r\n                }\r\n                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\r\n              }\r\n              if (it.opts.verbose) {\r\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n              }\r\n              out += ' } ';\r\n            } else {\r\n              out += ' {} ';\r\n            }\r\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\r\n          }\r\n        }\r\n      }\r\n      out += ' }   ';\r\n      if ($breakOnError) {\r\n        $closingBraces += '}';\r\n        out += ' else { ';\r\n      }\r\n    }\r\n  }\r\n  it.errorPath = $currentErrorPath;\r\n  var $currentBaseId = $it.baseId;\r\n  for (var $property in $schemaDeps) {\r\n    var $sch = $schemaDeps[$property];\r\n    if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\r\n      if ($ownProperties) {\r\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\r\n      }\r\n      out += ') { ';\r\n      $it.schema = $sch;\r\n      $it.schemaPath = $schemaPath + it.util.getProperty($property);\r\n      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);\r\n      out += '  ' + (it.validate($it)) + ' ';\r\n      $it.baseId = $currentBaseId;\r\n      out += ' }  ';\r\n      if ($breakOnError) {\r\n        out += ' if (' + ($nextValid) + ') { ';\r\n        $closingBraces += '}';\r\n      }\r\n    }\r\n  }\r\n  if ($breakOnError) {\r\n    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_enum(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $i = 'i' + $lvl,\r\n    $vSchema = 'schema' + $lvl;\r\n  if (!$isData) {\r\n    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';\r\n  }\r\n  out += 'var ' + ($valid) + ';';\r\n  if ($isData) {\r\n    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\r\n  }\r\n  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';\r\n  if ($isData) {\r\n    out += '  }  ';\r\n  }\r\n  out += ' if (!' + ($valid) + ') {   ';\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('enum') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should be equal to one of the allowed values\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += ' }';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  if (it.opts.format === false) {\r\n    if ($breakOnError) {\r\n      out += ' if (true) { ';\r\n    }\r\n    return out;\r\n  }\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $unknownFormats = it.opts.unknownFormats,\r\n    $allowUnknown = Array.isArray($unknownFormats);\r\n  if ($isData) {\r\n    var $format = 'format' + $lvl,\r\n      $isObject = 'isObject' + $lvl,\r\n      $formatType = 'formatType' + $lvl;\r\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\r\n    if (it.async) {\r\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\r\n    }\r\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\r\n    if ($isData) {\r\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\r\n    }\r\n    out += ' (';\r\n    if ($unknownFormats != 'ignore') {\r\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\r\n      if ($allowUnknown) {\r\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\r\n      }\r\n      out += ') || ';\r\n    }\r\n    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\r\n    if (it.async) {\r\n      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\r\n    } else {\r\n      out += ' ' + ($format) + '(' + ($data) + ') ';\r\n    }\r\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\r\n  } else {\r\n    var $format = it.formats[$schema];\r\n    if (!$format) {\r\n      if ($unknownFormats == 'ignore') {\r\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\r\n        if ($breakOnError) {\r\n          out += ' if (true) { ';\r\n        }\r\n        return out;\r\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\r\n        if ($breakOnError) {\r\n          out += ' if (true) { ';\r\n        }\r\n        return out;\r\n      } else {\r\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\r\n      }\r\n    }\r\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\r\n    var $formatType = $isObject && $format.type || 'string';\r\n    if ($isObject) {\r\n      var $async = $format.async === true;\r\n      $format = $format.validate;\r\n    }\r\n    if ($formatType != $ruleType) {\r\n      if ($breakOnError) {\r\n        out += ' if (true) { ';\r\n      }\r\n      return out;\r\n    }\r\n    if ($async) {\r\n      if (!it.async) throw new Error('async format in sync schema');\r\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\r\n      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';\r\n    } else {\r\n      out += ' if (! ';\r\n      var $formatRef = 'formats' + it.util.getProperty($schema);\r\n      if ($isObject) $formatRef += '.validate';\r\n      if (typeof $format == 'function') {\r\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\r\n      } else {\r\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\r\n      }\r\n      out += ') { ';\r\n    }\r\n  }\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\r\n    if ($isData) {\r\n      out += '' + ($schemaValue);\r\n    } else {\r\n      out += '' + (it.util.toQuotedString($schema));\r\n    }\r\n    out += '  } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should match format \"';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\r\n      } else {\r\n        out += '' + (it.util.escapeQuotes($schema));\r\n      }\r\n      out += '\"\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + (it.util.toQuotedString($schema));\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += ' } ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_if(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $thenSch = it.schema['then'],\r\n    $elseSch = it.schema['else'],\r\n    $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? (typeof $thenSch == 'object' && Object.keys($thenSch).length > 0) || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)),\r\n    $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? (typeof $elseSch == 'object' && Object.keys($elseSch).length > 0) || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)),\r\n    $currentBaseId = $it.baseId;\r\n  if ($thenPresent || $elsePresent) {\r\n    var $ifClause;\r\n    $it.createErrors = false;\r\n    $it.schema = $schema;\r\n    $it.schemaPath = $schemaPath;\r\n    $it.errSchemaPath = $errSchemaPath;\r\n    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    out += '  ' + (it.validate($it)) + ' ';\r\n    $it.baseId = $currentBaseId;\r\n    $it.createErrors = true;\r\n    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    if ($thenPresent) {\r\n      out += ' if (' + ($nextValid) + ') {  ';\r\n      $it.schema = it.schema['then'];\r\n      $it.schemaPath = it.schemaPath + '.then';\r\n      $it.errSchemaPath = it.errSchemaPath + '/then';\r\n      out += '  ' + (it.validate($it)) + ' ';\r\n      $it.baseId = $currentBaseId;\r\n      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';\r\n      if ($thenPresent && $elsePresent) {\r\n        $ifClause = 'ifClause' + $lvl;\r\n        out += ' var ' + ($ifClause) + ' = \\'then\\'; ';\r\n      } else {\r\n        $ifClause = '\\'then\\'';\r\n      }\r\n      out += ' } ';\r\n      if ($elsePresent) {\r\n        out += ' else { ';\r\n      }\r\n    } else {\r\n      out += ' if (!' + ($nextValid) + ') { ';\r\n    }\r\n    if ($elsePresent) {\r\n      $it.schema = it.schema['else'];\r\n      $it.schemaPath = it.schemaPath + '.else';\r\n      $it.errSchemaPath = it.errSchemaPath + '/else';\r\n      out += '  ' + (it.validate($it)) + ' ';\r\n      $it.baseId = $currentBaseId;\r\n      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';\r\n      if ($thenPresent && $elsePresent) {\r\n        $ifClause = 'ifClause' + $lvl;\r\n        out += ' var ' + ($ifClause) + ' = \\'else\\'; ';\r\n      } else {\r\n        $ifClause = '\\'else\\'';\r\n      }\r\n      out += ' } ';\r\n    }\r\n    out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('if') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should match \"\\' + ' + ($ifClause) + ' + \\'\" schema\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError(vErrors); ';\r\n      } else {\r\n        out += ' validate.errors = vErrors; return false; ';\r\n      }\r\n    }\r\n    out += ' }   ';\r\n    if ($breakOnError) {\r\n      out += ' else { ';\r\n    }\r\n  } else {\r\n    if ($breakOnError) {\r\n      out += ' if (true) { ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_items(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $idx = 'i' + $lvl,\r\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\r\n    $nextData = 'data' + $dataNxt,\r\n    $currentBaseId = it.baseId;\r\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\r\n  if (Array.isArray($schema)) {\r\n    var $additionalItems = it.schema.additionalItems;\r\n    if ($additionalItems === false) {\r\n      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';\r\n      var $currErrSchemaPath = $errSchemaPath;\r\n      $errSchemaPath = it.errSchemaPath + '/additionalItems';\r\n      out += '  if (!' + ($valid) + ') {   ';\r\n      var $$outStack = $$outStack || [];\r\n      $$outStack.push(out);\r\n      out = ''; /* istanbul ignore else */\r\n      if (it.createErrors !== false) {\r\n        out += ' { keyword: \\'' + ('additionalItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';\r\n        if (it.opts.messages !== false) {\r\n          out += ' , message: \\'should NOT have more than ' + ($schema.length) + ' items\\' ';\r\n        }\r\n        if (it.opts.verbose) {\r\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n        }\r\n        out += ' } ';\r\n      } else {\r\n        out += ' {} ';\r\n      }\r\n      var __err = out;\r\n      out = $$outStack.pop();\r\n      if (!it.compositeRule && $breakOnError) {\r\n        /* istanbul ignore if */\r\n        if (it.async) {\r\n          out += ' throw new ValidationError([' + (__err) + ']); ';\r\n        } else {\r\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n        }\r\n      } else {\r\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n      }\r\n      out += ' } ';\r\n      $errSchemaPath = $currErrSchemaPath;\r\n      if ($breakOnError) {\r\n        $closingBraces += '}';\r\n        out += ' else { ';\r\n      }\r\n    }\r\n    var arr1 = $schema;\r\n    if (arr1) {\r\n      var $sch, $i = -1,\r\n        l1 = arr1.length - 1;\r\n      while ($i < l1) {\r\n        $sch = arr1[$i += 1];\r\n        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';\r\n          var $passData = $data + '[' + $i + ']';\r\n          $it.schema = $sch;\r\n          $it.schemaPath = $schemaPath + '[' + $i + ']';\r\n          $it.errSchemaPath = $errSchemaPath + '/' + $i;\r\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\r\n          $it.dataPathArr[$dataNxt] = $i;\r\n          var $code = it.validate($it);\r\n          $it.baseId = $currentBaseId;\r\n          if (it.util.varOccurences($code, $nextData) < 2) {\r\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n          } else {\r\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n          }\r\n          out += ' }  ';\r\n          if ($breakOnError) {\r\n            out += ' if (' + ($nextValid) + ') { ';\r\n            $closingBraces += '}';\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? (typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0) || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {\r\n      $it.schema = $additionalItems;\r\n      $it.schemaPath = it.schemaPath + '.additionalItems';\r\n      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';\r\n      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\r\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\r\n      var $passData = $data + '[' + $idx + ']';\r\n      $it.dataPathArr[$dataNxt] = $idx;\r\n      var $code = it.validate($it);\r\n      $it.baseId = $currentBaseId;\r\n      if (it.util.varOccurences($code, $nextData) < 2) {\r\n        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n      } else {\r\n        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n      }\r\n      if ($breakOnError) {\r\n        out += ' if (!' + ($nextValid) + ') break; ';\r\n      }\r\n      out += ' } }  ';\r\n      if ($breakOnError) {\r\n        out += ' if (' + ($nextValid) + ') { ';\r\n        $closingBraces += '}';\r\n      }\r\n    }\r\n  } else if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {\r\n    $it.schema = $schema;\r\n    $it.schemaPath = $schemaPath;\r\n    $it.errSchemaPath = $errSchemaPath;\r\n    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\r\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\r\n    var $passData = $data + '[' + $idx + ']';\r\n    $it.dataPathArr[$dataNxt] = $idx;\r\n    var $code = it.validate($it);\r\n    $it.baseId = $currentBaseId;\r\n    if (it.util.varOccurences($code, $nextData) < 2) {\r\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n    } else {\r\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n    }\r\n    if ($breakOnError) {\r\n      out += ' if (!' + ($nextValid) + ') break; ';\r\n    }\r\n    out += ' }';\r\n  }\r\n  if ($breakOnError) {\r\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate__limit(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $errorKeyword;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $isMax = $keyword == 'maximum',\r\n    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',\r\n    $schemaExcl = it.schema[$exclusiveKeyword],\r\n    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\r\n    $op = $isMax ? '<' : '>',\r\n    $notOp = $isMax ? '>' : '<',\r\n    $errorKeyword = undefined;\r\n  if (!($isData || typeof $schema == 'number' || $schema === undefined)) {\r\n    throw new Error($keyword + ' must be number');\r\n  }\r\n  if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == 'number' || typeof $schemaExcl == 'boolean')) {\r\n    throw new Error($exclusiveKeyword + ' must be number or boolean');\r\n  }\r\n  if ($isDataExcl) {\r\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\r\n      $exclusive = 'exclusive' + $lvl,\r\n      $exclType = 'exclType' + $lvl,\r\n      $exclIsNumber = 'exclIsNumber' + $lvl,\r\n      $opExpr = 'op' + $lvl,\r\n      $opStr = '\\' + ' + $opExpr + ' + \\'';\r\n    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';\r\n    $schemaValueExcl = 'schemaExcl' + $lvl;\r\n    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \\'boolean\\' && ' + ($exclType) + ' != \\'undefined\\' && ' + ($exclType) + ' != \\'number\\') { ';\r\n    var $errorKeyword = $exclusiveKeyword;\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = ''; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ($errorKeyword || '_exclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'' + ($exclusiveKeyword) + ' should be boolean\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    var __err = out;\r\n    out = $$outStack.pop();\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError([' + (__err) + ']); ';\r\n      } else {\r\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n      }\r\n    } else {\r\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    }\r\n    out += ' } else if ( ';\r\n    if ($isData) {\r\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n    }\r\n    out += ' ' + ($exclType) + ' == \\'number\\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \\'' + ($op) + '\\' : \\'' + ($op) + '=\\'; ';\r\n    if ($schema === undefined) {\r\n      $errorKeyword = $exclusiveKeyword;\r\n      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\r\n      $schemaValue = $schemaValueExcl;\r\n      $isData = $isDataExcl;\r\n    }\r\n  } else {\r\n    var $exclIsNumber = typeof $schemaExcl == 'number',\r\n      $opStr = $op;\r\n    if ($exclIsNumber && $isData) {\r\n      var $opExpr = '\\'' + $opStr + '\\'';\r\n      out += ' if ( ';\r\n      if ($isData) {\r\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n      }\r\n      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';\r\n    } else {\r\n      if ($exclIsNumber && $schema === undefined) {\r\n        $exclusive = true;\r\n        $errorKeyword = $exclusiveKeyword;\r\n        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\r\n        $schemaValue = $schemaExcl;\r\n        $notOp += '=';\r\n      } else {\r\n        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);\r\n        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {\r\n          $exclusive = true;\r\n          $errorKeyword = $exclusiveKeyword;\r\n          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\r\n          $notOp += '=';\r\n        } else {\r\n          $exclusive = false;\r\n          $opStr += '=';\r\n        }\r\n      }\r\n      var $opExpr = '\\'' + $opStr + '\\'';\r\n      out += ' if ( ';\r\n      if ($isData) {\r\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n      }\r\n      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';\r\n    }\r\n  }\r\n  $errorKeyword = $errorKeyword || $keyword;\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ($errorKeyword || '_limit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should be ' + ($opStr) + ' ';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue);\r\n      } else {\r\n        out += '' + ($schemaValue) + '\\'';\r\n      }\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += ' } ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate__limitItems(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $errorKeyword;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (!($isData || typeof $schema == 'number')) {\r\n    throw new Error($keyword + ' must be number');\r\n  }\r\n  var $op = $keyword == 'maxItems' ? '>' : '<';\r\n  out += 'if ( ';\r\n  if ($isData) {\r\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n  }\r\n  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';\r\n  var $errorKeyword = $keyword;\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should NOT have ';\r\n      if ($keyword == 'maxItems') {\r\n        out += 'more';\r\n      } else {\r\n        out += 'fewer';\r\n      }\r\n      out += ' than ';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += ' items\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += '} ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate__limitLength(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $errorKeyword;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (!($isData || typeof $schema == 'number')) {\r\n    throw new Error($keyword + ' must be number');\r\n  }\r\n  var $op = $keyword == 'maxLength' ? '>' : '<';\r\n  out += 'if ( ';\r\n  if ($isData) {\r\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n  }\r\n  if (it.opts.unicode === false) {\r\n    out += ' ' + ($data) + '.length ';\r\n  } else {\r\n    out += ' ucs2length(' + ($data) + ') ';\r\n  }\r\n  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';\r\n  var $errorKeyword = $keyword;\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitLength') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should NOT be ';\r\n      if ($keyword == 'maxLength') {\r\n        out += 'longer';\r\n      } else {\r\n        out += 'shorter';\r\n      }\r\n      out += ' than ';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += ' characters\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += '} ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate__limitProperties(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $errorKeyword;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (!($isData || typeof $schema == 'number')) {\r\n    throw new Error($keyword + ' must be number');\r\n  }\r\n  var $op = $keyword == 'maxProperties' ? '>' : '<';\r\n  out += 'if ( ';\r\n  if ($isData) {\r\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\r\n  }\r\n  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';\r\n  var $errorKeyword = $keyword;\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should NOT have ';\r\n      if ($keyword == 'maxProperties') {\r\n        out += 'more';\r\n      } else {\r\n        out += 'fewer';\r\n      }\r\n      out += ' than ';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += ' properties\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += '} ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_multipleOf(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (!($isData || typeof $schema == 'number')) {\r\n    throw new Error($keyword + ' must be number');\r\n  }\r\n  out += 'var division' + ($lvl) + ';if (';\r\n  if ($isData) {\r\n    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \\'number\\' || ';\r\n  }\r\n  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';\r\n  if (it.opts.multipleOfPrecision) {\r\n    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';\r\n  } else {\r\n    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';\r\n  }\r\n  out += ' ) ';\r\n  if ($isData) {\r\n    out += '  )  ';\r\n  }\r\n  out += ' ) {   ';\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('multipleOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should be multiple of ';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue);\r\n      } else {\r\n        out += '' + ($schemaValue) + '\\'';\r\n      }\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + ($schema);\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += '} ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_not(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {\r\n    $it.schema = $schema;\r\n    $it.schemaPath = $schemaPath;\r\n    $it.errSchemaPath = $errSchemaPath;\r\n    out += ' var ' + ($errs) + ' = errors;  ';\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    $it.createErrors = false;\r\n    var $allErrorsOption;\r\n    if ($it.opts.allErrors) {\r\n      $allErrorsOption = $it.opts.allErrors;\r\n      $it.opts.allErrors = false;\r\n    }\r\n    out += ' ' + (it.validate($it)) + ' ';\r\n    $it.createErrors = true;\r\n    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    out += ' if (' + ($nextValid) + ') {   ';\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = ''; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should NOT be valid\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    var __err = out;\r\n    out = $$outStack.pop();\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError([' + (__err) + ']); ';\r\n      } else {\r\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n      }\r\n    } else {\r\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    }\r\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\r\n    if (it.opts.allErrors) {\r\n      out += ' } ';\r\n    }\r\n  } else {\r\n    out += '  var err =   '; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should NOT be valid\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    if ($breakOnError) {\r\n      out += ' if (false) { ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_oneOf(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $currentBaseId = $it.baseId,\r\n    $prevValid = 'prevValid' + $lvl,\r\n    $passingSchemas = 'passingSchemas' + $lvl;\r\n  out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';\r\n  var $wasComposite = it.compositeRule;\r\n  it.compositeRule = $it.compositeRule = true;\r\n  var arr1 = $schema;\r\n  if (arr1) {\r\n    var $sch, $i = -1,\r\n      l1 = arr1.length - 1;\r\n    while ($i < l1) {\r\n      $sch = arr1[$i += 1];\r\n      if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n        $it.schema = $sch;\r\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\r\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\r\n        out += '  ' + (it.validate($it)) + ' ';\r\n        $it.baseId = $currentBaseId;\r\n      } else {\r\n        out += ' var ' + ($nextValid) + ' = true; ';\r\n      }\r\n      if ($i) {\r\n        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';\r\n        $closingBraces += '}';\r\n      }\r\n      out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';\r\n    }\r\n  }\r\n  it.compositeRule = $it.compositeRule = $wasComposite;\r\n  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('oneOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should match exactly one schema in oneOf\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError(vErrors); ';\r\n    } else {\r\n      out += ' validate.errors = vErrors; return false; ';\r\n    }\r\n  }\r\n  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';\r\n  if (it.opts.allErrors) {\r\n    out += ' } ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_pattern(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);\r\n  out += 'if ( ';\r\n  if ($isData) {\r\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\r\n  }\r\n  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';\r\n  var $$outStack = $$outStack || [];\r\n  $$outStack.push(out);\r\n  out = ''; /* istanbul ignore else */\r\n  if (it.createErrors !== false) {\r\n    out += ' { keyword: \\'' + ('pattern') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';\r\n    if ($isData) {\r\n      out += '' + ($schemaValue);\r\n    } else {\r\n      out += '' + (it.util.toQuotedString($schema));\r\n    }\r\n    out += '  } ';\r\n    if (it.opts.messages !== false) {\r\n      out += ' , message: \\'should match pattern \"';\r\n      if ($isData) {\r\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\r\n      } else {\r\n        out += '' + (it.util.escapeQuotes($schema));\r\n      }\r\n      out += '\"\\' ';\r\n    }\r\n    if (it.opts.verbose) {\r\n      out += ' , schema:  ';\r\n      if ($isData) {\r\n        out += 'validate.schema' + ($schemaPath);\r\n      } else {\r\n        out += '' + (it.util.toQuotedString($schema));\r\n      }\r\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n    }\r\n    out += ' } ';\r\n  } else {\r\n    out += ' {} ';\r\n  }\r\n  var __err = out;\r\n  out = $$outStack.pop();\r\n  if (!it.compositeRule && $breakOnError) {\r\n    /* istanbul ignore if */\r\n    if (it.async) {\r\n      out += ' throw new ValidationError([' + (__err) + ']); ';\r\n    } else {\r\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n    }\r\n  } else {\r\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n  }\r\n  out += '} ';\r\n  if ($breakOnError) {\r\n    out += ' else { ';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_properties(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  var $key = 'key' + $lvl,\r\n    $idx = 'idx' + $lvl,\r\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\r\n    $nextData = 'data' + $dataNxt,\r\n    $dataProperties = 'dataProperties' + $lvl;\r\n  var $schemaKeys = Object.keys($schema || {}).filter(notProto),\r\n    $pProperties = it.schema.patternProperties || {},\r\n    $pPropertyKeys = Object.keys($pProperties).filter(notProto),\r\n    $aProperties = it.schema.additionalProperties,\r\n    $someProperties = $schemaKeys.length || $pPropertyKeys.length,\r\n    $noAdditional = $aProperties === false,\r\n    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\r\n    $removeAdditional = it.opts.removeAdditional,\r\n    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\r\n    $ownProperties = it.opts.ownProperties,\r\n    $currentBaseId = it.baseId;\r\n  var $required = it.schema.required;\r\n  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {\r\n    var $requiredHash = it.util.toHash($required);\r\n  }\r\n\r\n  function notProto(p) {\r\n    return p !== '__proto__';\r\n  }\r\n  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';\r\n  if ($ownProperties) {\r\n    out += ' var ' + ($dataProperties) + ' = undefined;';\r\n  }\r\n  if ($checkAdditional) {\r\n    if ($ownProperties) {\r\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\r\n    } else {\r\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\r\n    }\r\n    if ($someProperties) {\r\n      out += ' var isAdditional' + ($lvl) + ' = !(false ';\r\n      if ($schemaKeys.length) {\r\n        if ($schemaKeys.length > 8) {\r\n          out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';\r\n        } else {\r\n          var arr1 = $schemaKeys;\r\n          if (arr1) {\r\n            var $propertyKey, i1 = -1,\r\n              l1 = arr1.length - 1;\r\n            while (i1 < l1) {\r\n              $propertyKey = arr1[i1 += 1];\r\n              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if ($pPropertyKeys.length) {\r\n        var arr2 = $pPropertyKeys;\r\n        if (arr2) {\r\n          var $pProperty, $i = -1,\r\n            l2 = arr2.length - 1;\r\n          while ($i < l2) {\r\n            $pProperty = arr2[$i += 1];\r\n            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';\r\n          }\r\n        }\r\n      }\r\n      out += ' ); if (isAdditional' + ($lvl) + ') { ';\r\n    }\r\n    if ($removeAdditional == 'all') {\r\n      out += ' delete ' + ($data) + '[' + ($key) + ']; ';\r\n    } else {\r\n      var $currentErrorPath = it.errorPath;\r\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\r\n      if (it.opts._errorDataPathProperty) {\r\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\r\n      }\r\n      if ($noAdditional) {\r\n        if ($removeAdditional) {\r\n          out += ' delete ' + ($data) + '[' + ($key) + ']; ';\r\n        } else {\r\n          out += ' ' + ($nextValid) + ' = false; ';\r\n          var $currErrSchemaPath = $errSchemaPath;\r\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\r\n          var $$outStack = $$outStack || [];\r\n          $$outStack.push(out);\r\n          out = ''; /* istanbul ignore else */\r\n          if (it.createErrors !== false) {\r\n            out += ' { keyword: \\'' + ('additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\'' + ($additionalProperty) + '\\' } ';\r\n            if (it.opts.messages !== false) {\r\n              out += ' , message: \\'';\r\n              if (it.opts._errorDataPathProperty) {\r\n                out += 'is an invalid additional property';\r\n              } else {\r\n                out += 'should NOT have additional properties';\r\n              }\r\n              out += '\\' ';\r\n            }\r\n            if (it.opts.verbose) {\r\n              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n            }\r\n            out += ' } ';\r\n          } else {\r\n            out += ' {} ';\r\n          }\r\n          var __err = out;\r\n          out = $$outStack.pop();\r\n          if (!it.compositeRule && $breakOnError) {\r\n            /* istanbul ignore if */\r\n            if (it.async) {\r\n              out += ' throw new ValidationError([' + (__err) + ']); ';\r\n            } else {\r\n              out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n            }\r\n          } else {\r\n            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n          }\r\n          $errSchemaPath = $currErrSchemaPath;\r\n          if ($breakOnError) {\r\n            out += ' break; ';\r\n          }\r\n        }\r\n      } else if ($additionalIsSchema) {\r\n        if ($removeAdditional == 'failing') {\r\n          out += ' var ' + ($errs) + ' = errors;  ';\r\n          var $wasComposite = it.compositeRule;\r\n          it.compositeRule = $it.compositeRule = true;\r\n          $it.schema = $aProperties;\r\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\r\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\r\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\r\n          var $passData = $data + '[' + $key + ']';\r\n          $it.dataPathArr[$dataNxt] = $key;\r\n          var $code = it.validate($it);\r\n          $it.baseId = $currentBaseId;\r\n          if (it.util.varOccurences($code, $nextData) < 2) {\r\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n          } else {\r\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n          }\r\n          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';\r\n          it.compositeRule = $it.compositeRule = $wasComposite;\r\n        } else {\r\n          $it.schema = $aProperties;\r\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\r\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\r\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\r\n          var $passData = $data + '[' + $key + ']';\r\n          $it.dataPathArr[$dataNxt] = $key;\r\n          var $code = it.validate($it);\r\n          $it.baseId = $currentBaseId;\r\n          if (it.util.varOccurences($code, $nextData) < 2) {\r\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n          } else {\r\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n          }\r\n          if ($breakOnError) {\r\n            out += ' if (!' + ($nextValid) + ') break; ';\r\n          }\r\n        }\r\n      }\r\n      it.errorPath = $currentErrorPath;\r\n    }\r\n    if ($someProperties) {\r\n      out += ' } ';\r\n    }\r\n    out += ' }  ';\r\n    if ($breakOnError) {\r\n      out += ' if (' + ($nextValid) + ') { ';\r\n      $closingBraces += '}';\r\n    }\r\n  }\r\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\r\n  if ($schemaKeys.length) {\r\n    var arr3 = $schemaKeys;\r\n    if (arr3) {\r\n      var $propertyKey, i3 = -1,\r\n        l3 = arr3.length - 1;\r\n      while (i3 < l3) {\r\n        $propertyKey = arr3[i3 += 1];\r\n        var $sch = $schema[$propertyKey];\r\n        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n          var $prop = it.util.getProperty($propertyKey),\r\n            $passData = $data + $prop,\r\n            $hasDefault = $useDefaults && $sch.default !== undefined;\r\n          $it.schema = $sch;\r\n          $it.schemaPath = $schemaPath + $prop;\r\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\r\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\r\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\r\n          var $code = it.validate($it);\r\n          $it.baseId = $currentBaseId;\r\n          if (it.util.varOccurences($code, $nextData) < 2) {\r\n            $code = it.util.varReplace($code, $nextData, $passData);\r\n            var $useData = $passData;\r\n          } else {\r\n            var $useData = $nextData;\r\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';\r\n          }\r\n          if ($hasDefault) {\r\n            out += ' ' + ($code) + ' ';\r\n          } else {\r\n            if ($requiredHash && $requiredHash[$propertyKey]) {\r\n              out += ' if ( ' + ($useData) + ' === undefined ';\r\n              if ($ownProperties) {\r\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n              }\r\n              out += ') { ' + ($nextValid) + ' = false; ';\r\n              var $currentErrorPath = it.errorPath,\r\n                $currErrSchemaPath = $errSchemaPath,\r\n                $missingProperty = it.util.escapeQuotes($propertyKey);\r\n              if (it.opts._errorDataPathProperty) {\r\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\r\n              }\r\n              $errSchemaPath = it.errSchemaPath + '/required';\r\n              var $$outStack = $$outStack || [];\r\n              $$outStack.push(out);\r\n              out = ''; /* istanbul ignore else */\r\n              if (it.createErrors !== false) {\r\n                out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n                if (it.opts.messages !== false) {\r\n                  out += ' , message: \\'';\r\n                  if (it.opts._errorDataPathProperty) {\r\n                    out += 'is a required property';\r\n                  } else {\r\n                    out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n                  }\r\n                  out += '\\' ';\r\n                }\r\n                if (it.opts.verbose) {\r\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n                }\r\n                out += ' } ';\r\n              } else {\r\n                out += ' {} ';\r\n              }\r\n              var __err = out;\r\n              out = $$outStack.pop();\r\n              if (!it.compositeRule && $breakOnError) {\r\n                /* istanbul ignore if */\r\n                if (it.async) {\r\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\r\n                } else {\r\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n                }\r\n              } else {\r\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n              }\r\n              $errSchemaPath = $currErrSchemaPath;\r\n              it.errorPath = $currentErrorPath;\r\n              out += ' } else { ';\r\n            } else {\r\n              if ($breakOnError) {\r\n                out += ' if ( ' + ($useData) + ' === undefined ';\r\n                if ($ownProperties) {\r\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n                }\r\n                out += ') { ' + ($nextValid) + ' = true; } else { ';\r\n              } else {\r\n                out += ' if (' + ($useData) + ' !== undefined ';\r\n                if ($ownProperties) {\r\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n                }\r\n                out += ' ) { ';\r\n              }\r\n            }\r\n            out += ' ' + ($code) + ' } ';\r\n          }\r\n        }\r\n        if ($breakOnError) {\r\n          out += ' if (' + ($nextValid) + ') { ';\r\n          $closingBraces += '}';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if ($pPropertyKeys.length) {\r\n    var arr4 = $pPropertyKeys;\r\n    if (arr4) {\r\n      var $pProperty, i4 = -1,\r\n        l4 = arr4.length - 1;\r\n      while (i4 < l4) {\r\n        $pProperty = arr4[i4 += 1];\r\n        var $sch = $pProperties[$pProperty];\r\n        if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {\r\n          $it.schema = $sch;\r\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\r\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\r\n          if ($ownProperties) {\r\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\r\n          } else {\r\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\r\n          }\r\n          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';\r\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\r\n          var $passData = $data + '[' + $key + ']';\r\n          $it.dataPathArr[$dataNxt] = $key;\r\n          var $code = it.validate($it);\r\n          $it.baseId = $currentBaseId;\r\n          if (it.util.varOccurences($code, $nextData) < 2) {\r\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n          } else {\r\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n          }\r\n          if ($breakOnError) {\r\n            out += ' if (!' + ($nextValid) + ') break; ';\r\n          }\r\n          out += ' } ';\r\n          if ($breakOnError) {\r\n            out += ' else ' + ($nextValid) + ' = true; ';\r\n          }\r\n          out += ' }  ';\r\n          if ($breakOnError) {\r\n            out += ' if (' + ($nextValid) + ') { ';\r\n            $closingBraces += '}';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if ($breakOnError) {\r\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_propertyNames(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $errs = 'errs__' + $lvl;\r\n  var $it = it.util.copy(it);\r\n  var $closingBraces = '';\r\n  $it.level++;\r\n  var $nextValid = 'valid' + $it.level;\r\n  out += 'var ' + ($errs) + ' = errors;';\r\n  if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {\r\n    $it.schema = $schema;\r\n    $it.schemaPath = $schemaPath;\r\n    $it.errSchemaPath = $errSchemaPath;\r\n    var $key = 'key' + $lvl,\r\n      $idx = 'idx' + $lvl,\r\n      $i = 'i' + $lvl,\r\n      $invalidName = '\\' + ' + $key + ' + \\'',\r\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\r\n      $nextData = 'data' + $dataNxt,\r\n      $dataProperties = 'dataProperties' + $lvl,\r\n      $ownProperties = it.opts.ownProperties,\r\n      $currentBaseId = it.baseId;\r\n    if ($ownProperties) {\r\n      out += ' var ' + ($dataProperties) + ' = undefined; ';\r\n    }\r\n    if ($ownProperties) {\r\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\r\n    } else {\r\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\r\n    }\r\n    out += ' var startErrs' + ($lvl) + ' = errors; ';\r\n    var $passData = $key;\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    var $code = it.validate($it);\r\n    $it.baseId = $currentBaseId;\r\n    if (it.util.varOccurences($code, $nextData) < 2) {\r\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\r\n    } else {\r\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\r\n    }\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('propertyNames') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \\'' + ($invalidName) + '\\' } ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'property name \\\\\\'' + ($invalidName) + '\\\\\\' is invalid\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError(vErrors); ';\r\n      } else {\r\n        out += ' validate.errors = vErrors; return false; ';\r\n      }\r\n    }\r\n    if ($breakOnError) {\r\n      out += ' break; ';\r\n    }\r\n    out += ' } }';\r\n  }\r\n  if ($breakOnError) {\r\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_required(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $vSchema = 'schema' + $lvl;\r\n  if (!$isData) {\r\n    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {\r\n      var $required = [];\r\n      var arr1 = $schema;\r\n      if (arr1) {\r\n        var $property, i1 = -1,\r\n          l1 = arr1.length - 1;\r\n        while (i1 < l1) {\r\n          $property = arr1[i1 += 1];\r\n          var $propertySch = it.schema.properties[$property];\r\n          if (!($propertySch && (it.opts.strictKeywords ? (typeof $propertySch == 'object' && Object.keys($propertySch).length > 0) || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {\r\n            $required[$required.length] = $property;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      var $required = $schema;\r\n    }\r\n  }\r\n  if ($isData || $required.length) {\r\n    var $currentErrorPath = it.errorPath,\r\n      $loopRequired = $isData || $required.length >= it.opts.loopRequired,\r\n      $ownProperties = it.opts.ownProperties;\r\n    if ($breakOnError) {\r\n      out += ' var missing' + ($lvl) + '; ';\r\n      if ($loopRequired) {\r\n        if (!$isData) {\r\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\r\n        }\r\n        var $i = 'i' + $lvl,\r\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\r\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\r\n        if (it.opts._errorDataPathProperty) {\r\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\r\n        }\r\n        out += ' var ' + ($valid) + ' = true; ';\r\n        if ($isData) {\r\n          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\r\n        }\r\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';\r\n        if ($ownProperties) {\r\n          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\r\n        }\r\n        out += '; if (!' + ($valid) + ') break; } ';\r\n        if ($isData) {\r\n          out += '  }  ';\r\n        }\r\n        out += '  if (!' + ($valid) + ') {   ';\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'';\r\n            if (it.opts._errorDataPathProperty) {\r\n              out += 'is a required property';\r\n            } else {\r\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n            }\r\n            out += '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n        out += ' } else { ';\r\n      } else {\r\n        out += ' if ( ';\r\n        var arr2 = $required;\r\n        if (arr2) {\r\n          var $propertyKey, $i = -1,\r\n            l2 = arr2.length - 1;\r\n          while ($i < l2) {\r\n            $propertyKey = arr2[$i += 1];\r\n            if ($i) {\r\n              out += ' || ';\r\n            }\r\n            var $prop = it.util.getProperty($propertyKey),\r\n              $useData = $data + $prop;\r\n            out += ' ( ( ' + ($useData) + ' === undefined ';\r\n            if ($ownProperties) {\r\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n            }\r\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\r\n          }\r\n        }\r\n        out += ') {  ';\r\n        var $propertyPath = 'missing' + $lvl,\r\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\r\n        if (it.opts._errorDataPathProperty) {\r\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\r\n        }\r\n        var $$outStack = $$outStack || [];\r\n        $$outStack.push(out);\r\n        out = ''; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'';\r\n            if (it.opts._errorDataPathProperty) {\r\n              out += 'is a required property';\r\n            } else {\r\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n            }\r\n            out += '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        var __err = out;\r\n        out = $$outStack.pop();\r\n        if (!it.compositeRule && $breakOnError) {\r\n          /* istanbul ignore if */\r\n          if (it.async) {\r\n            out += ' throw new ValidationError([' + (__err) + ']); ';\r\n          } else {\r\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n          }\r\n        } else {\r\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n        }\r\n        out += ' } else { ';\r\n      }\r\n    } else {\r\n      if ($loopRequired) {\r\n        if (!$isData) {\r\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\r\n        }\r\n        var $i = 'i' + $lvl,\r\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\r\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\r\n        if (it.opts._errorDataPathProperty) {\r\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\r\n        }\r\n        if ($isData) {\r\n          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */\r\n          if (it.createErrors !== false) {\r\n            out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n            if (it.opts.messages !== false) {\r\n              out += ' , message: \\'';\r\n              if (it.opts._errorDataPathProperty) {\r\n                out += 'is a required property';\r\n              } else {\r\n                out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n              }\r\n              out += '\\' ';\r\n            }\r\n            if (it.opts.verbose) {\r\n              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n            }\r\n            out += ' } ';\r\n          } else {\r\n            out += ' {} ';\r\n          }\r\n          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';\r\n        }\r\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';\r\n        if ($ownProperties) {\r\n          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\r\n        }\r\n        out += ') {  var err =   '; /* istanbul ignore else */\r\n        if (it.createErrors !== false) {\r\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n          if (it.opts.messages !== false) {\r\n            out += ' , message: \\'';\r\n            if (it.opts._errorDataPathProperty) {\r\n              out += 'is a required property';\r\n            } else {\r\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n            }\r\n            out += '\\' ';\r\n          }\r\n          if (it.opts.verbose) {\r\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n          }\r\n          out += ' } ';\r\n        } else {\r\n          out += ' {} ';\r\n        }\r\n        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';\r\n        if ($isData) {\r\n          out += '  }  ';\r\n        }\r\n      } else {\r\n        var arr3 = $required;\r\n        if (arr3) {\r\n          var $propertyKey, i3 = -1,\r\n            l3 = arr3.length - 1;\r\n          while (i3 < l3) {\r\n            $propertyKey = arr3[i3 += 1];\r\n            var $prop = it.util.getProperty($propertyKey),\r\n              $missingProperty = it.util.escapeQuotes($propertyKey),\r\n              $useData = $data + $prop;\r\n            if (it.opts._errorDataPathProperty) {\r\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\r\n            }\r\n            out += ' if ( ' + ($useData) + ' === undefined ';\r\n            if ($ownProperties) {\r\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\r\n            }\r\n            out += ') {  var err =   '; /* istanbul ignore else */\r\n            if (it.createErrors !== false) {\r\n              out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\r\n              if (it.opts.messages !== false) {\r\n                out += ' , message: \\'';\r\n                if (it.opts._errorDataPathProperty) {\r\n                  out += 'is a required property';\r\n                } else {\r\n                  out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\r\n                }\r\n                out += '\\' ';\r\n              }\r\n              if (it.opts.verbose) {\r\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n              }\r\n              out += ' } ';\r\n            } else {\r\n              out += ' {} ';\r\n            }\r\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\r\n          }\r\n        }\r\n      }\r\n    }\r\n    it.errorPath = $currentErrorPath;\r\n  } else if ($breakOnError) {\r\n    out += ' if (true) {';\r\n  }\r\n  return out;\r\n}\r\n","\r\nmodule.exports = function generate_uniqueItems(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  if (($schema || $isData) && it.opts.uniqueItems !== false) {\r\n    if ($isData) {\r\n      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\'boolean\\') ' + ($valid) + ' = false; else { ';\r\n    }\r\n    out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';\r\n    var $itemType = it.schema.items && it.schema.items.type,\r\n      $typeIsArray = Array.isArray($itemType);\r\n    if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {\r\n      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';\r\n    } else {\r\n      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';\r\n      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');\r\n      out += ' if (' + (it.util[$method]($itemType, 'item', it.opts.strictNumbers, true)) + ') continue; ';\r\n      if ($typeIsArray) {\r\n        out += ' if (typeof item == \\'string\\') item = \\'\"\\' + item; ';\r\n      }\r\n      out += ' if (typeof itemIndices[item] == \\'number\\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';\r\n    }\r\n    out += ' } ';\r\n    if ($isData) {\r\n      out += '  }  ';\r\n    }\r\n    out += ' if (!' + ($valid) + ') {   ';\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = ''; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ('uniqueItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should NOT have duplicate items (items ## \\' + j + \\' and \\' + i + \\' are identical)\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema:  ';\r\n        if ($isData) {\r\n          out += 'validate.schema' + ($schemaPath);\r\n        } else {\r\n          out += '' + ($schema);\r\n        }\r\n        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    var __err = out;\r\n    out = $$outStack.pop();\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError([' + (__err) + ']); ';\r\n      } else {\r\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n      }\r\n    } else {\r\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    }\r\n    out += ' } ';\r\n    if ($breakOnError) {\r\n      out += ' else { ';\r\n    }\r\n  } else {\r\n    if ($breakOnError) {\r\n      out += ' if (true) { ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\n\r\nvar KEYWORDS = [\r\n  'multipleOf',\r\n  'maximum',\r\n  'exclusiveMaximum',\r\n  'minimum',\r\n  'exclusiveMinimum',\r\n  'maxLength',\r\n  'minLength',\r\n  'pattern',\r\n  'additionalItems',\r\n  'maxItems',\r\n  'minItems',\r\n  'uniqueItems',\r\n  'maxProperties',\r\n  'minProperties',\r\n  'required',\r\n  'additionalProperties',\r\n  'enum',\r\n  'format',\r\n  'const'\r\n];\r\n\r\nmodule.exports = function (metaSchema, keywordsJsonPointers) {\r\n  for (var i=0; i<keywordsJsonPointers.length; i++) {\r\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\r\n    var segments = keywordsJsonPointers[i].split('/');\r\n    var keywords = metaSchema;\r\n    var j;\r\n    for (j=1; j<segments.length; j++)\r\n      keywords = keywords[segments[j]];\r\n\r\n    for (j=0; j<KEYWORDS.length; j++) {\r\n      var key = KEYWORDS[j];\r\n      var schema = keywords[key];\r\n      if (schema) {\r\n        keywords[key] = {\r\n          anyOf: [\r\n            schema,\r\n            { $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }\r\n          ]\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return metaSchema;\r\n};\r\n","\r\n\r\nvar MissingRefError = require('./error_classes').MissingRef;\r\n\r\nmodule.exports = compileAsync;\r\n\r\n\r\n/**\r\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\r\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\r\n * @this  Ajv\r\n * @param {Object}   schema schema object\r\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\r\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\r\n * @return {Promise} promise that resolves with a validating function.\r\n */\r\nfunction compileAsync(schema, meta, callback) {\r\n  /* eslint no-shadow: 0 */\r\n  /* global Promise */\r\n  /* jshint validthis: true */\r\n  var self = this;\r\n  if (typeof this._opts.loadSchema != 'function')\r\n    throw new Error('options.loadSchema should be a function');\r\n\r\n  if (typeof meta == 'function') {\r\n    callback = meta;\r\n    meta = undefined;\r\n  }\r\n\r\n  var p = loadMetaSchemaOf(schema).then(function () {\r\n    var schemaObj = self._addSchema(schema, undefined, meta);\r\n    return schemaObj.validate || _compileAsync(schemaObj);\r\n  });\r\n\r\n  if (callback) {\r\n    p.then(\r\n      function(v) { callback(null, v); },\r\n      callback\r\n    );\r\n  }\r\n\r\n  return p;\r\n\r\n\r\n  function loadMetaSchemaOf(sch) {\r\n    var $schema = sch.$schema;\r\n    return $schema && !self.getSchema($schema)\r\n            ? compileAsync.call(self, { $ref: $schema }, true)\r\n            : Promise.resolve();\r\n  }\r\n\r\n\r\n  function _compileAsync(schemaObj) {\r\n    try { return self._compile(schemaObj); }\r\n    catch(e) {\r\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\r\n      throw e;\r\n    }\r\n\r\n\r\n    function loadMissingSchema(e) {\r\n      var ref = e.missingSchema;\r\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\r\n\r\n      var schemaPromise = self._loadingSchemas[ref];\r\n      if (!schemaPromise) {\r\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\r\n        schemaPromise.then(removePromise, removePromise);\r\n      }\r\n\r\n      return schemaPromise.then(function (sch) {\r\n        if (!added(ref)) {\r\n          return loadMetaSchemaOf(sch).then(function () {\r\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\r\n          });\r\n        }\r\n      }).then(function() {\r\n        return _compileAsync(schemaObj);\r\n      });\r\n\r\n      function removePromise() {\r\n        delete self._loadingSchemas[ref];\r\n      }\r\n\r\n      function added(ref) {\r\n        return self._refs[ref] || self._schemas[ref];\r\n      }\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\r\nvar customRuleCode = require('./dotjs/custom');\r\nvar definitionSchema = require('./definition_schema');\r\n\r\nmodule.exports = {\r\n  add: addKeyword,\r\n  get: getKeyword,\r\n  remove: removeKeyword,\r\n  validate: validateKeyword\r\n};\r\n\r\n\r\n/**\r\n * Define custom keyword\r\n * @this  Ajv\r\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\r\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction addKeyword(keyword, definition) {\r\n  /* jshint validthis: true */\r\n  /* eslint no-shadow: 0 */\r\n  var RULES = this.RULES;\r\n  if (RULES.keywords[keyword])\r\n    throw new Error('Keyword ' + keyword + ' is already defined');\r\n\r\n  if (!IDENTIFIER.test(keyword))\r\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\r\n\r\n  if (definition) {\r\n    this.validateKeyword(definition, true);\r\n\r\n    var dataType = definition.type;\r\n    if (Array.isArray(dataType)) {\r\n      for (var i=0; i<dataType.length; i++)\r\n        _addRule(keyword, dataType[i], definition);\r\n    } else {\r\n      _addRule(keyword, dataType, definition);\r\n    }\r\n\r\n    var metaSchema = definition.metaSchema;\r\n    if (metaSchema) {\r\n      if (definition.$data && this._opts.$data) {\r\n        metaSchema = {\r\n          anyOf: [\r\n            metaSchema,\r\n            { '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }\r\n          ]\r\n        };\r\n      }\r\n      definition.validateSchema = this.compile(metaSchema, true);\r\n    }\r\n  }\r\n\r\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\r\n\r\n\r\n  function _addRule(keyword, dataType, definition) {\r\n    var ruleGroup;\r\n    for (var i=0; i<RULES.length; i++) {\r\n      var rg = RULES[i];\r\n      if (rg.type == dataType) {\r\n        ruleGroup = rg;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!ruleGroup) {\r\n      ruleGroup = { type: dataType, rules: [] };\r\n      RULES.push(ruleGroup);\r\n    }\r\n\r\n    var rule = {\r\n      keyword: keyword,\r\n      definition: definition,\r\n      custom: true,\r\n      code: customRuleCode,\r\n      implements: definition.implements\r\n    };\r\n    ruleGroup.rules.push(rule);\r\n    RULES.custom[keyword] = rule;\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n * Get keyword\r\n * @this  Ajv\r\n * @param {String} keyword pre-defined or custom keyword.\r\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\r\n */\r\nfunction getKeyword(keyword) {\r\n  /* jshint validthis: true */\r\n  var rule = this.RULES.custom[keyword];\r\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\r\n}\r\n\r\n\r\n/**\r\n * Remove keyword\r\n * @this  Ajv\r\n * @param {String} keyword pre-defined or custom keyword.\r\n * @return {Ajv} this for method chaining\r\n */\r\nfunction removeKeyword(keyword) {\r\n  /* jshint validthis: true */\r\n  var RULES = this.RULES;\r\n  delete RULES.keywords[keyword];\r\n  delete RULES.all[keyword];\r\n  delete RULES.custom[keyword];\r\n  for (var i=0; i<RULES.length; i++) {\r\n    var rules = RULES[i].rules;\r\n    for (var j=0; j<rules.length; j++) {\r\n      if (rules[j].keyword == keyword) {\r\n        rules.splice(j, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n * Validate keyword definition\r\n * @this  Ajv\r\n * @param {Object} definition keyword definition object.\r\n * @param {Boolean} throwError true to throw exception if definition is invalid\r\n * @return {boolean} validation result\r\n */\r\nfunction validateKeyword(definition, throwError) {\r\n  validateKeyword.errors = null;\r\n  var v = this._validateKeyword = this._validateKeyword\r\n                                  || this.compile(definitionSchema, true);\r\n\r\n  if (v(definition)) return true;\r\n  validateKeyword.errors = v.errors;\r\n  if (throwError)\r\n    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));\r\n  else\r\n    return false;\r\n}\r\n","\r\nmodule.exports = function generate_custom(it, $keyword, $ruleType) {\r\n  var out = ' ';\r\n  var $lvl = it.level;\r\n  var $dataLvl = it.dataLevel;\r\n  var $schema = it.schema[$keyword];\r\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\r\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\r\n  var $breakOnError = !it.opts.allErrors;\r\n  var $errorKeyword;\r\n  var $data = 'data' + ($dataLvl || '');\r\n  var $valid = 'valid' + $lvl;\r\n  var $errs = 'errs__' + $lvl;\r\n  var $isData = it.opts.$data && $schema && $schema.$data,\r\n    $schemaValue;\r\n  if ($isData) {\r\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\r\n    $schemaValue = 'schema' + $lvl;\r\n  } else {\r\n    $schemaValue = $schema;\r\n  }\r\n  var $rule = this,\r\n    $definition = 'definition' + $lvl,\r\n    $rDef = $rule.definition,\r\n    $closingBraces = '';\r\n  var $compile, $inline, $macro, $ruleValidate, $validateCode;\r\n  if ($isData && $rDef.$data) {\r\n    $validateCode = 'keywordValidate' + $lvl;\r\n    var $validateSchema = $rDef.validateSchema;\r\n    out += ' var ' + ($definition) + ' = RULES.custom[\\'' + ($keyword) + '\\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';\r\n  } else {\r\n    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\r\n    if (!$ruleValidate) return;\r\n    $schemaValue = 'validate.schema' + $schemaPath;\r\n    $validateCode = $ruleValidate.code;\r\n    $compile = $rDef.compile;\r\n    $inline = $rDef.inline;\r\n    $macro = $rDef.macro;\r\n  }\r\n  var $ruleErrs = $validateCode + '.errors',\r\n    $i = 'i' + $lvl,\r\n    $ruleErr = 'ruleErr' + $lvl,\r\n    $asyncKeyword = $rDef.async;\r\n  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');\r\n  if (!($inline || $macro)) {\r\n    out += '' + ($ruleErrs) + ' = null;';\r\n  }\r\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\r\n  if ($isData && $rDef.$data) {\r\n    $closingBraces += '}';\r\n    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';\r\n    if ($validateSchema) {\r\n      $closingBraces += '}';\r\n      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';\r\n    }\r\n  }\r\n  if ($inline) {\r\n    if ($rDef.statements) {\r\n      out += ' ' + ($ruleValidate.validate) + ' ';\r\n    } else {\r\n      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';\r\n    }\r\n  } else if ($macro) {\r\n    var $it = it.util.copy(it);\r\n    var $closingBraces = '';\r\n    $it.level++;\r\n    var $nextValid = 'valid' + $it.level;\r\n    $it.schema = $ruleValidate.validate;\r\n    $it.schemaPath = '';\r\n    var $wasComposite = it.compositeRule;\r\n    it.compositeRule = $it.compositeRule = true;\r\n    var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode);\r\n    it.compositeRule = $it.compositeRule = $wasComposite;\r\n    out += ' ' + ($code);\r\n  } else {\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = '';\r\n    out += '  ' + ($validateCode) + '.call( ';\r\n    if (it.opts.passContext) {\r\n      out += 'this';\r\n    } else {\r\n      out += 'self';\r\n    }\r\n    if ($compile || $rDef.schema === false) {\r\n      out += ' , ' + ($data) + ' ';\r\n    } else {\r\n      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';\r\n    }\r\n    out += ' , (dataPath || \\'\\')';\r\n    if (it.errorPath != '\"\"') {\r\n      out += ' + ' + (it.errorPath);\r\n    }\r\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\r\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\r\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';\r\n    var def_callRuleValidate = out;\r\n    out = $$outStack.pop();\r\n    if ($rDef.errors === false) {\r\n      out += ' ' + ($valid) + ' = ';\r\n      if ($asyncKeyword) {\r\n        out += 'await ';\r\n      }\r\n      out += '' + (def_callRuleValidate) + '; ';\r\n    } else {\r\n      if ($asyncKeyword) {\r\n        $ruleErrs = 'customErrors' + $lvl;\r\n        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';\r\n      } else {\r\n        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';\r\n      }\r\n    }\r\n  }\r\n  if ($rDef.modifying) {\r\n    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';\r\n  }\r\n  out += '' + ($closingBraces);\r\n  if ($rDef.valid) {\r\n    if ($breakOnError) {\r\n      out += ' if (true) { ';\r\n    }\r\n  } else {\r\n    out += ' if ( ';\r\n    if ($rDef.valid === undefined) {\r\n      out += ' !';\r\n      if ($macro) {\r\n        out += '' + ($nextValid);\r\n      } else {\r\n        out += '' + ($valid);\r\n      }\r\n    } else {\r\n      out += ' ' + (!$rDef.valid) + ' ';\r\n    }\r\n    out += ') { ';\r\n    $errorKeyword = $rule.keyword;\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = '';\r\n    var $$outStack = $$outStack || [];\r\n    $$outStack.push(out);\r\n    out = ''; /* istanbul ignore else */\r\n    if (it.createErrors !== false) {\r\n      out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\r\n      if (it.opts.messages !== false) {\r\n        out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\r\n      }\r\n      if (it.opts.verbose) {\r\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n      }\r\n      out += ' } ';\r\n    } else {\r\n      out += ' {} ';\r\n    }\r\n    var __err = out;\r\n    out = $$outStack.pop();\r\n    if (!it.compositeRule && $breakOnError) {\r\n      /* istanbul ignore if */\r\n      if (it.async) {\r\n        out += ' throw new ValidationError([' + (__err) + ']); ';\r\n      } else {\r\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\r\n      }\r\n    } else {\r\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n    }\r\n    var def_customError = out;\r\n    out = $$outStack.pop();\r\n    if ($inline) {\r\n      if ($rDef.errors) {\r\n        if ($rDef.errors != 'full') {\r\n          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\r\n          if (it.opts.verbose) {\r\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\r\n          }\r\n          out += ' } ';\r\n        }\r\n      } else {\r\n        if ($rDef.errors === false) {\r\n          out += ' ' + (def_customError) + ' ';\r\n        } else {\r\n          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\r\n          if (it.opts.verbose) {\r\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\r\n          }\r\n          out += ' } } ';\r\n        }\r\n      }\r\n    } else if ($macro) {\r\n      out += '   var err =   '; /* istanbul ignore else */\r\n      if (it.createErrors !== false) {\r\n        out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\r\n        if (it.opts.messages !== false) {\r\n          out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\r\n        }\r\n        if (it.opts.verbose) {\r\n          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\r\n        }\r\n        out += ' } ';\r\n      } else {\r\n        out += ' {} ';\r\n      }\r\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\r\n      if (!it.compositeRule && $breakOnError) {\r\n        /* istanbul ignore if */\r\n        if (it.async) {\r\n          out += ' throw new ValidationError(vErrors); ';\r\n        } else {\r\n          out += ' validate.errors = vErrors; return false; ';\r\n        }\r\n      }\r\n    } else {\r\n      if ($rDef.errors === false) {\r\n        out += ' ' + (def_customError) + ' ';\r\n      } else {\r\n        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\";  ';\r\n        if (it.opts.verbose) {\r\n          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\r\n        }\r\n        out += ' } } else { ' + (def_customError) + ' } ';\r\n      }\r\n    }\r\n    out += ' } ';\r\n    if ($breakOnError) {\r\n      out += ' else { ';\r\n    }\r\n  }\r\n  return out;\r\n}\r\n","\r\n\r\nvar metaSchema = require('./refs/json-schema-draft-07.json');\r\n\r\nmodule.exports = {\r\n  $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',\r\n  definitions: {\r\n    simpleTypes: metaSchema.definitions.simpleTypes\r\n  },\r\n  type: 'object',\r\n  dependencies: {\r\n    schema: ['validate'],\r\n    $data: ['validate'],\r\n    statements: ['inline'],\r\n    valid: {not: {required: ['macro']}}\r\n  },\r\n  properties: {\r\n    type: metaSchema.properties.type,\r\n    schema: {type: 'boolean'},\r\n    statements: {type: 'boolean'},\r\n    dependencies: {\r\n      type: 'array',\r\n      items: {type: 'string'}\r\n    },\r\n    metaSchema: {type: 'object'},\r\n    modifying: {type: 'boolean'},\r\n    valid: {type: 'boolean'},\r\n    $data: {type: 'boolean'},\r\n    async: {type: 'boolean'},\r\n    errors: {\r\n      anyOf: [\r\n        {type: 'boolean'},\r\n        {const: 'full'}\r\n      ]\r\n    }\r\n  }\r\n};\r\n","module.exports = {\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"$id\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"title\": \"Core schema meta-schema\",\r\n    \"definitions\": {\r\n        \"schemaArray\": {\r\n            \"type\": \"array\",\r\n            \"minItems\": 1,\r\n            \"items\": { \"$ref\": \"#\" }\r\n        },\r\n        \"nonNegativeInteger\": {\r\n            \"type\": \"integer\",\r\n            \"minimum\": 0\r\n        },\r\n        \"nonNegativeIntegerDefault0\": {\r\n            \"allOf\": [\r\n                { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n                { \"default\": 0 }\r\n            ]\r\n        },\r\n        \"simpleTypes\": {\r\n            \"enum\": [\r\n                \"array\",\r\n                \"boolean\",\r\n                \"integer\",\r\n                \"null\",\r\n                \"number\",\r\n                \"object\",\r\n                \"string\"\r\n            ]\r\n        },\r\n        \"stringArray\": {\r\n            \"type\": \"array\",\r\n            \"items\": { \"type\": \"string\" },\r\n            \"uniqueItems\": true,\r\n            \"default\": []\r\n        }\r\n    },\r\n    \"type\": [\"object\", \"boolean\"],\r\n    \"properties\": {\r\n        \"$id\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n        },\r\n        \"$schema\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri\"\r\n        },\r\n        \"$ref\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"uri-reference\"\r\n        },\r\n        \"$comment\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"title\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"description\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"default\": true,\r\n        \"readOnly\": {\r\n            \"type\": \"boolean\",\r\n            \"default\": false\r\n        },\r\n        \"examples\": {\r\n            \"type\": \"array\",\r\n            \"items\": true\r\n        },\r\n        \"multipleOf\": {\r\n            \"type\": \"number\",\r\n            \"exclusiveMinimum\": 0\r\n        },\r\n        \"maximum\": {\r\n            \"type\": \"number\"\r\n        },\r\n        \"exclusiveMaximum\": {\r\n            \"type\": \"number\"\r\n        },\r\n        \"minimum\": {\r\n            \"type\": \"number\"\r\n        },\r\n        \"exclusiveMinimum\": {\r\n            \"type\": \"number\"\r\n        },\r\n        \"maxLength\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minLength\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"pattern\": {\r\n            \"type\": \"string\",\r\n            \"format\": \"regex\"\r\n        },\r\n        \"additionalItems\": { \"$ref\": \"#\" },\r\n        \"items\": {\r\n            \"anyOf\": [\r\n                { \"$ref\": \"#\" },\r\n                { \"$ref\": \"#/definitions/schemaArray\" }\r\n            ],\r\n            \"default\": true\r\n        },\r\n        \"maxItems\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minItems\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"uniqueItems\": {\r\n            \"type\": \"boolean\",\r\n            \"default\": false\r\n        },\r\n        \"contains\": { \"$ref\": \"#\" },\r\n        \"maxProperties\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minProperties\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"required\": { \"$ref\": \"#/definitions/stringArray\" },\r\n        \"additionalProperties\": { \"$ref\": \"#\" },\r\n        \"definitions\": {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": { \"$ref\": \"#\" },\r\n            \"default\": {}\r\n        },\r\n        \"properties\": {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": { \"$ref\": \"#\" },\r\n            \"default\": {}\r\n        },\r\n        \"patternProperties\": {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": { \"$ref\": \"#\" },\r\n            \"propertyNames\": { \"format\": \"regex\" },\r\n            \"default\": {}\r\n        },\r\n        \"dependencies\": {\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": {\r\n                \"anyOf\": [\r\n                    { \"$ref\": \"#\" },\r\n                    { \"$ref\": \"#/definitions/stringArray\" }\r\n                ]\r\n            }\r\n        },\r\n        \"propertyNames\": { \"$ref\": \"#\" },\r\n        \"const\": true,\r\n        \"enum\": {\r\n            \"type\": \"array\",\r\n            \"items\": true,\r\n            \"minItems\": 1,\r\n            \"uniqueItems\": true\r\n        },\r\n        \"type\": {\r\n            \"anyOf\": [\r\n                { \"$ref\": \"#/definitions/simpleTypes\" },\r\n                {\r\n                    \"type\": \"array\",\r\n                    \"items\": { \"$ref\": \"#/definitions/simpleTypes\" },\r\n                    \"minItems\": 1,\r\n                    \"uniqueItems\": true\r\n                }\r\n            ]\r\n        },\r\n        \"format\": { \"type\": \"string\" },\r\n        \"contentMediaType\": { \"type\": \"string\" },\r\n        \"contentEncoding\": { \"type\": \"string\" },\r\n        \"if\": {\"$ref\": \"#\"},\r\n        \"then\": {\"$ref\": \"#\"},\r\n        \"else\": {\"$ref\": \"#\"},\r\n        \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"not\": { \"$ref\": \"#\" }\r\n    },\r\n    \"default\": true\r\n}\r\n","module.exports = {\r\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r\n    \"$id\": \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\r\n    \"description\": \"Meta-schema for $data reference (JSON Schema extension proposal)\",\r\n    \"type\": \"object\",\r\n    \"required\": [ \"$data\" ],\r\n    \"properties\": {\r\n        \"$data\": {\r\n            \"type\": \"string\",\r\n            \"anyOf\": [\r\n                { \"format\": \"relative-json-pointer\" }, \r\n                { \"format\": \"json-pointer\" }\r\n            ]\r\n        }\r\n    },\r\n    \"additionalProperties\": false\r\n}\r\n"]}
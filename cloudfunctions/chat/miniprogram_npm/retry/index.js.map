{"version":3,"sources":["index.js","lib/retry.js","lib/retry_operation.js"],"names":[],"mappings":";;;;;;;AAAA;;;ACAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = require('./lib/retry');","var RetryOperation = require('./retry_operation');\r\n\r\nexports.operation = function(options) {\r\n  var timeouts = exports.timeouts(options);\r\n  return new RetryOperation(timeouts, {\r\n      forever: options && options.forever,\r\n      unref: options && options.unref,\r\n      maxRetryTime: options && options.maxRetryTime\r\n  });\r\n};\r\n\r\nexports.timeouts = function(options) {\r\n  if (options instanceof Array) {\r\n    return [].concat(options);\r\n  }\r\n\r\n  var opts = {\r\n    retries: 10,\r\n    factor: 2,\r\n    minTimeout: 1 * 1000,\r\n    maxTimeout: Infinity,\r\n    randomize: false\r\n  };\r\n  for (var key in options) {\r\n    opts[key] = options[key];\r\n  }\r\n\r\n  if (opts.minTimeout > opts.maxTimeout) {\r\n    throw new Error('minTimeout is greater than maxTimeout');\r\n  }\r\n\r\n  var timeouts = [];\r\n  for (var i = 0; i < opts.retries; i++) {\r\n    timeouts.push(this.createTimeout(i, opts));\r\n  }\r\n\r\n  if (options && options.forever && !timeouts.length) {\r\n    timeouts.push(this.createTimeout(i, opts));\r\n  }\r\n\r\n  // sort the array numerically ascending\r\n  timeouts.sort(function(a,b) {\r\n    return a - b;\r\n  });\r\n\r\n  return timeouts;\r\n};\r\n\r\nexports.createTimeout = function(attempt, opts) {\r\n  var random = (opts.randomize)\r\n    ? (Math.random() + 1)\r\n    : 1;\r\n\r\n  var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));\r\n  timeout = Math.min(timeout, opts.maxTimeout);\r\n\r\n  return timeout;\r\n};\r\n\r\nexports.wrap = function(obj, options, methods) {\r\n  if (options instanceof Array) {\r\n    methods = options;\r\n    options = null;\r\n  }\r\n\r\n  if (!methods) {\r\n    methods = [];\r\n    for (var key in obj) {\r\n      if (typeof obj[key] === 'function') {\r\n        methods.push(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  for (var i = 0; i < methods.length; i++) {\r\n    var method   = methods[i];\r\n    var original = obj[method];\r\n\r\n    obj[method] = function retryWrapper(original) {\r\n      var op       = exports.operation(options);\r\n      var args     = Array.prototype.slice.call(arguments, 1);\r\n      var callback = args.pop();\r\n\r\n      args.push(function(err) {\r\n        if (op.retry(err)) {\r\n          return;\r\n        }\r\n        if (err) {\r\n          arguments[0] = op.mainError();\r\n        }\r\n        callback.apply(this, arguments);\r\n      });\r\n\r\n      op.attempt(function() {\r\n        original.apply(obj, args);\r\n      });\r\n    }.bind(obj, original);\r\n    obj[method].options = options;\r\n  }\r\n};\r\n","function RetryOperation(timeouts, options) {\r\n  // Compatibility for the old (timeouts, retryForever) signature\r\n  if (typeof options === 'boolean') {\r\n    options = { forever: options };\r\n  }\r\n\r\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\r\n  this._timeouts = timeouts;\r\n  this._options = options || {};\r\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\r\n  this._fn = null;\r\n  this._errors = [];\r\n  this._attempts = 1;\r\n  this._operationTimeout = null;\r\n  this._operationTimeoutCb = null;\r\n  this._timeout = null;\r\n  this._operationStart = null;\r\n\r\n  if (this._options.forever) {\r\n    this._cachedTimeouts = this._timeouts.slice(0);\r\n  }\r\n}\r\nmodule.exports = RetryOperation;\r\n\r\nRetryOperation.prototype.reset = function() {\r\n  this._attempts = 1;\r\n  this._timeouts = this._originalTimeouts;\r\n}\r\n\r\nRetryOperation.prototype.stop = function() {\r\n  if (this._timeout) {\r\n    clearTimeout(this._timeout);\r\n  }\r\n\r\n  this._timeouts       = [];\r\n  this._cachedTimeouts = null;\r\n};\r\n\r\nRetryOperation.prototype.retry = function(err) {\r\n  if (this._timeout) {\r\n    clearTimeout(this._timeout);\r\n  }\r\n\r\n  if (!err) {\r\n    return false;\r\n  }\r\n  var currentTime = new Date().getTime();\r\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\r\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\r\n    return false;\r\n  }\r\n\r\n  this._errors.push(err);\r\n\r\n  var timeout = this._timeouts.shift();\r\n  if (timeout === undefined) {\r\n    if (this._cachedTimeouts) {\r\n      // retry forever, only keep last error\r\n      this._errors.splice(this._errors.length - 1, this._errors.length);\r\n      this._timeouts = this._cachedTimeouts.slice(0);\r\n      timeout = this._timeouts.shift();\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  var self = this;\r\n  var timer = setTimeout(function() {\r\n    self._attempts++;\r\n\r\n    if (self._operationTimeoutCb) {\r\n      self._timeout = setTimeout(function() {\r\n        self._operationTimeoutCb(self._attempts);\r\n      }, self._operationTimeout);\r\n\r\n      if (self._options.unref) {\r\n          self._timeout.unref();\r\n      }\r\n    }\r\n\r\n    self._fn(self._attempts);\r\n  }, timeout);\r\n\r\n  if (this._options.unref) {\r\n      timer.unref();\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\r\n  this._fn = fn;\r\n\r\n  if (timeoutOps) {\r\n    if (timeoutOps.timeout) {\r\n      this._operationTimeout = timeoutOps.timeout;\r\n    }\r\n    if (timeoutOps.cb) {\r\n      this._operationTimeoutCb = timeoutOps.cb;\r\n    }\r\n  }\r\n\r\n  var self = this;\r\n  if (this._operationTimeoutCb) {\r\n    this._timeout = setTimeout(function() {\r\n      self._operationTimeoutCb();\r\n    }, self._operationTimeout);\r\n  }\r\n\r\n  this._operationStart = new Date().getTime();\r\n\r\n  this._fn(this._attempts);\r\n};\r\n\r\nRetryOperation.prototype.try = function(fn) {\r\n  console.log('Using RetryOperation.try() is deprecated');\r\n  this.attempt(fn);\r\n};\r\n\r\nRetryOperation.prototype.start = function(fn) {\r\n  console.log('Using RetryOperation.start() is deprecated');\r\n  this.attempt(fn);\r\n};\r\n\r\nRetryOperation.prototype.start = RetryOperation.prototype.try;\r\n\r\nRetryOperation.prototype.errors = function() {\r\n  return this._errors;\r\n};\r\n\r\nRetryOperation.prototype.attempts = function() {\r\n  return this._attempts;\r\n};\r\n\r\nRetryOperation.prototype.mainError = function() {\r\n  if (this._errors.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var counts = {};\r\n  var mainError = null;\r\n  var mainErrorCount = 0;\r\n\r\n  for (var i = 0; i < this._errors.length; i++) {\r\n    var error = this._errors[i];\r\n    var message = error.message;\r\n    var count = (counts[message] || 0) + 1;\r\n\r\n    counts[message] = count;\r\n\r\n    if (count >= mainErrorCount) {\r\n      mainError = error;\r\n      mainErrorCount = count;\r\n    }\r\n  }\r\n\r\n  return mainError;\r\n};\r\n"]}
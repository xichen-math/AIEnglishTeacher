{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\n/*!\r\n *  Copyright 2010 LearnBoost <dev@learnboost.com>\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar crypto = require('crypto')\r\n  , parse = require('url').parse\r\n  ;\r\n\r\n/**\r\n * Valid keys.\r\n */\r\n\r\nvar keys = \r\n  [ 'acl'\r\n  , 'location'\r\n  , 'logging'\r\n  , 'notification'\r\n  , 'partNumber'\r\n  , 'policy'\r\n  , 'requestPayment'\r\n  , 'torrent'\r\n  , 'uploadId'\r\n  , 'uploads'\r\n  , 'versionId'\r\n  , 'versioning'\r\n  , 'versions'\r\n  , 'website'\r\n  ]\r\n\r\n/**\r\n * Return an \"Authorization\" header value with the given `options`\r\n * in the form of \"AWS <key>:<signature>\"\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction authorization (options) {\r\n  return 'AWS ' + options.key + ':' + sign(options)\r\n}\r\n\r\nmodule.exports = authorization\r\nmodule.exports.authorization = authorization\r\n\r\n/**\r\n * Simple HMAC-SHA1 Wrapper\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */ \r\n\r\nfunction hmacSha1 (options) {\r\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')\r\n}\r\n\r\nmodule.exports.hmacSha1 = hmacSha1\r\n\r\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction sign (options) {\r\n  options.message = stringToSign(options)\r\n  return hmacSha1(options)\r\n}\r\nmodule.exports.sign = sign\r\n\r\n/**\r\n * Create a base64 sha1 HMAC for `options`. \r\n *\r\n * Specifically to be used with S3 presigned URLs\r\n * \r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction signQuery (options) {\r\n  options.message = queryStringToSign(options)\r\n  return hmacSha1(options)\r\n}\r\nmodule.exports.signQuery= signQuery\r\n\r\n/**\r\n * Return a string for sign() with the given `options`.\r\n *\r\n * Spec:\r\n * \r\n *    <verb>\\n\r\n *    <md5>\\n\r\n *    <content-type>\\n\r\n *    <date>\\n\r\n *    [headers\\n]\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction stringToSign (options) {\r\n  var headers = options.amazonHeaders || ''\r\n  if (headers) headers += '\\n'\r\n  var r = \r\n    [ options.verb\r\n    , options.md5\r\n    , options.contentType\r\n    , options.date ? options.date.toUTCString() : ''\r\n    , headers + options.resource\r\n    ]\r\n  return r.join('\\n')\r\n}\r\nmodule.exports.stringToSign = stringToSign\r\n\r\n/**\r\n * Return a string for sign() with the given `options`, but is meant exclusively\r\n * for S3 presigned URLs\r\n *\r\n * Spec:\r\n * \r\n *    <date>\\n\r\n *    <resource>\r\n *\r\n * @param {Object} options\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction queryStringToSign (options){\r\n  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource\r\n}\r\nmodule.exports.queryStringToSign = queryStringToSign\r\n\r\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non-amazon headers\r\n *  - lowercase fields\r\n *  - sort lexicographically\r\n *  - trim whitespace between \":\"\r\n *  - join with newline\r\n *\r\n * @param {Object} headers\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction canonicalizeHeaders (headers) {\r\n  var buf = []\r\n    , fields = Object.keys(headers)\r\n    ;\r\n  for (var i = 0, len = fields.length; i < len; ++i) {\r\n    var field = fields[i]\r\n      , val = headers[field]\r\n      , field = field.toLowerCase()\r\n      ;\r\n    if (0 !== field.indexOf('x-amz')) continue\r\n    buf.push(field + ':' + val)\r\n  }\r\n  return buf.sort().join('\\n')\r\n}\r\nmodule.exports.canonicalizeHeaders = canonicalizeHeaders\r\n\r\n/**\r\n * Perform the following:\r\n *\r\n *  - ignore non sub-resources\r\n *  - sort lexicographically\r\n *\r\n * @param {String} resource\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction canonicalizeResource (resource) {\r\n  var url = parse(resource, true)\r\n    , path = url.pathname\r\n    , buf = []\r\n    ;\r\n\r\n  Object.keys(url.query).forEach(function(key){\r\n    if (!~keys.indexOf(key)) return\r\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])\r\n    buf.push(key + val)\r\n  })\r\n\r\n  return path + (buf.length ? '?' + buf.sort().join('&') : '')\r\n}\r\nmodule.exports.canonicalizeResource = canonicalizeResource\r\n"]}
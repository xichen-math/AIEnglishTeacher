{"version":3,"sources":["index.js","src/storage/index.js","src/utils/httpRequest.js","src/utils/auth.js","src/utils/tracing.js","src/utils/utils.js","package.json","src/utils/getWxCloudApiToken.js","src/utils/request-timings-measurer.js","src/const/symbol.js","src/functions/index.js","src/auth/index.js","src/wx/index.js","src/utils/dbRequest.js","src/log/index.js","src/utils/extRequest.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA;AJaA,ACHA,AENA,ADGA,AENA,ACHA;ALgBA,ACHA,AENA,ADGA,AENA,ACHA;ALgBA,ACHA,AENA,ADGA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,ADGA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,ADGA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,ADGA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AENA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AGTA,ARwBA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AGTA,ARwBA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,ALeA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AIZA,AT2BA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AIZA,AT2BA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AIZA,AT2BA,AENA,AIZA,ALeA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AJYA,ACHA;ALgBA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AJYA,ACHA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AJYA,ACHA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AT2BA,AENA,ADGA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AT2BA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AT2BA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AT2BA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AXiCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AHSA,AOrBA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AU9BA,AENA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,ADGA,AIZA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AMlBA,AKfA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA,AIZA;AZqCA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,AWjCA,AGTA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,AYpCA,AbuCA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,ADGA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,ADGA,AMlBA;ARyBA,Ac1CA,AbuCA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyBA,ACHA,AENA,ADGA,AMlBA;ARyfile":"index.js","sourcesContent":["const Db = require('@cloudbase/database').Db\r\nconst storage = require('./src/storage')\r\nconst functions = require('./src/functions')\r\nconst auth = require('./src/auth')\r\nconst wx = require('./src/wx')\r\nconst Request = require('./src/utils/dbRequest')\r\nconst logger = require('./src/log')\r\nconst { SYMBOL_CURRENT_ENV } = require('./src/const/symbol')\r\nconst { getCurrentEnv } = require('./src/utils/utils')\r\n\r\nconst ExtRequest = require('./src/utils/extRequest')\r\n\r\nfunction Tcb(config) {\r\n  this.config = config ? config : this.config\r\n  this.requestClient = new ExtRequest()\r\n  this.SYMBOL_CURRENT_ENV = SYMBOL_CURRENT_ENV\r\n}\r\n\r\nTcb.prototype.init = function({\r\n  secretId,\r\n  secretKey,\r\n  sessionToken,\r\n  debug,\r\n  env,\r\n  proxy,\r\n  timeout,\r\n  serviceUrl,\r\n  version,\r\n  headers = {},\r\n  credentials,\r\n  timingsMeasurer,\r\n  isHttp,\r\n  signMethod = 'v2',\r\n  isUpdateSelfConfig = true,\r\n  forever = false\r\n} = {}) {\r\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\r\n    throw Error('secretId and secretKey must be a pair')\r\n  }\r\n\r\n  const config = {\r\n    get secretId() {\r\n      return this._secretId ? this._secretId : process.env.TENCENTCLOUD_SECRETID\r\n    },\r\n    set secretId(id) {\r\n      this._secretId = id\r\n    },\r\n    get secretKey() {\r\n      return this._secretKey\r\n        ? this._secretKey\r\n        : process.env.TENCENTCLOUD_SECRETKEY\r\n    },\r\n    set secretKey(key) {\r\n      this._secretKey = key\r\n    },\r\n    get sessionToken() {\r\n      if (this._sessionToken === undefined) {\r\n        //默认临时密钥\r\n        return process.env.TENCENTCLOUD_SESSIONTOKEN\r\n      } else if (this._sessionToken === false) {\r\n        //固定秘钥\r\n        return undefined\r\n      } else {\r\n        //传入的临时密钥\r\n        return this._sessionToken\r\n      }\r\n    },\r\n    set sessionToken(token) {\r\n      this._sessionToken = token\r\n    },\r\n    envName: env,\r\n    proxy: proxy,\r\n    isHttp: isHttp,\r\n    headers: Object.assign({}, headers)\r\n  }\r\n\r\n  config.debug = debug\r\n  config.forever = forever\r\n  config.signMethod = signMethod\r\n  config.timingsMeasurer = timingsMeasurer\r\n  config.secretId = secretId\r\n  config.secretKey = secretKey\r\n  config.timeout = timeout || 15000\r\n  config.serviceUrl = serviceUrl\r\n  config.credentials = credentials\r\n  config.sessionToken = sessionToken\r\n    ? sessionToken\r\n    : secretId && secretKey\r\n    ? false\r\n    : undefined\r\n\r\n  if (version) {\r\n    config.headers['x-sdk-version'] = version\r\n  }\r\n\r\n  // 这里的目的是创建新实例时可以避免更新当前实例\r\n  if (isUpdateSelfConfig) {\r\n    this.config = config\r\n  }\r\n\r\n  return new Tcb(config)\r\n}\r\n\r\nTcb.prototype.database = function(dbConfig = {}) {\r\n  Db.reqClass = Request\r\n  if (Object.prototype.toString.call(dbConfig).slice(8, -1) !== 'Object') {\r\n    throw Error('dbConfig must be an object')\r\n  }\r\n\r\n  if (dbConfig && dbConfig.env) {\r\n    // env变量名转换\r\n    dbConfig.envName = dbConfig.env\r\n    delete dbConfig.env\r\n  }\r\n  this.config = Object.assign(this.config, dbConfig)\r\n  return new Db({ ...this })\r\n}\r\n\r\n/**\r\n * @returns string\r\n */\r\nTcb.prototype.getCurrentEnv = function() {\r\n  return getCurrentEnv()\r\n}\r\n\r\nconst extensionMap = {}\r\n/**\r\n * 注册扩展\r\n */\r\nTcb.prototype.registerExtension = function(ext) {\r\n  extensionMap[ext.name] = ext\r\n}\r\n\r\nTcb.prototype.invokeExtension = async function(name, opts) {\r\n  const ext = extensionMap[name]\r\n  if (!ext) {\r\n    throw Error(`扩展${name} 必须先注册`)\r\n  }\r\n\r\n  return await ext.invoke(opts, this)\r\n}\r\n\r\nTcb.prototype.parseContext = function(context) {\r\n  if (typeof context !== 'object') {\r\n    throw Error('context 必须为对象类型')\r\n  }\r\n  let {\r\n    memory_limit_in_mb,\r\n    time_limit_in_ms,\r\n    request_id,\r\n    environ = '',\r\n    function_version,\r\n    namespace,\r\n    function_name,\r\n    environment\r\n  } = context\r\n  let parseResult = {}\r\n\r\n  try {\r\n    parseResult.memoryLimitInMb = memory_limit_in_mb\r\n    parseResult.timeLimitIns = time_limit_in_ms\r\n    parseResult.requestId = request_id\r\n    parseResult.functionVersion = function_version\r\n    parseResult.namespace = namespace\r\n    parseResult.functionName = function_name\r\n\r\n    // 存在environment 为新架构 上新字段 JSON序列化字符串\r\n    if (environment) {\r\n      parseResult.environment = JSON.parse(environment)\r\n      return parseResult\r\n    }\r\n\r\n    // 不存在environment 则为老字段，老架构上存在bug，无法识别value含特殊字符(若允许特殊字符，影响解析，这里特殊处理)\r\n\r\n    const parseEnviron = environ.split(';')\r\n    let parseEnvironObj = {}\r\n    for (let i in parseEnviron) {\r\n      const equalIndex = parseEnviron[i].indexOf('=')\r\n      if (equalIndex < 0) {\r\n        // value含分号影响切割，未找到= 均忽略\r\n        continue\r\n      }\r\n      const key = parseEnviron[i].slice(0, equalIndex)\r\n      let value = parseEnviron[i].slice(equalIndex + 1)\r\n\r\n      // value 含, 为数组\r\n      if (value.indexOf(',') >= 0) {\r\n        value = value.split(',')\r\n      }\r\n      parseEnvironObj[key] = value\r\n    }\r\n\r\n    parseResult.environ = parseEnvironObj\r\n  } catch (err) {\r\n    throw Error('无效的context对象')\r\n  }\r\n  return parseResult\r\n}\r\n\r\nfunction each(obj, fn) {\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      fn(obj[i], i)\r\n    }\r\n  }\r\n}\r\n\r\nfunction extend(target, source) {\r\n  each(source, function(val, key) {\r\n    target[key] = source[key]\r\n  })\r\n  return target\r\n}\r\n\r\nextend(Tcb.prototype, functions)\r\nextend(Tcb.prototype, storage)\r\nextend(Tcb.prototype, wx)\r\nextend(Tcb.prototype, auth)\r\nextend(Tcb.prototype, logger)\r\n\r\nmodule.exports = new Tcb()\r\n","const request = require('request')\r\nconst fs = require('fs')\r\nconst httpRequest = require('../utils/httpRequest')\r\nconst { parseString } = require('xml2js')\r\n\r\nasync function parseXML(str) {\r\n  return new Promise((resolve, reject) => {\r\n    parseString(str, (err, result) => {\r\n      if (err) {\r\n        reject(err)\r\n      } else {\r\n        resolve(result)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/*\r\n * 上传文件\r\n * @param {string} cloudPath 上传后的文件路径\r\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\r\n */\r\nasync function uploadFile({ cloudPath, fileContent }) {\r\n  const {\r\n    data: { url, token, authorization, fileId, cosFileId }\r\n  } = await getUploadMetadata.call(this, { cloudPath })\r\n\r\n  const formData = {\r\n    Signature: authorization,\r\n    'x-cos-security-token': token,\r\n    'x-cos-meta-fileid': cosFileId,\r\n    key: cloudPath,\r\n    file: fileContent\r\n  }\r\n\r\n  let body = await new Promise((resolve, reject) => {\r\n    request.post({ url, formData: formData }, function(err, res, body) {\r\n      if (err) {\r\n        reject(err)\r\n      } else {\r\n        resolve(body)\r\n      }\r\n    })\r\n  })\r\n\r\n  body = await parseXML(body)\r\n  if (body && body.Error) {\r\n    const {\r\n      Code: [code],\r\n      Message: [message]\r\n    } = body.Error\r\n    if (code === 'SignatureDoesNotMatch') {\r\n      return {\r\n        code: 'SYS_ERR',\r\n        message\r\n      }\r\n    }\r\n    return {\r\n      code: 'STORAGE_REQUEST_FAIL',\r\n      message\r\n    }\r\n  }\r\n\r\n  return {\r\n    fileID: fileId\r\n  }\r\n}\r\n\r\n/**\r\n * 删除文件\r\n * @param {Array.<string>} fileList 文件id数组\r\n */\r\nasync function deleteFile({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: 'INVALID_PARAM',\r\n      message: 'fileList必须是非空的数组'\r\n    }\r\n  }\r\n\r\n  for (let file of fileList) {\r\n    if (!file || typeof file != 'string') {\r\n      return {\r\n        code: 'INVALID_PARAM',\r\n        message: 'fileList的元素必须是非空的字符串'\r\n      }\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: 'storage.batchDeleteFile',\r\n    fileid_list: fileList\r\n  }\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res\r\n    } else {\r\n      return {\r\n        fileList: res.data.delete_list,\r\n        requestId: res.requestId\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 获取文件下载链接\r\n * @param {Array.<Object>} fileList\r\n */\r\nasync function getTempFileURL({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: 'INVALID_PARAM',\r\n      message: 'fileList必须是非空的数组'\r\n    }\r\n  }\r\n\r\n  let file_list = []\r\n  for (let file of fileList) {\r\n    if (typeof file === 'object') {\r\n      if (!file.hasOwnProperty('fileID') || !file.hasOwnProperty('maxAge')) {\r\n        return {\r\n          code: 'INVALID_PARAM',\r\n          message: 'fileList的元素必须是包含fileID和maxAge的对象'\r\n        }\r\n      }\r\n\r\n      file_list.push({\r\n        fileid: file.fileID,\r\n        max_age: file.maxAge\r\n      })\r\n    } else if (typeof file === 'string') {\r\n      file_list.push({\r\n        fileid: file\r\n      })\r\n    } else {\r\n      return {\r\n        code: 'INVALID_PARAM',\r\n        message: 'fileList的元素必须是字符串'\r\n      }\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: 'storage.batchGetDownloadUrl',\r\n    file_list\r\n  }\r\n  // console.log(params);\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    }\r\n  }).then(res => {\r\n    // console.log(res);\r\n    if (res.code) {\r\n      return res\r\n    } else {\r\n      return {\r\n        fileList: res.data.download_list,\r\n        requestId: res.requestId\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nasync function getFileAuthority({ fileList }) {\r\n  if (!Array.isArray(fileList)) {\r\n    throw new Error(\r\n      '[tcb-admin-node] getCosFileAuthority fileList must be a array'\r\n    )\r\n  }\r\n\r\n  if (\r\n    fileList.some(file => {\r\n      if (!file || !file.path) {\r\n        return true\r\n      }\r\n      if (['READ', 'WRITE', 'READWRITE'].indexOf(file.type) === -1) {\r\n        return true\r\n      }\r\n    })\r\n  ) {\r\n    throw new Error('[tcb-admin-node] getCosFileAuthority fileList param error')\r\n  }\r\n\r\n  const userInfo = this.auth().getUserInfo()\r\n  const { openId, uid } = userInfo\r\n\r\n  if (!openId && !uid) {\r\n    throw new Error('[tcb-admin-node] admin do not need getCosFileAuthority.')\r\n  }\r\n\r\n  let params = {\r\n    action: 'storage.getFileAuthority',\r\n    openId,\r\n    uid,\r\n    loginType: process.env.LOGINTYPE,\r\n    fileList\r\n  }\r\n  const res = await httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    }\r\n  })\r\n\r\n  if (res.code) {\r\n    throw new Error('[tcb-admin-node] getCosFileAuthority failed: ' + res.code)\r\n  } else {\r\n    return res\r\n  }\r\n}\r\n\r\nasync function downloadFile({ fileID, tempFilePath }) {\r\n  let tmpUrl,\r\n    self = this\r\n  try {\r\n    const tmpUrlRes = await this.getTempFileURL({\r\n      fileList: [\r\n        {\r\n          fileID,\r\n          maxAge: 600\r\n        }\r\n      ]\r\n    })\r\n    // console.log(tmpUrlRes);\r\n    const res = tmpUrlRes.fileList[0]\r\n\r\n    if (res.code != 'SUCCESS') {\r\n      return res\r\n    }\r\n\r\n    tmpUrl = res.tempFileURL\r\n    tmpUrl = encodeURI(tmpUrl)\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n\r\n  let req = request({\r\n    url: tmpUrl,\r\n    encoding: null,\r\n    proxy: self.config.proxy\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let fileContent = Buffer.alloc(0)\r\n    req.on('response', function(response) {\r\n      if (response && +response.statusCode === 200) {\r\n        if (tempFilePath) {\r\n          response.pipe(fs.createWriteStream(tempFilePath))\r\n        } else {\r\n          response.on('data', data => {\r\n            fileContent = Buffer.concat([fileContent, data])\r\n          })\r\n        }\r\n        response.on('end', () => {\r\n          resolve({\r\n            fileContent: tempFilePath ? undefined : fileContent,\r\n            message: '文件下载完成'\r\n          })\r\n        })\r\n      } else {\r\n        reject(response)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nasync function getUploadMetadata({ cloudPath }) {\r\n  let params = {\r\n    action: 'storage.getUploadMetadata',\r\n    path: cloudPath\r\n  }\r\n\r\n  const res = await httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    }\r\n  })\r\n\r\n  if (res.code) {\r\n    throw new Error('get upload metadata failed: ' + res.code)\r\n  } else {\r\n    return res\r\n  }\r\n}\r\n\r\nexports.uploadFile = uploadFile\r\nexports.deleteFile = deleteFile\r\nexports.getTempFileURL = getTempFileURL\r\nexports.downloadFile = downloadFile\r\nexports.getUploadMetadata = getUploadMetadata\r\nexports.getFileAuthority = getFileAuthority\r\n","const http = require('http')\r\nconst request = require('request')\r\nconst auth = require('./auth.js')\r\nconst tracing = require('./tracing')\r\nconst utils = require('./utils')\r\nconst version = require('../../package.json').version\r\nconst getWxCloudApiToken = require('./getWxCloudApiToken')\r\nconst RequestTimgingsMeasurer = require('./request-timings-measurer')\r\n  .RequestTimgingsMeasurer\r\nconst URL = require('url')\r\nconst { sign } = require('@cloudbase/signature-nodejs')\r\nconst { SYMBOL_CURRENT_ENV } = require('../const/symbol')\r\n\r\nmodule.exports = utils.warpPromise(doRequest)\r\n\r\nasync function doRequest(args) {\r\n  const config = args.config\r\n  const method = args.method || 'post'\r\n  const signMethod = config.signMethod || 'v2'\r\n  const protocol = config.isHttp === true ? 'http' : 'https'\r\n  const isInSCF = process.env.TENCENTCLOUD_RUNENV === 'SCF'\r\n\r\n  if (!config.secretId || !config.secretKey) {\r\n    if (isInSCF) {\r\n      throw Error('missing authoration key, redeploy the function')\r\n    }\r\n    throw Error('missing secretId or secretKey of tencent cloud')\r\n  }\r\n\r\n  const tracingInfo = tracing.generateTracingInfo()\r\n  const seqId = tracingInfo.seqId\r\n  const eventId = tracingInfo.eventId\r\n\r\n  // 检查envName 是否为symbol\r\n  if (config.envName === SYMBOL_CURRENT_ENV) {\r\n    config.envName = utils.getCurrentEnv()\r\n  }\r\n\r\n  const params = Object.assign({}, args.params, {\r\n    envName: config.envName,\r\n    timestamp: new Date().valueOf(),\r\n    eventId,\r\n    wxCloudApiToken: getWxCloudApiToken(),\r\n    // 对应服务端 wxCloudSessionToken\r\n    tcb_sessionToken: process.env.TCB_SESSIONTOKEN || ''\r\n  })\r\n  utils.filterUndefined(params)\r\n\r\n  // wx.openApi 以及 wx.wxPayApi 带的requestData 需避开签名\r\n\r\n  let requestData = null\r\n  if (params.action === 'wx.openApi' || params.action === 'wx.wxPayApi') {\r\n    requestData = params['requestData']\r\n    delete params['requestData']\r\n  }\r\n\r\n  // Note: 云函数被调用时可能调用端未传递 SOURCE，TCB_SOURCE 可能为空\r\n  const TCB_SOURCE = process.env.TCB_SOURCE || ''\r\n  const SOURCE = isInSCF ? `${TCB_SOURCE},scf` : ',not_scf'\r\n\r\n  // url\r\n  let url = ''\r\n  if (config.serviceUrl) {\r\n    url = config.serviceUrl\r\n  } else {\r\n    url = protocol + '://tcb-admin.tencentcloudapi.com/admin'\r\n\r\n    if (isInSCF) {\r\n      url = 'http://tcb-admin.tencentyun.com/admin'\r\n    }\r\n\r\n    if (\r\n      params.action === 'wx.api' ||\r\n      params.action === 'wx.openApi' ||\r\n      params.action === 'wx.wxPayApi'\r\n    ) {\r\n      url = protocol + '://tcb-open.tencentcloudapi.com/admin'\r\n      if (isInSCF) {\r\n        url = 'http://tcb-open.tencentyun.com/admin'\r\n      }\r\n    }\r\n  }\r\n\r\n  if (url.includes('?')) {\r\n    url = `${url}&eventId=${eventId}&seqId=${seqId}`\r\n  } else {\r\n    url = `${url}?&eventId=${eventId}&seqId=${seqId}`\r\n  }\r\n\r\n  let headers = {}\r\n\r\n  if (signMethod === 'v3') {\r\n    headers = {\r\n      'x-tcb-source': SOURCE,\r\n      'User-Agent': `tcb-admin-sdk/${version}`,\r\n      'X-SDK-Version': `tcb-admin-sdk/${version}`,\r\n      Host: URL.parse(url).host\r\n    }\r\n\r\n    if (params.action === 'wx.openApi' || params.action === 'wx.wxPayApi') {\r\n      headers['content-type'] = 'multipart/form-data'\r\n    }\r\n\r\n    headers = Object.assign({}, config.headers, args.headers, headers)\r\n\r\n    const signInfo = sign({\r\n      secretId: config.secretId,\r\n      secretKey: config.secretKey,\r\n      method: method,\r\n      url: url,\r\n      params: params,\r\n      headers,\r\n      withSignedParams: true\r\n    })\r\n\r\n    headers['Authorization'] = signInfo.authorization\r\n    headers['X-Signature-Expires'] = 600\r\n    headers['X-Timestamp'] = signInfo.timestamp\r\n  } else {\r\n    headers = {\r\n      'user-agent': `tcb-admin-sdk/${version}`,\r\n      'x-tcb-source': SOURCE\r\n    }\r\n\r\n    const authObj = {\r\n      SecretId: config.secretId,\r\n      SecretKey: config.secretKey,\r\n      Method: method,\r\n      pathname: '/admin',\r\n      Query: params,\r\n      Headers: Object.assign({}, headers)\r\n    }\r\n\r\n    params.authorization = auth.getAuth(authObj)\r\n\r\n    headers = Object.assign({}, config.headers, args.headers, headers)\r\n  }\r\n\r\n  requestData && (params.requestData = requestData)\r\n  config.sessionToken && (params.sessionToken = config.sessionToken)\r\n  params.sdk_version = version\r\n\r\n  const opts = {\r\n    url,\r\n    method: args.method || 'post',\r\n    // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\r\n    timeout: args.timeout || config.timeout || 15000,\r\n    headers,\r\n    proxy: config.proxy\r\n  }\r\n\r\n  if (args.method == 'post') {\r\n    if (params.action === 'wx.openApi' || params.action === 'wx.wxPayApi') {\r\n      opts.formData = params\r\n      opts.encoding = null\r\n    } else {\r\n      opts.body = params\r\n      opts.json = true\r\n    }\r\n  } else {\r\n    opts.qs = params\r\n  }\r\n\r\n  if (args.proxy) {\r\n    opts.proxy = args.proxy\r\n  }\r\n\r\n  // 针对数据库请求设置慢查询提示\r\n  let slowQueryWarning = null\r\n  if (params.action.indexOf('database') >= 0) {\r\n    slowQueryWarning = setTimeout(() => {\r\n      console.warn(\r\n        `Database operation ${params.action} is longer than 3s. Please check query performance and your network environment. | [${seqId}]`\r\n      )\r\n    }, 3000)\r\n  }\r\n\r\n  try {\r\n    return new Promise(function(resolve, reject) {\r\n      const timingsMeasurerOptions = config.timingsMeasurer || {}\r\n      const {\r\n        waitingTime = 1000,\r\n        interval = 200,\r\n        enable = !!config.debug\r\n      } = timingsMeasurerOptions\r\n      const timingsMeasurer = RequestTimgingsMeasurer.new({\r\n        waitingTime,\r\n        interval,\r\n        enable\r\n      })\r\n\r\n      let targetName = ''\r\n      if (params.action.startsWith('functions')) {\r\n        targetName = params.function_name\r\n      } else if (params.action.startsWith('database')) {\r\n        targetName = params.collectionName\r\n      } else if (params.action.startsWith('wx')) {\r\n        targetName = params.apiName\r\n      }\r\n\r\n      timingsMeasurer.on('progress', timings => {\r\n        const timingsLine = `s:${timings.socket || '-'}|l:${timings.lookup ||\r\n          '-'}|c:${timings.connect || '-'}|r:${timings.ready ||\r\n          '-'}|w:${timings.waiting || '-'}|d:${timings.download ||\r\n          '-'}|e:${timings.end || '-'}`\r\n        console.warn(\r\n          `[RequestTimgings] Operation [${\r\n            params.action\r\n          }:${targetName}] spent ${Date.now() -\r\n            timings.start}ms(${timingsLine}) [${seqId}]`\r\n        )\r\n      })\r\n\r\n      if (config.forever) {\r\n        opts.forever = true\r\n      }\r\n\r\n      const clientRequest = request(opts, function(err, response, body) {\r\n        args && args.callback && args.callback(response)\r\n        if (err) {\r\n          return reject(err)\r\n        }\r\n\r\n        if (response.statusCode === 200) {\r\n          let res\r\n          try {\r\n            res = typeof body === 'string' ? JSON.parse(body) : body\r\n            // wx.openApi 和 wx.wxPayApi 调用时，需用content-type区分buffer or JSON\r\n            if (\r\n              params.action === 'wx.openApi' ||\r\n              params.action === 'wx.wxPayApi'\r\n            ) {\r\n              const { headers } = response\r\n              if (\r\n                headers['content-type'] === 'application/json; charset=utf-8'\r\n              ) {\r\n                res = JSON.parse(res.toString()) // JSON错误时buffer转JSON\r\n              }\r\n            }\r\n          } catch (e) {\r\n            res = body\r\n          }\r\n          return resolve(res)\r\n        } else {\r\n          // 避免非 200 错误导致返回空内容\r\n          const e = new Error(`\r\n            ${response.statusCode} ${http.STATUS_CODES[response.statusCode]}\r\n          `)\r\n          e.statusCode = response.statusCode\r\n          reject(e)\r\n        }\r\n      })\r\n      timingsMeasurer.measure(clientRequest)\r\n    })\r\n  } finally {\r\n    if (slowQueryWarning) {\r\n      clearTimeout(slowQueryWarning)\r\n    }\r\n  }\r\n}\r\n","var crypto = require('crypto')\r\n\r\nfunction camSafeUrlEncode(str) {\r\n  return encodeURIComponent(str)\r\n    .replace(/!/g, '%21')\r\n    .replace(/'/g, '%27')\r\n    .replace(/\\(/g, '%28')\r\n    .replace(/\\)/g, '%29')\r\n    .replace(/\\*/g, '%2A')\r\n}\r\nfunction map(obj, fn) {\r\n  var o = isArray(obj) ? [] : {}\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = fn(obj[i], i)\r\n    }\r\n  }\r\n  return o\r\n}\r\nfunction isArray(arr) {\r\n  return arr instanceof Array\r\n}\r\n\r\nfunction clone(obj) {\r\n  return map(obj, function(v) {\r\n    return typeof v === 'object' && v !== undefined && v !== null ? clone(v) : v\r\n  })\r\n}\r\n//测试用的key后面可以去掉\r\nvar getAuth = function(opt) {\r\n  opt = opt || {}\r\n\r\n  var SecretId = opt.SecretId\r\n  var SecretKey = opt.SecretKey\r\n  var method = (opt.method || opt.Method || 'get').toLowerCase()\r\n  var pathname = opt.pathname || '/'\r\n  var queryParams = clone(opt.Query || opt.params || {})\r\n  var headers = clone(opt.Headers || opt.headers || {})\r\n  pathname.indexOf('/') !== 0 && (pathname = '/' + pathname)\r\n\r\n  if (!SecretId) {\r\n    throw Error('missing param SecretId')\r\n  }\r\n\r\n  if (!SecretKey) {\r\n    throw Error('missing param SecretKey')\r\n  }\r\n\r\n  var getObjectKeys = function(obj) {\r\n    var list = []\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        if (obj[key] === undefined) {\r\n          continue\r\n        }\r\n        list.push(key)\r\n      }\r\n    }\r\n    return list.sort()\r\n  }\r\n\r\n  var obj2str = function(obj) {\r\n    var i, key, val\r\n    var list = []\r\n    var keyList = getObjectKeys(obj)\r\n    for (i = 0; i < keyList.length; i++) {\r\n      key = keyList[i]\r\n      if (obj[key] === undefined) {\r\n        continue\r\n      }\r\n      val = obj[key] === null ? '' : obj[key]\r\n      if (typeof val !== 'string') {\r\n        val = JSON.stringify(val)\r\n      }\r\n      key = key.toLowerCase()\r\n      key = camSafeUrlEncode(key)\r\n      val = camSafeUrlEncode(val) || ''\r\n      list.push(key + '=' + val)\r\n    }\r\n    return list.join('&')\r\n  }\r\n\r\n  // 签名有效起止时间\r\n  var now = parseInt(new Date().getTime() / 1000) - 1\r\n  var exp = now\r\n\r\n  var Expires = opt.Expires || opt.expires\r\n  if (Expires === undefined) {\r\n    exp += 900 // 签名过期时间为当前 + 900s\r\n  } else {\r\n    exp += Expires * 1 || 0\r\n  }\r\n\r\n  // 要用到的 Authorization 参数列表\r\n  var qSignAlgorithm = 'sha1'\r\n  var qAk = SecretId\r\n  var qSignTime = now + ';' + exp\r\n  var qKeyTime = now + ';' + exp\r\n  var qHeaderList = getObjectKeys(headers)\r\n    .join(';')\r\n    .toLowerCase()\r\n  var qUrlParamList = getObjectKeys(queryParams)\r\n    .join(';')\r\n    .toLowerCase()\r\n\r\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\r\n  // 步骤一：计算 SignKey\r\n  var signKey = crypto\r\n    .createHmac('sha1', SecretKey)\r\n    .update(qKeyTime)\r\n    .digest('hex')\r\n\r\n  // console.log(\"queryParams\", queryParams);\r\n  // console.log(obj2str(queryParams));\r\n\r\n  // 步骤二：构成 FormatString\r\n  var formatString = [\r\n    method,\r\n    pathname,\r\n    obj2str(queryParams),\r\n    obj2str(headers),\r\n    ''\r\n  ].join('\\n')\r\n\r\n  // console.log(formatString);\r\n  formatString = Buffer.from(formatString, 'utf8')\r\n\r\n  // 步骤三：计算 StringToSign\r\n  var sha1Algo = crypto.createHash('sha1')\r\n  sha1Algo.update(formatString)\r\n  var res = sha1Algo.digest('hex')\r\n  var stringToSign = ['sha1', qSignTime, res, ''].join('\\n')\r\n\r\n  // console.log(stringToSign);\r\n  // 步骤四：计算 Signature\r\n  var qSignature = crypto\r\n    .createHmac('sha1', signKey)\r\n    .update(stringToSign)\r\n    .digest('hex')\r\n\r\n  // 步骤五：构造 Authorization\r\n  var authorization = [\r\n    'q-sign-algorithm=' + qSignAlgorithm,\r\n    'q-ak=' + qAk,\r\n    'q-sign-time=' + qSignTime,\r\n    'q-key-time=' + qKeyTime,\r\n    'q-header-list=' + qHeaderList,\r\n    'q-url-param-list=' + qUrlParamList,\r\n    'q-signature=' + qSignature\r\n  ].join('&')\r\n\r\n  return authorization\r\n}\r\n\r\nexports.getAuth = getAuth\r\n","let seqNum = 0\r\n\r\nfunction getSeqNum() {\r\n  return ++seqNum\r\n}\r\n\r\nfunction generateEvnentId() {\r\n  return (\r\n    Date.now() +\r\n    '_' +\r\n    getSeqNum() +\r\n    '_' +\r\n    Math.random()\r\n      .toString()\r\n      .substr(2, 5)\r\n  )\r\n}\r\n\r\nexports.generateTracingInfo = function generateTracingInfo() {\r\n  const TCB_SEQID = process.env.TCB_SEQID || ''\r\n  const eventId = generateEvnentId()\r\n  const seqId = TCB_SEQID ? `${TCB_SEQID}-${eventId}` : eventId\r\n\r\n  return { eventId, seqId }\r\n}\r\n","exports.filterValue = function filterValue(o, value) {\r\n  for (let key in o) {\r\n    if (o[key] === value) {\r\n      delete o[key]\r\n    }\r\n  }\r\n}\r\n\r\nexports.filterUndefined = function(o) {\r\n  return exports.filterValue(o, undefined)\r\n}\r\n\r\nexports.filterNull = function(o) {\r\n  return exports.filterValue(o, null)\r\n}\r\n\r\nexports.filterEmptyString = function(o) {\r\n  return exports.filterValue(o, '')\r\n}\r\n\r\nexports.deepFreeze = function(o) {\r\n  if (typeof value !== 'object') {\r\n    return o\r\n  }\r\n\r\n  Object.freeze(o)\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    const value = o[prop]\r\n    if (\r\n      typeof value === 'object' &&\r\n      value !== null &&\r\n      !Object.isFrozen(value)\r\n    ) {\r\n      exports.deepFreeze(value)\r\n    }\r\n  })\r\n\r\n  return o\r\n}\r\n\r\nexports.warpPromise = function warp(fn) {\r\n  return function(...args) {\r\n    // 确保返回 Promise 实例\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        return fn(...args)\r\n          .then(resolve)\r\n          .catch(reject)\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexports.getCurrentEnv = function() {\r\n  return process.env.TCB_ENV || process.env.SCF_NAMESPACE\r\n}\r\n","module.exports = {\r\n  \"name\": \"tcb-admin-node\",\r\n  \"version\": \"1.23.0\",\r\n  \"description\": \"tencent cloud base admin sdk for node.js\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"eslint\": \"eslint \\\"./**/*.js\\\" \\\"./**/*.ts\\\"\",\r\n    \"eslint-fix\": \"eslint --fix \\\"./**/*.js\\\" \\\"./**/*.ts\\\"\",\r\n    \"tsc\": \"tsc -p tsconfig.json\",\r\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\r\n    \"tstest\": \"mocha --timeout 5000 --require espower-typescript/guess test/**/*.test.ts\",\r\n    \"test\": \"jest --verbose false -i\",\r\n    \"coverage\": \"jest --verbose false --coverage\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/TencentCloudBase/tcb-admin-node\"\r\n  },\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/TencentCloudBase/tcb-admin-node/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/TencentCloudBase/tcb-admin-node#readme\",\r\n  \"keywords\": [\r\n    \"tcb-admin\"\r\n  ],\r\n  \"author\": \"jimmyzhang\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@cloudbase/database\": \"0.9.15\",\r\n    \"@cloudbase/signature-nodejs\": \"^1.0.0-beta.0\",\r\n    \"is-regex\": \"^1.0.4\",\r\n    \"jsonwebtoken\": \"^8.5.1\",\r\n    \"lodash.merge\": \"^4.6.1\",\r\n    \"request\": \"^2.87.0\",\r\n    \"xml2js\": \"^0.4.19\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/jest\": \"^23.1.4\",\r\n    \"@types/mocha\": \"^5.2.4\",\r\n    \"@types/node\": \"^10.12.12\",\r\n    \"bluebird\": \"^3.7.1\",\r\n    \"dumper.js\": \"^1.3.0\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-config-prettier\": \"^4.1.0\",\r\n    \"eslint-plugin-prettier\": \"^3.0.1\",\r\n    \"eslint-plugin-typescript\": \"^0.14.0\",\r\n    \"espower-typescript\": \"^8.1.4\",\r\n    \"husky\": \"^1.3.1\",\r\n    \"inquirer\": \"^6.3.1\",\r\n    \"jest\": \"^23.3.0\",\r\n    \"lint-staged\": \"^8.1.5\",\r\n    \"mocha\": \"^5.2.0\",\r\n    \"power-assert\": \"^1.5.0\",\r\n    \"prettier\": \"^1.17.0\",\r\n    \"semver\": \"^6.0.0\",\r\n    \"ts-jest\": \"^23.10.4\",\r\n    \"tslib\": \"^1.7.1\",\r\n    \"typescript\": \"^3.4.3\",\r\n    \"typescript-eslint-parser\": \"^22.0.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=8.6.0\"\r\n  },\r\n  \"husky\": {\r\n    \"hooks\": {\r\n      \"pre-commit\": \"lint-staged\"\r\n    }\r\n  },\r\n  \"lint-staged\": {\r\n    \"*.js\": [\r\n      \"eslint --fix\",\r\n      \"git add\"\r\n    ]\r\n  }\r\n}\r\n","// 由定时触发器触发时（TRIGGER_SRC=timer）：优先使用 WX_TRIGGER_API_TOKEN_V0，不存在的话，为了兼容兼容旧的开发者工具，也是使用 WX_API_TOKEN\r\n// 非定时触发器触发时（TRIGGER_SRC!=timer）: 使用 WX_API_TOKEN\r\nfunction getWxCloudApiToken() {\r\n  if (process.env.TRIGGER_SRC === 'timer') {\r\n    return process.env.WX_TRIGGER_API_TOKEN_V0 || process.env.WX_API_TOKEN || ''\r\n  } else {\r\n    return process.env.WX_API_TOKEN || ''\r\n  }\r\n}\r\n\r\nmodule.exports = getWxCloudApiToken\r\n","const EventEmitter = require('events').EventEmitter\r\n\r\nclass RequestTimgingsMeasurer extends EventEmitter {\r\n  static new(options) {\r\n    return new RequestTimgingsMeasurer(options)\r\n  }\r\n\r\n  constructor(options) {\r\n    super()\r\n\r\n    this.timings = {\r\n      // start: 0,\r\n      // lookup: -1,\r\n      // connect: -1,\r\n      // ready: -1,\r\n      // waiting: -1,\r\n      // download: -1,\r\n      // end: -1\r\n    }\r\n\r\n    this.enable = options.enable === true\r\n    this.timerStarted = false\r\n    this.intervalId = null\r\n    this.timeoutId = null\r\n\r\n    this.waitingTime = options.waitingTime || 1000\r\n    this.interval = options.interval || 200\r\n  }\r\n\r\n  _startTimer() {\r\n    if (!this.enable) {\r\n      return\r\n    }\r\n\r\n    if (this.timerStarted) {\r\n      return\r\n    }\r\n\r\n    this.timerStarted = true\r\n    this.intervalId = null\r\n    this.timeoutId = setTimeout(() => {\r\n      this._process()\r\n      this.intervalId = setInterval(() => {\r\n        this._process()\r\n      }, this.interval)\r\n    }, this.waitingTime)\r\n  }\r\n\r\n  _stopTimer() {\r\n    if (!this.enable) {\r\n      return\r\n    }\r\n\r\n    if (!this.timerStarted) {\r\n      return\r\n    }\r\n\r\n    this.timerStarted = false\r\n\r\n    clearTimeout(this.timeoutId)\r\n    clearInterval(this.intervalId)\r\n    this._process()\r\n  }\r\n\r\n  _process() {\r\n    this.emit('progress', { ...this.timings })\r\n  }\r\n\r\n  measure(clientRequest) {\r\n    if (!this.enable) {\r\n      return\r\n    }\r\n\r\n    this._startTimer()\r\n    const timings = this.timings\r\n\r\n    timings.start = Date.now()\r\n\r\n    clientRequest\r\n      .on('response', message => {\r\n        timings.response = Date.now()\r\n\r\n        timings.waiting = Date.now() - timings.start\r\n\r\n        message.on('end', () => {\r\n          timings.socket = timings.socket || 0\r\n          // timings.lookup = timings.lookup || timings.socket\r\n          // timings.connect = timings.connect || timings.lookup\r\n          timings.download = Date.now() - timings.response\r\n          timings.end = Date.now() - timings.start\r\n\r\n          this._stopTimer()\r\n        })\r\n      })\r\n      .on('socket', socket => {\r\n        timings.socket = Date.now() - timings.start\r\n        if (socket.connecting) {\r\n          socket.on('lookup', () => {\r\n            timings.lookup = Date.now() - timings.start\r\n          })\r\n          socket.on('connect', () => {\r\n            timings.connect = Date.now() - timings.start\r\n          })\r\n          socket.on('ready', () => {\r\n            timings.ready = Date.now() - timings.start\r\n          })\r\n          // socket.on('data', () => {})\r\n          // socket.on('drain', () => {})\r\n          // socket.on('end', () => {\r\n          //   // this._stopTimer()\r\n          // })\r\n          socket.on('error', () => {\r\n            timings.error = Date.now() - timings.start\r\n          })\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexports.RequestTimgingsMeasurer = RequestTimgingsMeasurer\r\n","exports.SYMBOL_CURRENT_ENV = Symbol.for('SYMBOL_CURRENT_ENV')\r\n","const httpRequest = require('../utils/httpRequest')\r\n\r\n/**\r\n * 调用云函数\r\n * @param {String} name  函数名\r\n * @param {Object} functionParam 函数参数\r\n * @return {Promise}\r\n */\r\nfunction callFunction({ name, data }) {\r\n  try {\r\n    data = data ? JSON.stringify(data) : ''\r\n  } catch (e) {\r\n    return Promise.reject(e)\r\n  }\r\n  if (!name) {\r\n    return Promise.reject(\r\n      new Error({\r\n        message: '函数名不能为空'\r\n      })\r\n    )\r\n  }\r\n\r\n  const params = {\r\n    action: 'functions.invokeFunction',\r\n    function_name: name,\r\n    request_data: data\r\n  }\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n      ...(process.env.TCB_ROUTE_KEY\r\n        ? { 'X-Tcb-Route-Key': process.env.TCB_ROUTE_KEY }\r\n        : {})\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res\r\n    } else {\r\n      let result\r\n      try {\r\n        result = JSON.parse(res.data.response_data)\r\n      } catch (e) {\r\n        result = res.data.response_data\r\n      }\r\n      return {\r\n        result,\r\n        requestId: res.requestId\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexports.callFunction = callFunction\r\n","const jwt = require('jsonwebtoken')\r\nconst { SYMBOL_CURRENT_ENV } = require('../const/symbol')\r\nconst { getCurrentEnv } = require('../utils/utils')\r\n\r\nconst checkCustomUserIdRegex = /^[a-zA-Z0-9_\\-#@~=*(){}[\\]:.,<>+]{4,32}$/\r\n\r\nfunction validateUid(uid) {\r\n  if (typeof uid !== 'string') {\r\n    throw new TypeError('uid must be a string')\r\n  }\r\n  if (!checkCustomUserIdRegex.test(uid)) {\r\n    throw new Error(`Invalid uid: \"${uid}\"`)\r\n  }\r\n}\r\n\r\nexports.auth = function() {\r\n  let self = this\r\n  return {\r\n    getUserInfo() {\r\n      const openId = process.env.WX_OPENID || ''\r\n      const appId = process.env.WX_APPID || ''\r\n      const uid = process.env.TCB_UUID || ''\r\n      const customUserId = process.env.TCB_CUSTOM_USER_ID || ''\r\n      const isAnonymous =\r\n        process.env.TCB_ISANONYMOUS_USER === 'true' ? true : false\r\n\r\n      return {\r\n        openId,\r\n        appId,\r\n        uid,\r\n        customUserId,\r\n        isAnonymous\r\n      }\r\n    },\r\n    async getAuthContext(context) {\r\n      const { environment, environ } = self.parseContext(context)\r\n      const env = environment || environ || {}\r\n      const { TCB_UUID, LOGINTYPE } = env\r\n      const res = {\r\n        uid: TCB_UUID,\r\n        loginType: LOGINTYPE\r\n      }\r\n      if (LOGINTYPE === 'QQ-MINI') {\r\n        const { QQ_OPENID, QQ_APPID } = env\r\n        res.appId = QQ_APPID\r\n        res.openId = QQ_OPENID\r\n      }\r\n      return res\r\n    },\r\n    getClientIP() {\r\n      return process.env.TCB_SOURCE_IP || ''\r\n    },\r\n    createTicket: (uid, options = {}) => {\r\n      validateUid(uid)\r\n      const timestamp = new Date().getTime()\r\n      let { credentials, envName } = this.config\r\n      if (!envName) {\r\n        throw new Error('no env in config')\r\n      }\r\n\r\n      // 使用symbol时替换为环境变量内的env\r\n      if (envName === SYMBOL_CURRENT_ENV) {\r\n        envName = getCurrentEnv()\r\n      }\r\n\r\n      const {\r\n        refresh = 3600 * 1000,\r\n        expire = timestamp + 7 * 24 * 60 * 60 * 1000\r\n      } = options\r\n      var token = jwt.sign(\r\n        {\r\n          alg: 'RS256',\r\n          env: envName,\r\n          iat: timestamp,\r\n          exp: timestamp + 10 * 60 * 1000, // ticket十分钟有效\r\n          uid,\r\n          refresh,\r\n          expire\r\n        },\r\n        credentials.private_key,\r\n        { algorithm: 'RS256' }\r\n      )\r\n\r\n      return credentials.private_key_id + '/@@/' + token\r\n    }\r\n  }\r\n}\r\n","const httpRequest = require('../utils/httpRequest')\r\n\r\nexports.callWxOpenApi = function({ apiName, requestData } = {}) {\r\n  try {\r\n    requestData = requestData ? JSON.stringify(requestData) : ''\r\n  } catch (e) {\r\n    throw Error(e)\r\n  }\r\n\r\n  const params = {\r\n    action: 'wx.api',\r\n    apiName,\r\n    requestData\r\n  }\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res\r\n    } else {\r\n      let result\r\n      try {\r\n        result = JSON.parse(res.data.responseData)\r\n      } catch (e) {\r\n        result = res.data.responseData\r\n      }\r\n      return {\r\n        result,\r\n        requestId: res.requestId\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 调用wxopenAPi\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nexports.callCompatibleWxOpenApi = function({ apiName, requestData } = {}) {\r\n  const params = {\r\n    action: 'wx.openApi',\r\n    apiName,\r\n    requestData\r\n  }\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {}\r\n  })\r\n}\r\n\r\n/**\r\n * wx.wxPayApi 微信支付用\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nexports.callWxPayApi = function({ apiName, requestData } = {}) {\r\n  const params = {\r\n    action: 'wx.wxPayApi',\r\n    apiName,\r\n    requestData\r\n  }\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: 'post',\r\n    headers: {}\r\n  })\r\n}\r\n","const httpRequest = require('./httpRequest')\r\n\r\n/**\r\n * 数据库模块的通用请求方法\r\n *\r\n * @author haroldhu\r\n * @internal\r\n */\r\nclass Request {\r\n  /**\r\n   * 初始化\r\n   *\r\n   * @internal\r\n   * @param config\r\n   */\r\n  constructor(config) {\r\n    this.config = config\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   *\r\n   * @param api   - 接口\r\n   * @param data  - 参数\r\n   */\r\n  async send(api, data) {\r\n    const params = Object.assign({}, data, {\r\n      action: api\r\n    })\r\n\r\n    return await httpRequest({\r\n      timeout: this.config.timeout,\r\n      config: this.config.config,\r\n      params,\r\n      method: 'post',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Request\r\n","/**\r\n *\r\n *\r\n * @class Log\r\n */\r\nclass Log {\r\n  constructor() {\r\n    this.src = 'app'\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @param {*} logLevel\r\n   * @returns\r\n   * @memberof Log\r\n   */\r\n  transformMsg(logMsg) {\r\n    // 目前logMsg只支持字符串value且不支持多级, 加一层转换处理\r\n    let realMsg = {}\r\n\r\n    realMsg = Object.assign({}, realMsg, logMsg)\r\n    return realMsg\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @param {*} logLevel\r\n   * @memberof Log\r\n   */\r\n  baseLog(logMsg, logLevel) {\r\n    // 判断当前是否属于tcb scf环境\r\n\r\n    if (Object.prototype.toString.call(logMsg).slice(8, -1) !== 'Object') {\r\n      throw Error('please input correct log msg')\r\n    }\r\n\r\n    const msgContent = this.transformMsg(logMsg)\r\n\r\n    console.__baseLog__(msgContent, logLevel)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @memberof Log\r\n   */\r\n  log(logMsg) {\r\n    this.baseLog(logMsg, 'log')\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @memberof Log\r\n   */\r\n  info(logMsg) {\r\n    this.baseLog(logMsg, 'info')\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @memberof Log\r\n   */\r\n  error(logMsg) {\r\n    this.baseLog(logMsg, 'error')\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {*} logMsg\r\n   * @memberof Log\r\n   */\r\n  warn(logMsg) {\r\n    this.baseLog(logMsg, 'warn')\r\n  }\r\n}\r\n\r\nexports.logger = () => {\r\n  return new Log()\r\n}\r\n","const httpRequest = require('./httpRequest')\r\nconst requestClient = require('request')\r\n\r\n/**\r\n * 扩展模块的请求类\r\n *\r\n */\r\nclass ExtRequest {\r\n  /**\r\n   * 初始化\r\n   *\r\n   * @internal\r\n   * @param config\r\n   */\r\n  // constructor(config) {\r\n  //   this.config = config\r\n  // }\r\n\r\n  /**\r\n   * 发送 tcb 请求\r\n   *\r\n   * @param api   - 接口\r\n   * @param data  - 参数\r\n   */\r\n  // async tcbRequest(api, data) {\r\n  //   const params = Object.assign({}, data, {\r\n  //     action: api\r\n  //   })\r\n\r\n  //   return await httpRequest({\r\n  //     timeout: this.config.timeout,\r\n  //     config: this.config,\r\n  //     params,\r\n  //     method: 'post',\r\n  //     headers: {\r\n  //       'content-type': 'application/json'\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  get(options) {\r\n    return this.rawRequest({\r\n      ...options,\r\n      method: 'get'\r\n    })\r\n  }\r\n  post(options) {\r\n    return this.rawRequest({\r\n      ...options,\r\n      method: 'post'\r\n    })\r\n  }\r\n  put(options) {\r\n    return this.rawRequest({\r\n      ...options,\r\n      method: 'put'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 发送普通请求\r\n   * @param {*} opts\r\n   */\r\n  async rawRequest(opts) {\r\n    let res = await new Promise((resolve, reject) => {\r\n      requestClient(opts, function(err, res, body) {\r\n        if (err) {\r\n          reject(err)\r\n        } else {\r\n          resolve({\r\n            data: body,\r\n            statusCode: res.statusCode,\r\n            header: res.headers\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    return res\r\n  }\r\n}\r\n\r\nmodule.exports = ExtRequest\r\n"]}
{"version":3,"sources":["promise.js","error.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var Ajv = require('ajv')\r\nvar HARError = require('./error')\r\nvar schemas = require('har-schema')\r\n\r\nvar ajv\r\n\r\nfunction createAjvInstance () {\r\n  var ajv = new Ajv({\r\n    allErrors: true\r\n  })\r\n  ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))\r\n  ajv.addSchema(schemas)\r\n\r\n  return ajv\r\n}\r\n\r\nfunction validate (name, data) {\r\n  data = data || {}\r\n\r\n  // validator config\r\n  ajv = ajv || createAjvInstance()\r\n\r\n  var validate = ajv.getSchema(name + '.json')\r\n\r\n  return new Promise(function (resolve, reject) {\r\n    var valid = validate(data)\r\n\r\n    !valid ? reject(new HARError(validate.errors)) : resolve(data)\r\n  })\r\n}\r\n\r\nexports.afterRequest = function (data) {\r\n  return validate('afterRequest', data)\r\n}\r\n\r\nexports.beforeRequest = function (data) {\r\n  return validate('beforeRequest', data)\r\n}\r\n\r\nexports.browser = function (data) {\r\n  return validate('browser', data)\r\n}\r\n\r\nexports.cache = function (data) {\r\n  return validate('cache', data)\r\n}\r\n\r\nexports.content = function (data) {\r\n  return validate('content', data)\r\n}\r\n\r\nexports.cookie = function (data) {\r\n  return validate('cookie', data)\r\n}\r\n\r\nexports.creator = function (data) {\r\n  return validate('creator', data)\r\n}\r\n\r\nexports.entry = function (data) {\r\n  return validate('entry', data)\r\n}\r\n\r\nexports.har = function (data) {\r\n  return validate('har', data)\r\n}\r\n\r\nexports.header = function (data) {\r\n  return validate('header', data)\r\n}\r\n\r\nexports.log = function (data) {\r\n  return validate('log', data)\r\n}\r\n\r\nexports.page = function (data) {\r\n  return validate('page', data)\r\n}\r\n\r\nexports.pageTimings = function (data) {\r\n  return validate('pageTimings', data)\r\n}\r\n\r\nexports.postData = function (data) {\r\n  return validate('postData', data)\r\n}\r\n\r\nexports.query = function (data) {\r\n  return validate('query', data)\r\n}\r\n\r\nexports.request = function (data) {\r\n  return validate('request', data)\r\n}\r\n\r\nexports.response = function (data) {\r\n  return validate('response', data)\r\n}\r\n\r\nexports.timings = function (data) {\r\n  return validate('timings', data)\r\n}\r\n","function HARError (errors) {\r\n  var message = 'validation failed'\r\n\r\n  this.name = 'HARError'\r\n  this.message = message\r\n  this.errors = errors\r\n\r\n  if (typeof Error.captureStackTrace === 'function') {\r\n    Error.captureStackTrace(this, this.constructor)\r\n  } else {\r\n    this.stack = (new Error(message)).stack\r\n  }\r\n}\r\n\r\nHARError.prototype = Error.prototype\r\n\r\nmodule.exports = HARError\r\n"]}
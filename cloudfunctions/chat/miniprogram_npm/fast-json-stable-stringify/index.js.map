{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nmodule.exports = function (data, opts) {\r\n    if (!opts) opts = {};\r\n    if (typeof opts === 'function') opts = { cmp: opts };\r\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\r\n\r\n    var cmp = opts.cmp && (function (f) {\r\n        return function (node) {\r\n            return function (a, b) {\r\n                var aobj = { key: a, value: node[a] };\r\n                var bobj = { key: b, value: node[b] };\r\n                return f(aobj, bobj);\r\n            };\r\n        };\r\n    })(opts.cmp);\r\n\r\n    var seen = [];\r\n    return (function stringify (node) {\r\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\r\n            node = node.toJSON();\r\n        }\r\n\r\n        if (node === undefined) return;\r\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\r\n        if (typeof node !== 'object') return JSON.stringify(node);\r\n\r\n        var i, out;\r\n        if (Array.isArray(node)) {\r\n            out = '[';\r\n            for (i = 0; i < node.length; i++) {\r\n                if (i) out += ',';\r\n                out += stringify(node[i]) || 'null';\r\n            }\r\n            return out + ']';\r\n        }\r\n\r\n        if (node === null) return 'null';\r\n\r\n        if (seen.indexOf(node) !== -1) {\r\n            if (cycles) return JSON.stringify('__cycle__');\r\n            throw new TypeError('Converting circular structure to JSON');\r\n        }\r\n\r\n        var seenIndex = seen.push(node) - 1;\r\n        var keys = Object.keys(node).sort(cmp && cmp(node));\r\n        out = '';\r\n        for (i = 0; i < keys.length; i++) {\r\n            var key = keys[i];\r\n            var value = stringify(node[key]);\r\n\r\n            if (!value) continue;\r\n            if (out) out += ',';\r\n            out += JSON.stringify(key) + ':' + value;\r\n        }\r\n        seen.splice(seenIndex, 1);\r\n        return '{' + out + '}';\r\n    })(data);\r\n};\r\n"]}
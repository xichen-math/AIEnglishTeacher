{"version":3,"sources":["index.js","lib/websocket.js","lib/stream.js","lib/permessage-deflate.js","lib/buffer-util.js","lib/constants.js","lib/limiter.js","lib/receiver.js","lib/validation.js","lib/sender.js","lib/event-target.js","lib/extension.js","lib/websocket-server.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AGTA,ADGA,ADGA;ADIA,AGTA,ADGA,ADGA;AELA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ADGA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,AFMA,ADGA,ADGA;AGRA,ACHA,ACHA,AHSA,ADGA,ADGA;AGRA,ACHA,ACHA,AHSA,ADGA,ADGA;AGRA,ACHA,ACHA,AHSA,ADGA,ADGA;AGRA,ACHA,ACHA,AHSA,AIZA,ALeA,ADGA;AGRA,ACHA,ACHA,AHSA,AIZA,ALeA,ADGA;AGRA,ACHA,ACHA,AHSA,AIZA,ALeA,ADGA;AGRA,ACHA,ACHA,AHSA,AIZA,ALeA,AMlBA,APqBA;AGRA,ACHA,ACHA,AHSA,AIZA,ALeA,AMlBA,APqBA;AGRA,AENA,AHSA,AIZA,ALeA,AMlBA,APqBA;AGRA,AENA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AENA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AENA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,AJYA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,AJYA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,AJYA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,APqBA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ALeA,AHSA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AMlBA,AIZA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AGRA,AMlBA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,APqBA,AU9BA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AS1BA,ACHA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AU7BA,ARwBA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AENA,AGTA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,AKfA,AXiCA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AELA,AIZA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkBA;AMjBA,ANkfile":"index.js","sourcesContent":["\r\n\r\nconst WebSocket = require('./lib/websocket');\r\n\r\nWebSocket.createWebSocketStream = require('./lib/stream');\r\nWebSocket.Server = require('./lib/websocket-server');\r\nWebSocket.Receiver = require('./lib/receiver');\r\nWebSocket.Sender = require('./lib/sender');\r\n\r\nmodule.exports = WebSocket;\r\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = require('events');\r\nconst https = require('https');\r\nconst http = require('http');\r\nconst net = require('net');\r\nconst tls = require('tls');\r\nconst { randomBytes, createHash } = require('crypto');\r\nconst { Readable } = require('stream');\r\nconst { URL } = require('url');\r\n\r\nconst PerMessageDeflate = require('./permessage-deflate');\r\nconst Receiver = require('./receiver');\r\nconst Sender = require('./sender');\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  GUID,\r\n  kStatusCode,\r\n  kWebSocket,\r\n  NOOP\r\n} = require('./constants');\r\nconst { addEventListener, removeEventListener } = require('./event-target');\r\nconst { format, parse } = require('./extension');\r\nconst { toBuffer } = require('./buffer-util');\r\n\r\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\r\nconst protocolVersions = [8, 13];\r\nconst closeTimeout = 30 * 1000;\r\n\r\n/**\r\n * Class representing a WebSocket.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocket extends EventEmitter {\r\n  /**\r\n   * Create a new `WebSocket`.\r\n   *\r\n   * @param {(String|URL)} address The URL to which to connect\r\n   * @param {(String|String[])} [protocols] The subprotocols\r\n   * @param {Object} [options] Connection options\r\n   */\r\n  constructor(address, protocols, options) {\r\n    super();\r\n\r\n    this._binaryType = BINARY_TYPES[0];\r\n    this._closeCode = 1006;\r\n    this._closeFrameReceived = false;\r\n    this._closeFrameSent = false;\r\n    this._closeMessage = '';\r\n    this._closeTimer = null;\r\n    this._extensions = {};\r\n    this._protocol = '';\r\n    this._readyState = WebSocket.CONNECTING;\r\n    this._receiver = null;\r\n    this._sender = null;\r\n    this._socket = null;\r\n\r\n    if (address !== null) {\r\n      this._bufferedAmount = 0;\r\n      this._isServer = false;\r\n      this._redirects = 0;\r\n\r\n      if (Array.isArray(protocols)) {\r\n        protocols = protocols.join(', ');\r\n      } else if (typeof protocols === 'object' && protocols !== null) {\r\n        options = protocols;\r\n        protocols = undefined;\r\n      }\r\n\r\n      initAsClient(this, address, protocols, options);\r\n    } else {\r\n      this._isServer = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This deviates from the WHATWG interface since ws doesn't support the\r\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\r\n   * type).\r\n   *\r\n   * @type {String}\r\n   */\r\n  get binaryType() {\r\n    return this._binaryType;\r\n  }\r\n\r\n  set binaryType(type) {\r\n    if (!BINARY_TYPES.includes(type)) return;\r\n\r\n    this._binaryType = type;\r\n\r\n    //\r\n    // Allow to change `binaryType` on the fly.\r\n    //\r\n    if (this._receiver) this._receiver._binaryType = type;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get bufferedAmount() {\r\n    if (!this._socket) return this._bufferedAmount;\r\n\r\n    return this._socket._writableState.length + this._sender._bufferedBytes;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get extensions() {\r\n    return Object.keys(this._extensions).join();\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onclose() {\r\n    return undefined;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  set onclose(listener) {}\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onerror() {\r\n    return undefined;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  set onerror(listener) {}\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onopen() {\r\n    return undefined;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  set onopen(listener) {}\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onmessage() {\r\n    return undefined;\r\n  }\r\n\r\n  /* istanbul ignore next */\r\n  set onmessage(listener) {}\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get protocol() {\r\n    return this._protocol;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get readyState() {\r\n    return this._readyState;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get url() {\r\n    return this._url;\r\n  }\r\n\r\n  /**\r\n   * Set up the socket and the internal resources.\r\n   *\r\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\r\n   *     server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Number} [maxPayload=0] The maximum allowed message size\r\n   * @private\r\n   */\r\n  setSocket(socket, head, maxPayload) {\r\n    const receiver = new Receiver(\r\n      this.binaryType,\r\n      this._extensions,\r\n      this._isServer,\r\n      maxPayload\r\n    );\r\n\r\n    this._sender = new Sender(socket, this._extensions);\r\n    this._receiver = receiver;\r\n    this._socket = socket;\r\n\r\n    receiver[kWebSocket] = this;\r\n    socket[kWebSocket] = this;\r\n\r\n    receiver.on('conclude', receiverOnConclude);\r\n    receiver.on('drain', receiverOnDrain);\r\n    receiver.on('error', receiverOnError);\r\n    receiver.on('message', receiverOnMessage);\r\n    receiver.on('ping', receiverOnPing);\r\n    receiver.on('pong', receiverOnPong);\r\n\r\n    socket.setTimeout(0);\r\n    socket.setNoDelay();\r\n\r\n    if (head.length > 0) socket.unshift(head);\r\n\r\n    socket.on('close', socketOnClose);\r\n    socket.on('data', socketOnData);\r\n    socket.on('end', socketOnEnd);\r\n    socket.on('error', socketOnError);\r\n\r\n    this._readyState = WebSocket.OPEN;\r\n    this.emit('open');\r\n  }\r\n\r\n  /**\r\n   * Emit the `'close'` event.\r\n   *\r\n   * @private\r\n   */\r\n  emitClose() {\r\n    if (!this._socket) {\r\n      this._readyState = WebSocket.CLOSED;\r\n      this.emit('close', this._closeCode, this._closeMessage);\r\n      return;\r\n    }\r\n\r\n    if (this._extensions[PerMessageDeflate.extensionName]) {\r\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\r\n    }\r\n\r\n    this._receiver.removeAllListeners();\r\n    this._readyState = WebSocket.CLOSED;\r\n    this.emit('close', this._closeCode, this._closeMessage);\r\n  }\r\n\r\n  /**\r\n   * Start a closing handshake.\r\n   *\r\n   *          +----------+   +-----------+   +----------+\r\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\r\n   *    |     +----------+   +-----------+   +----------+     |\r\n   *          +----------+   +-----------+         |\r\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\r\n   *          +----------+   +-----------+   |\r\n   *    |           |                        |   +---+        |\r\n   *                +------------------------+-->|fin| - - - -\r\n   *    |         +---+                      |   +---+\r\n   *     - - - - -|fin|<---------------------+\r\n   *              +---+\r\n   *\r\n   * @param {Number} [code] Status code explaining why the connection is closing\r\n   * @param {String} [data] A string explaining why the connection is closing\r\n   * @public\r\n   */\r\n  close(code, data) {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      return abortHandshake(this, this._req, msg);\r\n    }\r\n\r\n    if (this.readyState === WebSocket.CLOSING) {\r\n      if (\r\n        this._closeFrameSent &&\r\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this._readyState = WebSocket.CLOSING;\r\n    this._sender.close(code, data, !this._isServer, (err) => {\r\n      //\r\n      // This error is handled by the `'error'` listener on the socket. We only\r\n      // want to know if the close frame has been sent here.\r\n      //\r\n      if (err) return;\r\n\r\n      this._closeFrameSent = true;\r\n\r\n      if (\r\n        this._closeFrameReceived ||\r\n        this._receiver._writableState.errorEmitted\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n    });\r\n\r\n    //\r\n    // Specify a timeout for the closing handshake to complete.\r\n    //\r\n    this._closeTimer = setTimeout(\r\n      this._socket.destroy.bind(this._socket),\r\n      closeTimeout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Send a ping.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the ping is sent\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Send a pong.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the pong is sent\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Send a data message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\r\n   *     text\r\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when data is written out\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof options === 'function') {\r\n      cb = options;\r\n      options = {};\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    const opts = {\r\n      binary: typeof data !== 'string',\r\n      mask: !this._isServer,\r\n      compress: true,\r\n      fin: true,\r\n      ...options\r\n    };\r\n\r\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\r\n      opts.compress = false;\r\n    }\r\n\r\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\r\n  }\r\n\r\n  /**\r\n   * Forcibly close the connection.\r\n   *\r\n   * @public\r\n   */\r\n  terminate() {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      return abortHandshake(this, this._req, msg);\r\n    }\r\n\r\n    if (this._socket) {\r\n      this._readyState = WebSocket.CLOSING;\r\n      this._socket.destroy();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n[\r\n  'binaryType',\r\n  'bufferedAmount',\r\n  'extensions',\r\n  'protocol',\r\n  'readyState',\r\n  'url'\r\n].forEach((property) => {\r\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\r\n});\r\n\r\n//\r\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\r\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\r\n//\r\n['open', 'error', 'close', 'message'].forEach((method) => {\r\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\r\n    enumerable: true,\r\n    get() {\r\n      const listeners = this.listeners(method);\r\n      for (let i = 0; i < listeners.length; i++) {\r\n        if (listeners[i]._listener) return listeners[i]._listener;\r\n      }\r\n\r\n      return undefined;\r\n    },\r\n    set(listener) {\r\n      const listeners = this.listeners(method);\r\n      for (let i = 0; i < listeners.length; i++) {\r\n        //\r\n        // Remove only the listeners added via `addEventListener`.\r\n        //\r\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\r\n      }\r\n      this.addEventListener(method, listener);\r\n    }\r\n  });\r\n});\r\n\r\nWebSocket.prototype.addEventListener = addEventListener;\r\nWebSocket.prototype.removeEventListener = removeEventListener;\r\n\r\nmodule.exports = WebSocket;\r\n\r\n/**\r\n * Initialize a WebSocket client.\r\n *\r\n * @param {WebSocket} websocket The client to initialize\r\n * @param {(String|URL)} address The URL to which to connect\r\n * @param {String} [protocols] The subprotocols\r\n * @param {Object} [options] Connection options\r\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\r\n *     permessage-deflate\r\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\r\n *     handshake request\r\n * @param {Number} [options.protocolVersion=13] Value of the\r\n *     `Sec-WebSocket-Version` header\r\n * @param {String} [options.origin] Value of the `Origin` or\r\n *     `Sec-WebSocket-Origin` header\r\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n *     size\r\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\r\n *     redirects\r\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\r\n *     allowed\r\n * @private\r\n */\r\nfunction initAsClient(websocket, address, protocols, options) {\r\n  const opts = {\r\n    protocolVersion: protocolVersions[1],\r\n    maxPayload: 100 * 1024 * 1024,\r\n    perMessageDeflate: true,\r\n    followRedirects: false,\r\n    maxRedirects: 10,\r\n    ...options,\r\n    createConnection: undefined,\r\n    socketPath: undefined,\r\n    hostname: undefined,\r\n    protocol: undefined,\r\n    timeout: undefined,\r\n    method: undefined,\r\n    host: undefined,\r\n    path: undefined,\r\n    port: undefined\r\n  };\r\n\r\n  if (!protocolVersions.includes(opts.protocolVersion)) {\r\n    throw new RangeError(\r\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\r\n        `(supported versions: ${protocolVersions.join(', ')})`\r\n    );\r\n  }\r\n\r\n  let parsedUrl;\r\n\r\n  if (address instanceof URL) {\r\n    parsedUrl = address;\r\n    websocket._url = address.href;\r\n  } else {\r\n    parsedUrl = new URL(address);\r\n    websocket._url = address;\r\n  }\r\n\r\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\r\n\r\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\r\n    const err = new Error(`Invalid URL: ${websocket.url}`);\r\n\r\n    if (websocket._redirects === 0) {\r\n      throw err;\r\n    } else {\r\n      emitErrorAndClose(websocket, err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  const isSecure =\r\n    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\r\n  const defaultPort = isSecure ? 443 : 80;\r\n  const key = randomBytes(16).toString('base64');\r\n  const get = isSecure ? https.get : http.get;\r\n  let perMessageDeflate;\r\n\r\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\r\n  opts.defaultPort = opts.defaultPort || defaultPort;\r\n  opts.port = parsedUrl.port || defaultPort;\r\n  opts.host = parsedUrl.hostname.startsWith('[')\r\n    ? parsedUrl.hostname.slice(1, -1)\r\n    : parsedUrl.hostname;\r\n  opts.headers = {\r\n    'Sec-WebSocket-Version': opts.protocolVersion,\r\n    'Sec-WebSocket-Key': key,\r\n    Connection: 'Upgrade',\r\n    Upgrade: 'websocket',\r\n    ...opts.headers\r\n  };\r\n  opts.path = parsedUrl.pathname + parsedUrl.search;\r\n  opts.timeout = opts.handshakeTimeout;\r\n\r\n  if (opts.perMessageDeflate) {\r\n    perMessageDeflate = new PerMessageDeflate(\r\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\r\n      false,\r\n      opts.maxPayload\r\n    );\r\n    opts.headers['Sec-WebSocket-Extensions'] = format({\r\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\r\n    });\r\n  }\r\n  if (protocols) {\r\n    opts.headers['Sec-WebSocket-Protocol'] = protocols;\r\n  }\r\n  if (opts.origin) {\r\n    if (opts.protocolVersion < 13) {\r\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\r\n    } else {\r\n      opts.headers.Origin = opts.origin;\r\n    }\r\n  }\r\n  if (parsedUrl.username || parsedUrl.password) {\r\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\r\n  }\r\n\r\n  if (isUnixSocket) {\r\n    const parts = opts.path.split(':');\r\n\r\n    opts.socketPath = parts[0];\r\n    opts.path = parts[1];\r\n  }\r\n\r\n  if (opts.followRedirects) {\r\n    if (websocket._redirects === 0) {\r\n      websocket._originalUnixSocket = isUnixSocket;\r\n      websocket._originalSecure = isSecure;\r\n      websocket._originalHostOrSocketPath = isUnixSocket\r\n        ? opts.socketPath\r\n        : parsedUrl.host;\r\n\r\n      const headers = options && options.headers;\r\n\r\n      //\r\n      // Shallow copy the user provided options so that headers can be changed\r\n      // without mutating the original object.\r\n      //\r\n      options = { ...options, headers: {} };\r\n\r\n      if (headers) {\r\n        for (const [key, value] of Object.entries(headers)) {\r\n          options.headers[key.toLowerCase()] = value;\r\n        }\r\n      }\r\n    } else {\r\n      const isSameHost = isUnixSocket\r\n        ? websocket._originalUnixSocket\r\n          ? opts.socketPath === websocket._originalHostOrSocketPath\r\n          : false\r\n        : websocket._originalUnixSocket\r\n        ? false\r\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\r\n\r\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\r\n        //\r\n        // Match curl 7.77.0 behavior and drop the following headers. These\r\n        // headers are also dropped when following a redirect to a subdomain.\r\n        //\r\n        delete opts.headers.authorization;\r\n        delete opts.headers.cookie;\r\n\r\n        if (!isSameHost) delete opts.headers.host;\r\n\r\n        opts.auth = undefined;\r\n      }\r\n    }\r\n\r\n    //\r\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\r\n    // If the `Authorization` header is set, then there is nothing to do as it\r\n    // will take precedence.\r\n    //\r\n    if (opts.auth && !options.headers.authorization) {\r\n      options.headers.authorization =\r\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\r\n    }\r\n  }\r\n\r\n  let req = (websocket._req = get(opts));\r\n\r\n  if (opts.timeout) {\r\n    req.on('timeout', () => {\r\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\r\n    });\r\n  }\r\n\r\n  req.on('error', (err) => {\r\n    if (req === null || req.aborted) return;\r\n\r\n    req = websocket._req = null;\r\n    emitErrorAndClose(websocket, err);\r\n  });\r\n\r\n  req.on('response', (res) => {\r\n    const location = res.headers.location;\r\n    const statusCode = res.statusCode;\r\n\r\n    if (\r\n      location &&\r\n      opts.followRedirects &&\r\n      statusCode >= 300 &&\r\n      statusCode < 400\r\n    ) {\r\n      if (++websocket._redirects > opts.maxRedirects) {\r\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\r\n        return;\r\n      }\r\n\r\n      req.abort();\r\n\r\n      let addr;\r\n\r\n      try {\r\n        addr = new URL(location, address);\r\n      } catch (err) {\r\n        emitErrorAndClose(websocket, err);\r\n        return;\r\n      }\r\n\r\n      initAsClient(websocket, addr, protocols, options);\r\n    } else if (!websocket.emit('unexpected-response', req, res)) {\r\n      abortHandshake(\r\n        websocket,\r\n        req,\r\n        `Unexpected server response: ${res.statusCode}`\r\n      );\r\n    }\r\n  });\r\n\r\n  req.on('upgrade', (res, socket, head) => {\r\n    websocket.emit('upgrade', res);\r\n\r\n    //\r\n    // The user may have closed the connection from a listener of the `upgrade`\r\n    // event.\r\n    //\r\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\r\n\r\n    req = websocket._req = null;\r\n\r\n    const upgrade = res.headers.upgrade;\r\n\r\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\r\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\r\n      return;\r\n    }\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    if (res.headers['sec-websocket-accept'] !== digest) {\r\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\r\n      return;\r\n    }\r\n\r\n    const serverProt = res.headers['sec-websocket-protocol'];\r\n    const protList = (protocols || '').split(/, */);\r\n    let protError;\r\n\r\n    if (!protocols && serverProt) {\r\n      protError = 'Server sent a subprotocol but none was requested';\r\n    } else if (protocols && !serverProt) {\r\n      protError = 'Server sent no subprotocol';\r\n    } else if (serverProt && !protList.includes(serverProt)) {\r\n      protError = 'Server sent an invalid subprotocol';\r\n    }\r\n\r\n    if (protError) {\r\n      abortHandshake(websocket, socket, protError);\r\n      return;\r\n    }\r\n\r\n    if (serverProt) websocket._protocol = serverProt;\r\n\r\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\r\n\r\n    if (secWebSocketExtensions !== undefined) {\r\n      if (!perMessageDeflate) {\r\n        const message =\r\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\r\n          'was requested';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      let extensions;\r\n\r\n      try {\r\n        extensions = parse(secWebSocketExtensions);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Extensions header';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      const extensionNames = Object.keys(extensions);\r\n\r\n      if (extensionNames.length) {\r\n        if (\r\n          extensionNames.length !== 1 ||\r\n          extensionNames[0] !== PerMessageDeflate.extensionName\r\n        ) {\r\n          const message =\r\n            'Server indicated an extension that was not requested';\r\n          abortHandshake(websocket, socket, message);\r\n          return;\r\n        }\r\n\r\n        try {\r\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\r\n        } catch (err) {\r\n          const message = 'Invalid Sec-WebSocket-Extensions header';\r\n          abortHandshake(websocket, socket, message);\r\n          return;\r\n        }\r\n\r\n        websocket._extensions[PerMessageDeflate.extensionName] =\r\n          perMessageDeflate;\r\n      }\r\n    }\r\n\r\n    websocket.setSocket(socket, head, opts.maxPayload);\r\n  });\r\n}\r\n\r\n/**\r\n * Emit the `'error'` and `'close'` event.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {Error} The error to emit\r\n * @private\r\n */\r\nfunction emitErrorAndClose(websocket, err) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  websocket.emit('error', err);\r\n  websocket.emitClose();\r\n}\r\n\r\n/**\r\n * Create a `net.Socket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {net.Socket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction netConnect(options) {\r\n  options.path = options.socketPath;\r\n  return net.connect(options);\r\n}\r\n\r\n/**\r\n * Create a `tls.TLSSocket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {tls.TLSSocket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction tlsConnect(options) {\r\n  options.path = undefined;\r\n\r\n  if (!options.servername && options.servername !== '') {\r\n    options.servername = net.isIP(options.host) ? '' : options.host;\r\n  }\r\n\r\n  return tls.connect(options);\r\n}\r\n\r\n/**\r\n * Abort the handshake and emit an error.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\r\n *     abort or the socket to destroy\r\n * @param {String} message The error message\r\n * @private\r\n */\r\nfunction abortHandshake(websocket, stream, message) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  const err = new Error(message);\r\n  Error.captureStackTrace(err, abortHandshake);\r\n\r\n  if (stream.setHeader) {\r\n    stream.abort();\r\n\r\n    if (stream.socket && !stream.socket.destroyed) {\r\n      //\r\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\r\n      // called after the request completed. See\r\n      // https://github.com/websockets/ws/issues/1869.\r\n      //\r\n      stream.socket.destroy();\r\n    }\r\n\r\n    stream.once('abort', websocket.emitClose.bind(websocket));\r\n    websocket.emit('error', err);\r\n  } else {\r\n    stream.destroy(err);\r\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\r\n    stream.once('close', websocket.emitClose.bind(websocket));\r\n  }\r\n}\r\n\r\n/**\r\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\r\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {*} [data] The data to send\r\n * @param {Function} [cb] Callback\r\n * @private\r\n */\r\nfunction sendAfterClose(websocket, data, cb) {\r\n  if (data) {\r\n    const length = toBuffer(data).length;\r\n\r\n    //\r\n    // The `_bufferedAmount` property is used only when the peer is a client and\r\n    // the opening handshake fails. Under these circumstances, in fact, the\r\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\r\n    // properties are set to `null`.\r\n    //\r\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\r\n    else websocket._bufferedAmount += length;\r\n  }\r\n\r\n  if (cb) {\r\n    const err = new Error(\r\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\r\n        `(${readyStates[websocket.readyState]})`\r\n    );\r\n    cb(err);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'conclude'` event.\r\n *\r\n * @param {Number} code The status code\r\n * @param {String} reason The reason for closing\r\n * @private\r\n */\r\nfunction receiverOnConclude(code, reason) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._closeFrameReceived = true;\r\n  websocket._closeMessage = reason;\r\n  websocket._closeCode = code;\r\n\r\n  if (websocket._socket[kWebSocket] === undefined) return;\r\n\r\n  websocket._socket.removeListener('data', socketOnData);\r\n  process.nextTick(resume, websocket._socket);\r\n\r\n  if (code === 1005) websocket.close();\r\n  else websocket.close(code, reason);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'drain'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnDrain() {\r\n  this[kWebSocket]._socket.resume();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'error'` event.\r\n *\r\n * @param {(RangeError|Error)} err The emitted error\r\n * @private\r\n */\r\nfunction receiverOnError(err) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (websocket._socket[kWebSocket] !== undefined) {\r\n    websocket._socket.removeListener('data', socketOnData);\r\n\r\n    //\r\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\r\n    // https://github.com/websockets/ws/issues/1940.\r\n    //\r\n    process.nextTick(resume, websocket._socket);\r\n\r\n    websocket.close(err[kStatusCode]);\r\n  }\r\n\r\n  websocket.emit('error', err);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'finish'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnFinish() {\r\n  this[kWebSocket].emitClose();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'message'` event.\r\n *\r\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\r\n * @private\r\n */\r\nfunction receiverOnMessage(data) {\r\n  this[kWebSocket].emit('message', data);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'ping'` event.\r\n *\r\n * @param {Buffer} data The data included in the ping frame\r\n * @private\r\n */\r\nfunction receiverOnPing(data) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket.pong(data, !websocket._isServer, NOOP);\r\n  websocket.emit('ping', data);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'pong'` event.\r\n *\r\n * @param {Buffer} data The data included in the pong frame\r\n * @private\r\n */\r\nfunction receiverOnPong(data) {\r\n  this[kWebSocket].emit('pong', data);\r\n}\r\n\r\n/**\r\n * Resume a readable stream\r\n *\r\n * @param {Readable} stream The readable stream\r\n * @private\r\n */\r\nfunction resume(stream) {\r\n  stream.resume();\r\n}\r\n\r\n/**\r\n * The listener of the `net.Socket` `'close'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnClose() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('close', socketOnClose);\r\n  this.removeListener('data', socketOnData);\r\n  this.removeListener('end', socketOnEnd);\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  let chunk;\r\n\r\n  //\r\n  // The close frame might not have been received or the `'end'` event emitted,\r\n  // for example, if the socket was destroyed due to an error. Ensure that the\r\n  // `receiver` stream is closed after writing any remaining buffered data to\r\n  // it. If the readable side of the socket is in flowing mode then there is no\r\n  // buffered data as everything has been already written and `readable.read()`\r\n  // will return `null`. If instead, the socket is paused, any possible buffered\r\n  // data will be read as a single chunk.\r\n  //\r\n  if (\r\n    !this._readableState.endEmitted &&\r\n    !websocket._closeFrameReceived &&\r\n    !websocket._receiver._writableState.errorEmitted &&\r\n    (chunk = websocket._socket.read()) !== null\r\n  ) {\r\n    websocket._receiver.write(chunk);\r\n  }\r\n\r\n  websocket._receiver.end();\r\n\r\n  this[kWebSocket] = undefined;\r\n\r\n  clearTimeout(websocket._closeTimer);\r\n\r\n  if (\r\n    websocket._receiver._writableState.finished ||\r\n    websocket._receiver._writableState.errorEmitted\r\n  ) {\r\n    websocket.emitClose();\r\n  } else {\r\n    websocket._receiver.on('error', receiverOnFinish);\r\n    websocket._receiver.on('finish', receiverOnFinish);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `net.Socket` `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction socketOnData(chunk) {\r\n  if (!this[kWebSocket]._receiver.write(chunk)) {\r\n    this.pause();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `net.Socket` `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnEnd() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  websocket._receiver.end();\r\n  this.end();\r\n}\r\n\r\n/**\r\n * The listener of the `net.Socket` `'error'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('error', socketOnError);\r\n  this.on('error', NOOP);\r\n\r\n  if (websocket) {\r\n    websocket._readyState = WebSocket.CLOSING;\r\n    this.destroy();\r\n  }\r\n}\r\n","\r\n\r\nconst { Duplex } = require('stream');\r\n\r\n/**\r\n * Emits the `'close'` event on a stream.\r\n *\r\n * @param {Duplex} stream The stream.\r\n * @private\r\n */\r\nfunction emitClose(stream) {\r\n  stream.emit('close');\r\n}\r\n\r\n/**\r\n * The listener of the `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction duplexOnEnd() {\r\n  if (!this.destroyed && this._writableState.finished) {\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `'error'` event.\r\n *\r\n * @param {Error} err The error\r\n * @private\r\n */\r\nfunction duplexOnError(err) {\r\n  this.removeListener('error', duplexOnError);\r\n  this.destroy();\r\n  if (this.listenerCount('error') === 0) {\r\n    // Do not suppress the throwing behavior.\r\n    this.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * Wraps a `WebSocket` in a duplex stream.\r\n *\r\n * @param {WebSocket} ws The `WebSocket` to wrap\r\n * @param {Object} [options] The options for the `Duplex` constructor\r\n * @return {Duplex} The duplex stream\r\n * @public\r\n */\r\nfunction createWebSocketStream(ws, options) {\r\n  let resumeOnReceiverDrain = true;\r\n  let terminateOnDestroy = true;\r\n\r\n  function receiverOnDrain() {\r\n    if (resumeOnReceiverDrain) ws._socket.resume();\r\n  }\r\n\r\n  if (ws.readyState === ws.CONNECTING) {\r\n    ws.once('open', function open() {\r\n      ws._receiver.removeAllListeners('drain');\r\n      ws._receiver.on('drain', receiverOnDrain);\r\n    });\r\n  } else {\r\n    ws._receiver.removeAllListeners('drain');\r\n    ws._receiver.on('drain', receiverOnDrain);\r\n  }\r\n\r\n  const duplex = new Duplex({\r\n    ...options,\r\n    autoDestroy: false,\r\n    emitClose: false,\r\n    objectMode: false,\r\n    writableObjectMode: false\r\n  });\r\n\r\n  ws.on('message', function message(msg) {\r\n    if (!duplex.push(msg)) {\r\n      resumeOnReceiverDrain = false;\r\n      ws._socket.pause();\r\n    }\r\n  });\r\n\r\n  ws.once('error', function error(err) {\r\n    if (duplex.destroyed) return;\r\n\r\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\r\n    //\r\n    // - If the `'error'` event is emitted before the `'open'` event, then\r\n    //   `ws.terminate()` is a noop as no socket is assigned.\r\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\r\n    //   event of the `Receiver` object. The listener already closes the\r\n    //   connection by calling `ws.close()`. This allows a close frame to be\r\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\r\n    //   then the close frame might not be sent.\r\n    terminateOnDestroy = false;\r\n    duplex.destroy(err);\r\n  });\r\n\r\n  ws.once('close', function close() {\r\n    if (duplex.destroyed) return;\r\n\r\n    duplex.push(null);\r\n  });\r\n\r\n  duplex._destroy = function (err, callback) {\r\n    if (ws.readyState === ws.CLOSED) {\r\n      callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n      return;\r\n    }\r\n\r\n    let called = false;\r\n\r\n    ws.once('error', function error(err) {\r\n      called = true;\r\n      callback(err);\r\n    });\r\n\r\n    ws.once('close', function close() {\r\n      if (!called) callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n    });\r\n\r\n    if (terminateOnDestroy) ws.terminate();\r\n  };\r\n\r\n  duplex._final = function (callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._final(callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // If the value of the `_socket` property is `null` it means that `ws` is a\r\n    // client websocket and the handshake failed. In fact, when this happens, a\r\n    // socket is never assigned to the websocket. Wait for the `'error'` event\r\n    // that will be emitted by the websocket.\r\n    if (ws._socket === null) return;\r\n\r\n    if (ws._socket._writableState.finished) {\r\n      callback();\r\n      if (duplex._readableState.endEmitted) duplex.destroy();\r\n    } else {\r\n      ws._socket.once('finish', function finish() {\r\n        // `duplex` is not destroyed here because the `'end'` event will be\r\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\r\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\r\n        callback();\r\n      });\r\n      ws.close();\r\n    }\r\n  };\r\n\r\n  duplex._read = function () {\r\n    if (\r\n      (ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) &&\r\n      !resumeOnReceiverDrain\r\n    ) {\r\n      resumeOnReceiverDrain = true;\r\n      if (!ws._receiver._writableState.needDrain) ws._socket.resume();\r\n    }\r\n  };\r\n\r\n  duplex._write = function (chunk, encoding, callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._write(chunk, encoding, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    ws.send(chunk, callback);\r\n  };\r\n\r\n  duplex.on('end', duplexOnEnd);\r\n  duplex.on('error', duplexOnError);\r\n  return duplex;\r\n}\r\n\r\nmodule.exports = createWebSocketStream;\r\n","\r\n\r\nconst zlib = require('zlib');\r\n\r\nconst bufferUtil = require('./buffer-util');\r\nconst Limiter = require('./limiter');\r\nconst { kStatusCode, NOOP } = require('./constants');\r\n\r\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\r\nconst kPerMessageDeflate = Symbol('permessage-deflate');\r\nconst kTotalLength = Symbol('total-length');\r\nconst kCallback = Symbol('callback');\r\nconst kBuffers = Symbol('buffers');\r\nconst kError = Symbol('error');\r\n\r\n//\r\n// We limit zlib concurrency, which prevents severe memory fragmentation\r\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\r\n// and https://github.com/websockets/ws/issues/1202\r\n//\r\n// Intentionally global; it's the global thread pool that's an issue.\r\n//\r\nlet zlibLimiter;\r\n\r\n/**\r\n * permessage-deflate implementation.\r\n */\r\nclass PerMessageDeflate {\r\n  /**\r\n   * Creates a PerMessageDeflate instance.\r\n   *\r\n   * @param {Object} [options] Configuration options\r\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\r\n   *     disabling of server context takeover\r\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\r\n   *     acknowledge disabling of client context takeover\r\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\r\n   *     use of a custom server window size\r\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\r\n   *     for, or request, a custom client window size\r\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\r\n   *     deflate\r\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\r\n   *     inflate\r\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\r\n   *     messages should not be compressed\r\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\r\n   *     calls to zlib\r\n   * @param {Boolean} [isServer=false] Create the instance in either server or\r\n   *     client mode\r\n   * @param {Number} [maxPayload=0] The maximum allowed message length\r\n   */\r\n  constructor(options, isServer, maxPayload) {\r\n    this._maxPayload = maxPayload | 0;\r\n    this._options = options || {};\r\n    this._threshold =\r\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\r\n    this._isServer = !!isServer;\r\n    this._deflate = null;\r\n    this._inflate = null;\r\n\r\n    this.params = null;\r\n\r\n    if (!zlibLimiter) {\r\n      const concurrency =\r\n        this._options.concurrencyLimit !== undefined\r\n          ? this._options.concurrencyLimit\r\n          : 10;\r\n      zlibLimiter = new Limiter(concurrency);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  static get extensionName() {\r\n    return 'permessage-deflate';\r\n  }\r\n\r\n  /**\r\n   * Create an extension negotiation offer.\r\n   *\r\n   * @return {Object} Extension parameters\r\n   * @public\r\n   */\r\n  offer() {\r\n    const params = {};\r\n\r\n    if (this._options.serverNoContextTakeover) {\r\n      params.server_no_context_takeover = true;\r\n    }\r\n    if (this._options.clientNoContextTakeover) {\r\n      params.client_no_context_takeover = true;\r\n    }\r\n    if (this._options.serverMaxWindowBits) {\r\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\r\n    }\r\n    if (this._options.clientMaxWindowBits) {\r\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n    } else if (this._options.clientMaxWindowBits == null) {\r\n      params.client_max_window_bits = true;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Accept an extension negotiation offer/response.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Object} Accepted configuration\r\n   * @public\r\n   */\r\n  accept(configurations) {\r\n    configurations = this.normalizeParams(configurations);\r\n\r\n    this.params = this._isServer\r\n      ? this.acceptAsServer(configurations)\r\n      : this.acceptAsClient(configurations);\r\n\r\n    return this.params;\r\n  }\r\n\r\n  /**\r\n   * Releases all resources used by the extension.\r\n   *\r\n   * @public\r\n   */\r\n  cleanup() {\r\n    if (this._inflate) {\r\n      this._inflate.close();\r\n      this._inflate = null;\r\n    }\r\n\r\n    if (this._deflate) {\r\n      const callback = this._deflate[kCallback];\r\n\r\n      this._deflate.close();\r\n      this._deflate = null;\r\n\r\n      if (callback) {\r\n        callback(\r\n          new Error(\r\n            'The deflate stream was closed while data was being processed'\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Accept an extension negotiation offer.\r\n   *\r\n   * @param {Array} offers The extension negotiation offers\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsServer(offers) {\r\n    const opts = this._options;\r\n    const accepted = offers.find((params) => {\r\n      if (\r\n        (opts.serverNoContextTakeover === false &&\r\n          params.server_no_context_takeover) ||\r\n        (params.server_max_window_bits &&\r\n          (opts.serverMaxWindowBits === false ||\r\n            (typeof opts.serverMaxWindowBits === 'number' &&\r\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\r\n        (typeof opts.clientMaxWindowBits === 'number' &&\r\n          !params.client_max_window_bits)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    if (!accepted) {\r\n      throw new Error('None of the extension offers can be accepted');\r\n    }\r\n\r\n    if (opts.serverNoContextTakeover) {\r\n      accepted.server_no_context_takeover = true;\r\n    }\r\n    if (opts.clientNoContextTakeover) {\r\n      accepted.client_no_context_takeover = true;\r\n    }\r\n    if (typeof opts.serverMaxWindowBits === 'number') {\r\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\r\n    }\r\n    if (typeof opts.clientMaxWindowBits === 'number') {\r\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\r\n    } else if (\r\n      accepted.client_max_window_bits === true ||\r\n      opts.clientMaxWindowBits === false\r\n    ) {\r\n      delete accepted.client_max_window_bits;\r\n    }\r\n\r\n    return accepted;\r\n  }\r\n\r\n  /**\r\n   * Accept the extension negotiation response.\r\n   *\r\n   * @param {Array} response The extension negotiation response\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsClient(response) {\r\n    const params = response[0];\r\n\r\n    if (\r\n      this._options.clientNoContextTakeover === false &&\r\n      params.client_no_context_takeover\r\n    ) {\r\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\r\n    }\r\n\r\n    if (!params.client_max_window_bits) {\r\n      if (typeof this._options.clientMaxWindowBits === 'number') {\r\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n      }\r\n    } else if (\r\n      this._options.clientMaxWindowBits === false ||\r\n      (typeof this._options.clientMaxWindowBits === 'number' &&\r\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\r\n    ) {\r\n      throw new Error(\r\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\r\n      );\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Normalize parameters.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Array} The offers/response with normalized parameters\r\n   * @private\r\n   */\r\n  normalizeParams(configurations) {\r\n    configurations.forEach((params) => {\r\n      Object.keys(params).forEach((key) => {\r\n        let value = params[key];\r\n\r\n        if (value.length > 1) {\r\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\r\n        }\r\n\r\n        value = value[0];\r\n\r\n        if (key === 'client_max_window_bits') {\r\n          if (value !== true) {\r\n            const num = +value;\r\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n              throw new TypeError(\r\n                `Invalid value for parameter \"${key}\": ${value}`\r\n              );\r\n            }\r\n            value = num;\r\n          } else if (!this._isServer) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else if (key === 'server_max_window_bits') {\r\n          const num = +value;\r\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n          value = num;\r\n        } else if (\r\n          key === 'client_no_context_takeover' ||\r\n          key === 'server_no_context_takeover'\r\n        ) {\r\n          if (value !== true) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else {\r\n          throw new Error(`Unknown parameter \"${key}\"`);\r\n        }\r\n\r\n        params[key] = value;\r\n      });\r\n    });\r\n\r\n    return configurations;\r\n  }\r\n\r\n  /**\r\n   * Decompress data. Concurrency limited.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  decompress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._decompress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data. Concurrency limited.\r\n   *\r\n   * @param {Buffer} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  compress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._compress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Decompress data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _decompress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'client' : 'server';\r\n\r\n    if (!this._inflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._inflate = zlib.createInflateRaw({\r\n        ...this._options.zlibInflateOptions,\r\n        windowBits\r\n      });\r\n      this._inflate[kPerMessageDeflate] = this;\r\n      this._inflate[kTotalLength] = 0;\r\n      this._inflate[kBuffers] = [];\r\n      this._inflate.on('error', inflateOnError);\r\n      this._inflate.on('data', inflateOnData);\r\n    }\r\n\r\n    this._inflate[kCallback] = callback;\r\n\r\n    this._inflate.write(data);\r\n    if (fin) this._inflate.write(TRAILER);\r\n\r\n    this._inflate.flush(() => {\r\n      const err = this._inflate[kError];\r\n\r\n      if (err) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      const data = bufferUtil.concat(\r\n        this._inflate[kBuffers],\r\n        this._inflate[kTotalLength]\r\n      );\r\n\r\n      if (this._inflate._readableState.endEmitted) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n      } else {\r\n        this._inflate[kTotalLength] = 0;\r\n        this._inflate[kBuffers] = [];\r\n\r\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n          this._inflate.reset();\r\n        }\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data.\r\n   *\r\n   * @param {Buffer} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _compress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'server' : 'client';\r\n\r\n    if (!this._deflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._deflate = zlib.createDeflateRaw({\r\n        ...this._options.zlibDeflateOptions,\r\n        windowBits\r\n      });\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      //\r\n      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\r\n      // `zlib.DeflateRaw` instance is closed while data is being processed.\r\n      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\r\n      // time due to an abnormal WebSocket closure.\r\n      //\r\n      this._deflate.on('error', NOOP);\r\n      this._deflate.on('data', deflateOnData);\r\n    }\r\n\r\n    this._deflate[kCallback] = callback;\r\n\r\n    this._deflate.write(data);\r\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\r\n      if (!this._deflate) {\r\n        //\r\n        // The deflate stream was closed while data was being processed.\r\n        //\r\n        return;\r\n      }\r\n\r\n      let data = bufferUtil.concat(\r\n        this._deflate[kBuffers],\r\n        this._deflate[kTotalLength]\r\n      );\r\n\r\n      if (fin) data = data.slice(0, data.length - 4);\r\n\r\n      //\r\n      // Ensure that the callback will not be called again in\r\n      // `PerMessageDeflate#cleanup()`.\r\n      //\r\n      this._deflate[kCallback] = null;\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n        this._deflate.reset();\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = PerMessageDeflate;\r\n\r\n/**\r\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction deflateOnData(chunk) {\r\n  this[kBuffers].push(chunk);\r\n  this[kTotalLength] += chunk.length;\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction inflateOnData(chunk) {\r\n  this[kTotalLength] += chunk.length;\r\n\r\n  if (\r\n    this[kPerMessageDeflate]._maxPayload < 1 ||\r\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\r\n  ) {\r\n    this[kBuffers].push(chunk);\r\n    return;\r\n  }\r\n\r\n  this[kError] = new RangeError('Max payload size exceeded');\r\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\r\n  this[kError][kStatusCode] = 1009;\r\n  this.removeListener('data', inflateOnData);\r\n  this.reset();\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\r\n *\r\n * @param {Error} err The emitted error\r\n * @private\r\n */\r\nfunction inflateOnError(err) {\r\n  //\r\n  // There is no need to call `Zlib#close()` as the handle is automatically\r\n  // closed when an error is emitted.\r\n  //\r\n  this[kPerMessageDeflate]._inflate = null;\r\n  err[kStatusCode] = 1007;\r\n  this[kCallback](err);\r\n}\r\n","\r\n\r\nconst { EMPTY_BUFFER } = require('./constants');\r\n\r\n/**\r\n * Merges an array of buffers into a new buffer.\r\n *\r\n * @param {Buffer[]} list The array of buffers to concat\r\n * @param {Number} totalLength The total length of buffers in the list\r\n * @return {Buffer} The resulting buffer\r\n * @public\r\n */\r\nfunction concat(list, totalLength) {\r\n  if (list.length === 0) return EMPTY_BUFFER;\r\n  if (list.length === 1) return list[0];\r\n\r\n  const target = Buffer.allocUnsafe(totalLength);\r\n  let offset = 0;\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    target.set(buf, offset);\r\n    offset += buf.length;\r\n  }\r\n\r\n  if (offset < totalLength) return target.slice(0, offset);\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\r\nfunction _mask(source, mask, output, offset, length) {\r\n  for (let i = 0; i < length; i++) {\r\n    output[offset + i] = source[i] ^ mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\r\nfunction _unmask(buffer, mask) {\r\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\r\n  const length = buffer.length;\r\n  for (let i = 0; i < length; i++) {\r\n    buffer[i] ^= mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a buffer to an `ArrayBuffer`.\r\n *\r\n * @param {Buffer} buf The buffer to convert\r\n * @return {ArrayBuffer} Converted buffer\r\n * @public\r\n */\r\nfunction toArrayBuffer(buf) {\r\n  if (buf.byteLength === buf.buffer.byteLength) {\r\n    return buf.buffer;\r\n  }\r\n\r\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n}\r\n\r\n/**\r\n * Converts `data` to a `Buffer`.\r\n *\r\n * @param {*} data The data to convert\r\n * @return {Buffer} The buffer\r\n * @throws {TypeError}\r\n * @public\r\n */\r\nfunction toBuffer(data) {\r\n  toBuffer.readOnly = true;\r\n\r\n  if (Buffer.isBuffer(data)) return data;\r\n\r\n  let buf;\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    buf = Buffer.from(data);\r\n  } else if (ArrayBuffer.isView(data)) {\r\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\r\n  } else {\r\n    buf = Buffer.from(data);\r\n    toBuffer.readOnly = false;\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\ntry {\r\n  const bufferUtil = require('bufferutil');\r\n  const bu = bufferUtil.BufferUtil || bufferUtil;\r\n\r\n  module.exports = {\r\n    concat,\r\n    mask(source, mask, output, offset, length) {\r\n      if (length < 48) _mask(source, mask, output, offset, length);\r\n      else bu.mask(source, mask, output, offset, length);\r\n    },\r\n    toArrayBuffer,\r\n    toBuffer,\r\n    unmask(buffer, mask) {\r\n      if (buffer.length < 32) _unmask(buffer, mask);\r\n      else bu.unmask(buffer, mask);\r\n    }\r\n  };\r\n} catch (e) /* istanbul ignore next */ {\r\n  module.exports = {\r\n    concat,\r\n    mask: _mask,\r\n    toArrayBuffer,\r\n    toBuffer,\r\n    unmask: _unmask\r\n  };\r\n}\r\n","\r\n\r\nmodule.exports = {\r\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\r\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\r\n  kStatusCode: Symbol('status-code'),\r\n  kWebSocket: Symbol('websocket'),\r\n  EMPTY_BUFFER: Buffer.alloc(0),\r\n  NOOP: () => {}\r\n};\r\n","\r\n\r\nconst kDone = Symbol('kDone');\r\nconst kRun = Symbol('kRun');\r\n\r\n/**\r\n * A very simple job queue with adjustable concurrency. Adapted from\r\n * https://github.com/STRML/async-limiter\r\n */\r\nclass Limiter {\r\n  /**\r\n   * Creates a new `Limiter`.\r\n   *\r\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\r\n   *     to run concurrently\r\n   */\r\n  constructor(concurrency) {\r\n    this[kDone] = () => {\r\n      this.pending--;\r\n      this[kRun]();\r\n    };\r\n    this.concurrency = concurrency || Infinity;\r\n    this.jobs = [];\r\n    this.pending = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a job to the queue.\r\n   *\r\n   * @param {Function} job The job to run\r\n   * @public\r\n   */\r\n  add(job) {\r\n    this.jobs.push(job);\r\n    this[kRun]();\r\n  }\r\n\r\n  /**\r\n   * Removes a job from the queue and runs it if possible.\r\n   *\r\n   * @private\r\n   */\r\n  [kRun]() {\r\n    if (this.pending === this.concurrency) return;\r\n\r\n    if (this.jobs.length) {\r\n      const job = this.jobs.shift();\r\n\r\n      this.pending++;\r\n      job(this[kDone]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Limiter;\r\n","\r\n\r\nconst { Writable } = require('stream');\r\n\r\nconst PerMessageDeflate = require('./permessage-deflate');\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  kStatusCode,\r\n  kWebSocket\r\n} = require('./constants');\r\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\r\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\r\n\r\nconst GET_INFO = 0;\r\nconst GET_PAYLOAD_LENGTH_16 = 1;\r\nconst GET_PAYLOAD_LENGTH_64 = 2;\r\nconst GET_MASK = 3;\r\nconst GET_DATA = 4;\r\nconst INFLATING = 5;\r\n\r\n/**\r\n * HyBi Receiver implementation.\r\n *\r\n * @extends Writable\r\n */\r\nclass Receiver extends Writable {\r\n  /**\r\n   * Creates a Receiver instance.\r\n   *\r\n   * @param {String} [binaryType=nodebuffer] The type for binary data\r\n   * @param {Object} [extensions] An object containing the negotiated extensions\r\n   * @param {Boolean} [isServer=false] Specifies whether to operate in client or\r\n   *     server mode\r\n   * @param {Number} [maxPayload=0] The maximum allowed message length\r\n   */\r\n  constructor(binaryType, extensions, isServer, maxPayload) {\r\n    super();\r\n\r\n    this._binaryType = binaryType || BINARY_TYPES[0];\r\n    this[kWebSocket] = undefined;\r\n    this._extensions = extensions || {};\r\n    this._isServer = !!isServer;\r\n    this._maxPayload = maxPayload | 0;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._buffers = [];\r\n\r\n    this._compressed = false;\r\n    this._payloadLength = 0;\r\n    this._mask = undefined;\r\n    this._fragmented = 0;\r\n    this._masked = false;\r\n    this._fin = false;\r\n    this._opcode = 0;\r\n\r\n    this._totalPayloadLength = 0;\r\n    this._messageLength = 0;\r\n    this._fragments = [];\r\n\r\n    this._state = GET_INFO;\r\n    this._loop = false;\r\n  }\r\n\r\n  /**\r\n   * Implements `Writable.prototype._write()`.\r\n   *\r\n   * @param {Buffer} chunk The chunk of data to write\r\n   * @param {String} encoding The character encoding of `chunk`\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  _write(chunk, encoding, cb) {\r\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\r\n\r\n    this._bufferedBytes += chunk.length;\r\n    this._buffers.push(chunk);\r\n    this.startLoop(cb);\r\n  }\r\n\r\n  /**\r\n   * Consumes `n` bytes from the buffered data.\r\n   *\r\n   * @param {Number} n The number of bytes to consume\r\n   * @return {Buffer} The consumed bytes\r\n   * @private\r\n   */\r\n  consume(n) {\r\n    this._bufferedBytes -= n;\r\n\r\n    if (n === this._buffers[0].length) return this._buffers.shift();\r\n\r\n    if (n < this._buffers[0].length) {\r\n      const buf = this._buffers[0];\r\n      this._buffers[0] = buf.slice(n);\r\n      return buf.slice(0, n);\r\n    }\r\n\r\n    const dst = Buffer.allocUnsafe(n);\r\n\r\n    do {\r\n      const buf = this._buffers[0];\r\n      const offset = dst.length - n;\r\n\r\n      if (n >= buf.length) {\r\n        dst.set(this._buffers.shift(), offset);\r\n      } else {\r\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\r\n        this._buffers[0] = buf.slice(n);\r\n      }\r\n\r\n      n -= buf.length;\r\n    } while (n > 0);\r\n\r\n    return dst;\r\n  }\r\n\r\n  /**\r\n   * Starts the parsing loop.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  startLoop(cb) {\r\n    let err;\r\n    this._loop = true;\r\n\r\n    do {\r\n      switch (this._state) {\r\n        case GET_INFO:\r\n          err = this.getInfo();\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_16:\r\n          err = this.getPayloadLength16();\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_64:\r\n          err = this.getPayloadLength64();\r\n          break;\r\n        case GET_MASK:\r\n          this.getMask();\r\n          break;\r\n        case GET_DATA:\r\n          err = this.getData(cb);\r\n          break;\r\n        default:\r\n          // `INFLATING`\r\n          this._loop = false;\r\n          return;\r\n      }\r\n    } while (this._loop);\r\n\r\n    cb(err);\r\n  }\r\n\r\n  /**\r\n   * Reads the first two bytes of a frame.\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getInfo() {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(2);\r\n\r\n    if ((buf[0] & 0x30) !== 0x00) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'RSV2 and RSV3 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_2_3'\r\n      );\r\n    }\r\n\r\n    const compressed = (buf[0] & 0x40) === 0x40;\r\n\r\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'RSV1 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_1'\r\n      );\r\n    }\r\n\r\n    this._fin = (buf[0] & 0x80) === 0x80;\r\n    this._opcode = buf[0] & 0x0f;\r\n    this._payloadLength = buf[1] & 0x7f;\r\n\r\n    if (this._opcode === 0x00) {\r\n      if (compressed) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n      }\r\n\r\n      if (!this._fragmented) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'invalid opcode 0',\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n      }\r\n\r\n      this._opcode = this._fragmented;\r\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\r\n      if (this._fragmented) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          `invalid opcode ${this._opcode}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n      }\r\n\r\n      this._compressed = compressed;\r\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\r\n      if (!this._fin) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'FIN must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_FIN'\r\n        );\r\n      }\r\n\r\n      if (compressed) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n      }\r\n\r\n      if (this._payloadLength > 0x7d) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          `invalid payload length ${this._payloadLength}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\r\n        );\r\n      }\r\n    } else {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        `invalid opcode ${this._opcode}`,\r\n        true,\r\n        1002,\r\n        'WS_ERR_INVALID_OPCODE'\r\n      );\r\n    }\r\n\r\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\r\n    this._masked = (buf[1] & 0x80) === 0x80;\r\n\r\n    if (this._isServer) {\r\n      if (!this._masked) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'MASK must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_MASK'\r\n        );\r\n      }\r\n    } else if (this._masked) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'MASK must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_MASK'\r\n      );\r\n    }\r\n\r\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\r\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\r\n    else return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+16).\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getPayloadLength16() {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._payloadLength = this.consume(2).readUInt16BE(0);\r\n    return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+64).\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getPayloadLength64() {\r\n    if (this._bufferedBytes < 8) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(8);\r\n    const num = buf.readUInt32BE(0);\r\n\r\n    //\r\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\r\n    // if payload length is greater than this number.\r\n    //\r\n    if (num > Math.pow(2, 53 - 32) - 1) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\r\n        false,\r\n        1009,\r\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\r\n      );\r\n    }\r\n\r\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\r\n    return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Payload length has been read.\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  haveLength() {\r\n    if (this._payloadLength && this._opcode < 0x08) {\r\n      this._totalPayloadLength += this._payloadLength;\r\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'Max payload size exceeded',\r\n          false,\r\n          1009,\r\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._masked) this._state = GET_MASK;\r\n    else this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads mask bytes.\r\n   *\r\n   * @private\r\n   */\r\n  getMask() {\r\n    if (this._bufferedBytes < 4) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._mask = this.consume(4);\r\n    this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads data bytes.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @return {(Error|RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getData(cb) {\r\n    let data = EMPTY_BUFFER;\r\n\r\n    if (this._payloadLength) {\r\n      if (this._bufferedBytes < this._payloadLength) {\r\n        this._loop = false;\r\n        return;\r\n      }\r\n\r\n      data = this.consume(this._payloadLength);\r\n      if (this._masked) unmask(data, this._mask);\r\n    }\r\n\r\n    if (this._opcode > 0x07) return this.controlMessage(data);\r\n\r\n    if (this._compressed) {\r\n      this._state = INFLATING;\r\n      this.decompress(data, cb);\r\n      return;\r\n    }\r\n\r\n    if (data.length) {\r\n      //\r\n      // This message is not compressed so its lenght is the sum of the payload\r\n      // length of all fragments.\r\n      //\r\n      this._messageLength = this._totalPayloadLength;\r\n      this._fragments.push(data);\r\n    }\r\n\r\n    return this.dataMessage();\r\n  }\r\n\r\n  /**\r\n   * Decompresses data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  decompress(data, cb) {\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\r\n      if (err) return cb(err);\r\n\r\n      if (buf.length) {\r\n        this._messageLength += buf.length;\r\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\r\n          return cb(\r\n            error(\r\n              RangeError,\r\n              'Max payload size exceeded',\r\n              false,\r\n              1009,\r\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n            )\r\n          );\r\n        }\r\n\r\n        this._fragments.push(buf);\r\n      }\r\n\r\n      const er = this.dataMessage();\r\n      if (er) return cb(er);\r\n\r\n      this.startLoop(cb);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles a data message.\r\n   *\r\n   * @return {(Error|undefined)} A possible error\r\n   * @private\r\n   */\r\n  dataMessage() {\r\n    if (this._fin) {\r\n      const messageLength = this._messageLength;\r\n      const fragments = this._fragments;\r\n\r\n      this._totalPayloadLength = 0;\r\n      this._messageLength = 0;\r\n      this._fragmented = 0;\r\n      this._fragments = [];\r\n\r\n      if (this._opcode === 2) {\r\n        let data;\r\n\r\n        if (this._binaryType === 'nodebuffer') {\r\n          data = concat(fragments, messageLength);\r\n        } else if (this._binaryType === 'arraybuffer') {\r\n          data = toArrayBuffer(concat(fragments, messageLength));\r\n        } else {\r\n          data = fragments;\r\n        }\r\n\r\n        this.emit('message', data);\r\n      } else {\r\n        const buf = concat(fragments, messageLength);\r\n\r\n        if (!isValidUTF8(buf)) {\r\n          this._loop = false;\r\n          return error(\r\n            Error,\r\n            'invalid UTF-8 sequence',\r\n            true,\r\n            1007,\r\n            'WS_ERR_INVALID_UTF8'\r\n          );\r\n        }\r\n\r\n        this.emit('message', buf.toString());\r\n      }\r\n    }\r\n\r\n    this._state = GET_INFO;\r\n  }\r\n\r\n  /**\r\n   * Handles a control message.\r\n   *\r\n   * @param {Buffer} data Data to handle\r\n   * @return {(Error|RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  controlMessage(data) {\r\n    if (this._opcode === 0x08) {\r\n      this._loop = false;\r\n\r\n      if (data.length === 0) {\r\n        this.emit('conclude', 1005, '');\r\n        this.end();\r\n      } else if (data.length === 1) {\r\n        return error(\r\n          RangeError,\r\n          'invalid payload length 1',\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\r\n        );\r\n      } else {\r\n        const code = data.readUInt16BE(0);\r\n\r\n        if (!isValidStatusCode(code)) {\r\n          return error(\r\n            RangeError,\r\n            `invalid status code ${code}`,\r\n            true,\r\n            1002,\r\n            'WS_ERR_INVALID_CLOSE_CODE'\r\n          );\r\n        }\r\n\r\n        const buf = data.slice(2);\r\n\r\n        if (!isValidUTF8(buf)) {\r\n          return error(\r\n            Error,\r\n            'invalid UTF-8 sequence',\r\n            true,\r\n            1007,\r\n            'WS_ERR_INVALID_UTF8'\r\n          );\r\n        }\r\n\r\n        this.emit('conclude', code, buf.toString());\r\n        this.end();\r\n      }\r\n    } else if (this._opcode === 0x09) {\r\n      this.emit('ping', data);\r\n    } else {\r\n      this.emit('pong', data);\r\n    }\r\n\r\n    this._state = GET_INFO;\r\n  }\r\n}\r\n\r\nmodule.exports = Receiver;\r\n\r\n/**\r\n * Builds an error object.\r\n *\r\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\r\n * @param {String} message The error message\r\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\r\n *     `message`\r\n * @param {Number} statusCode The status code\r\n * @param {String} errorCode The exposed error code\r\n * @return {(Error|RangeError)} The error\r\n * @private\r\n */\r\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\r\n  const err = new ErrorCtor(\r\n    prefix ? `Invalid WebSocket frame: ${message}` : message\r\n  );\r\n\r\n  Error.captureStackTrace(err, error);\r\n  err.code = errorCode;\r\n  err[kStatusCode] = statusCode;\r\n  return err;\r\n}\r\n","\r\n\r\n/**\r\n * Checks if a status code is allowed in a close frame.\r\n *\r\n * @param {Number} code The status code\r\n * @return {Boolean} `true` if the status code is valid, else `false`\r\n * @public\r\n */\r\nfunction isValidStatusCode(code) {\r\n  return (\r\n    (code >= 1000 &&\r\n      code <= 1014 &&\r\n      code !== 1004 &&\r\n      code !== 1005 &&\r\n      code !== 1006) ||\r\n    (code >= 3000 && code <= 4999)\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if a given buffer contains only correct UTF-8.\r\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\r\n * Markus Kuhn.\r\n *\r\n * @param {Buffer} buf The buffer to check\r\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\r\n * @public\r\n */\r\nfunction _isValidUTF8(buf) {\r\n  const len = buf.length;\r\n  let i = 0;\r\n\r\n  while (i < len) {\r\n    if ((buf[i] & 0x80) === 0) {\r\n      // 0xxxxxxx\r\n      i++;\r\n    } else if ((buf[i] & 0xe0) === 0xc0) {\r\n      // 110xxxxx 10xxxxxx\r\n      if (\r\n        i + 1 === len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i] & 0xfe) === 0xc0 // Overlong\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 2;\r\n    } else if ((buf[i] & 0xf0) === 0xe0) {\r\n      // 1110xxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 2 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\r\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 3;\r\n    } else if ((buf[i] & 0xf8) === 0xf0) {\r\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 3 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i + 3] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\r\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\r\n        buf[i] > 0xf4 // > U+10FFFF\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 4;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\ntry {\r\n  let isValidUTF8 = require('utf-8-validate');\r\n\r\n  /* istanbul ignore if */\r\n  if (typeof isValidUTF8 === 'object') {\r\n    isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0\r\n  }\r\n\r\n  module.exports = {\r\n    isValidStatusCode,\r\n    isValidUTF8(buf) {\r\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\r\n    }\r\n  };\r\n} catch (e) /* istanbul ignore next */ {\r\n  module.exports = {\r\n    isValidStatusCode,\r\n    isValidUTF8: _isValidUTF8\r\n  };\r\n}\r\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\r\n\r\n\r\n\r\nconst net = require('net');\r\nconst tls = require('tls');\r\nconst { randomFillSync } = require('crypto');\r\n\r\nconst PerMessageDeflate = require('./permessage-deflate');\r\nconst { EMPTY_BUFFER } = require('./constants');\r\nconst { isValidStatusCode } = require('./validation');\r\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\r\n\r\nconst mask = Buffer.alloc(4);\r\n\r\n/**\r\n * HyBi Sender implementation.\r\n */\r\nclass Sender {\r\n  /**\r\n   * Creates a Sender instance.\r\n   *\r\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\r\n   * @param {Object} [extensions] An object containing the negotiated extensions\r\n   */\r\n  constructor(socket, extensions) {\r\n    this._extensions = extensions || {};\r\n    this._socket = socket;\r\n\r\n    this._firstFragment = true;\r\n    this._compress = false;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._deflating = false;\r\n    this._queue = [];\r\n  }\r\n\r\n  /**\r\n   * Frames a piece of data according to the HyBi WebSocket protocol.\r\n   *\r\n   * @param {Buffer} data The data to frame\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\r\n   * @public\r\n   */\r\n  static frame(data, options) {\r\n    const merge = options.mask && options.readOnly;\r\n    let offset = options.mask ? 6 : 2;\r\n    let payloadLength = data.length;\r\n\r\n    if (data.length >= 65536) {\r\n      offset += 8;\r\n      payloadLength = 127;\r\n    } else if (data.length > 125) {\r\n      offset += 2;\r\n      payloadLength = 126;\r\n    }\r\n\r\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\r\n\r\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\r\n    if (options.rsv1) target[0] |= 0x40;\r\n\r\n    target[1] = payloadLength;\r\n\r\n    if (payloadLength === 126) {\r\n      target.writeUInt16BE(data.length, 2);\r\n    } else if (payloadLength === 127) {\r\n      target.writeUInt32BE(0, 2);\r\n      target.writeUInt32BE(data.length, 6);\r\n    }\r\n\r\n    if (!options.mask) return [target, data];\r\n\r\n    randomFillSync(mask, 0, 4);\r\n\r\n    target[1] |= 0x80;\r\n    target[offset - 4] = mask[0];\r\n    target[offset - 3] = mask[1];\r\n    target[offset - 2] = mask[2];\r\n    target[offset - 1] = mask[3];\r\n\r\n    if (merge) {\r\n      applyMask(data, mask, target, offset, data.length);\r\n      return [target];\r\n    }\r\n\r\n    applyMask(data, mask, data, 0, data.length);\r\n    return [target, data];\r\n  }\r\n\r\n  /**\r\n   * Sends a close message to the other peer.\r\n   *\r\n   * @param {Number} [code] The status code component of the body\r\n   * @param {String} [data] The message component of the body\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  close(code, data, mask, cb) {\r\n    let buf;\r\n\r\n    if (code === undefined) {\r\n      buf = EMPTY_BUFFER;\r\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\r\n      throw new TypeError('First argument must be a valid error code number');\r\n    } else if (data === undefined || data === '') {\r\n      buf = Buffer.allocUnsafe(2);\r\n      buf.writeUInt16BE(code, 0);\r\n    } else {\r\n      const length = Buffer.byteLength(data);\r\n\r\n      if (length > 123) {\r\n        throw new RangeError('The message must not be greater than 123 bytes');\r\n      }\r\n\r\n      buf = Buffer.allocUnsafe(2 + length);\r\n      buf.writeUInt16BE(code, 0);\r\n      buf.write(data, 2);\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doClose, buf, mask, cb]);\r\n    } else {\r\n      this.doClose(buf, mask, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a close message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  doClose(data, mask, cb) {\r\n    this.sendFrame(\r\n      Sender.frame(data, {\r\n        fin: true,\r\n        rsv1: false,\r\n        opcode: 0x08,\r\n        mask,\r\n        readOnly: false\r\n      }),\r\n      cb\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends a ping message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    const buf = toBuffer(data);\r\n\r\n    if (buf.length > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\r\n    } else {\r\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a ping message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  doPing(data, mask, readOnly, cb) {\r\n    this.sendFrame(\r\n      Sender.frame(data, {\r\n        fin: true,\r\n        rsv1: false,\r\n        opcode: 0x09,\r\n        mask,\r\n        readOnly\r\n      }),\r\n      cb\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends a pong message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    const buf = toBuffer(data);\r\n\r\n    if (buf.length > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\r\n    } else {\r\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Frames and sends a pong message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  doPong(data, mask, readOnly, cb) {\r\n    this.sendFrame(\r\n      Sender.frame(data, {\r\n        fin: true,\r\n        rsv1: false,\r\n        opcode: 0x0a,\r\n        mask,\r\n        readOnly\r\n      }),\r\n      cb\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sends a data message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\r\n   *     compress `data`\r\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\r\n   *     or text\r\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    const buf = toBuffer(data);\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n    let opcode = options.binary ? 2 : 1;\r\n    let rsv1 = options.compress;\r\n\r\n    if (this._firstFragment) {\r\n      this._firstFragment = false;\r\n      if (rsv1 && perMessageDeflate) {\r\n        rsv1 = buf.length >= perMessageDeflate._threshold;\r\n      }\r\n      this._compress = rsv1;\r\n    } else {\r\n      rsv1 = false;\r\n      opcode = 0;\r\n    }\r\n\r\n    if (options.fin) this._firstFragment = true;\r\n\r\n    if (perMessageDeflate) {\r\n      const opts = {\r\n        fin: options.fin,\r\n        rsv1,\r\n        opcode,\r\n        mask: options.mask,\r\n        readOnly: toBuffer.readOnly\r\n      };\r\n\r\n      if (this._deflating) {\r\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\r\n      } else {\r\n        this.dispatch(buf, this._compress, opts, cb);\r\n      }\r\n    } else {\r\n      this.sendFrame(\r\n        Sender.frame(buf, {\r\n          fin: options.fin,\r\n          rsv1: false,\r\n          opcode,\r\n          mask: options.mask,\r\n          readOnly: toBuffer.readOnly\r\n        }),\r\n        cb\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches a data message.\r\n   *\r\n   * @param {Buffer} data The message to send\r\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Object} options Options object\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  dispatch(data, compress, options, cb) {\r\n    if (!compress) {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n      return;\r\n    }\r\n\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    this._bufferedBytes += data.length;\r\n    this._deflating = true;\r\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\r\n      if (this._socket.destroyed) {\r\n        const err = new Error(\r\n          'The socket was closed while data was being compressed'\r\n        );\r\n\r\n        if (typeof cb === 'function') cb(err);\r\n\r\n        for (let i = 0; i < this._queue.length; i++) {\r\n          const callback = this._queue[i][4];\r\n\r\n          if (typeof callback === 'function') callback(err);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      this._bufferedBytes -= data.length;\r\n      this._deflating = false;\r\n      options.readOnly = false;\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n      this.dequeue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes queued send operations.\r\n   *\r\n   * @private\r\n   */\r\n  dequeue() {\r\n    while (!this._deflating && this._queue.length) {\r\n      const params = this._queue.shift();\r\n\r\n      this._bufferedBytes -= params[1].length;\r\n      Reflect.apply(params[0], this, params.slice(1));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enqueues a send operation.\r\n   *\r\n   * @param {Array} params Send operation parameters.\r\n   * @private\r\n   */\r\n  enqueue(params) {\r\n    this._bufferedBytes += params[1].length;\r\n    this._queue.push(params);\r\n  }\r\n\r\n  /**\r\n   * Sends a frame.\r\n   *\r\n   * @param {Buffer[]} list The frame to send\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  sendFrame(list, cb) {\r\n    if (list.length === 2) {\r\n      this._socket.cork();\r\n      this._socket.write(list[0]);\r\n      this._socket.write(list[1], cb);\r\n      this._socket.uncork();\r\n    } else {\r\n      this._socket.write(list[0], cb);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Sender;\r\n","\r\n\r\n/**\r\n * Class representing an event.\r\n *\r\n * @private\r\n */\r\nclass Event {\r\n  /**\r\n   * Create a new `Event`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} target A reference to the target to which the event was\r\n   *     dispatched\r\n   */\r\n  constructor(type, target) {\r\n    this.target = target;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing a message event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass MessageEvent extends Event {\r\n  /**\r\n   * Create a new `MessageEvent`.\r\n   *\r\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\r\n   * @param {WebSocket} target A reference to the target to which the event was\r\n   *     dispatched\r\n   */\r\n  constructor(data, target) {\r\n    super('message', target);\r\n\r\n    this.data = data;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing a close event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass CloseEvent extends Event {\r\n  /**\r\n   * Create a new `CloseEvent`.\r\n   *\r\n   * @param {Number} code The status code explaining why the connection is being\r\n   *     closed\r\n   * @param {String} reason A human-readable string explaining why the\r\n   *     connection is closing\r\n   * @param {WebSocket} target A reference to the target to which the event was\r\n   *     dispatched\r\n   */\r\n  constructor(code, reason, target) {\r\n    super('close', target);\r\n\r\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\r\n    this.reason = reason;\r\n    this.code = code;\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing an open event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass OpenEvent extends Event {\r\n  /**\r\n   * Create a new `OpenEvent`.\r\n   *\r\n   * @param {WebSocket} target A reference to the target to which the event was\r\n   *     dispatched\r\n   */\r\n  constructor(target) {\r\n    super('open', target);\r\n  }\r\n}\r\n\r\n/**\r\n * Class representing an error event.\r\n *\r\n * @extends Event\r\n * @private\r\n */\r\nclass ErrorEvent extends Event {\r\n  /**\r\n   * Create a new `ErrorEvent`.\r\n   *\r\n   * @param {Object} error The error that generated this event\r\n   * @param {WebSocket} target A reference to the target to which the event was\r\n   *     dispatched\r\n   */\r\n  constructor(error, target) {\r\n    super('error', target);\r\n\r\n    this.message = error.message;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n/**\r\n * This provides methods for emulating the `EventTarget` interface. It's not\r\n * meant to be used directly.\r\n *\r\n * @mixin\r\n */\r\nconst EventTarget = {\r\n  /**\r\n   * Register an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to listen for\r\n   * @param {Function} listener The listener to add\r\n   * @param {Object} [options] An options object specifies characteristics about\r\n   *     the event listener\r\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\r\n   *     listener should be invoked at most once after being added. If `true`,\r\n   *     the listener would be automatically removed when invoked.\r\n   * @public\r\n   */\r\n  addEventListener(type, listener, options) {\r\n    if (typeof listener !== 'function') return;\r\n\r\n    function onMessage(data) {\r\n      listener.call(this, new MessageEvent(data, this));\r\n    }\r\n\r\n    function onClose(code, message) {\r\n      listener.call(this, new CloseEvent(code, message, this));\r\n    }\r\n\r\n    function onError(error) {\r\n      listener.call(this, new ErrorEvent(error, this));\r\n    }\r\n\r\n    function onOpen() {\r\n      listener.call(this, new OpenEvent(this));\r\n    }\r\n\r\n    const method = options && options.once ? 'once' : 'on';\r\n\r\n    if (type === 'message') {\r\n      onMessage._listener = listener;\r\n      this[method](type, onMessage);\r\n    } else if (type === 'close') {\r\n      onClose._listener = listener;\r\n      this[method](type, onClose);\r\n    } else if (type === 'error') {\r\n      onError._listener = listener;\r\n      this[method](type, onError);\r\n    } else if (type === 'open') {\r\n      onOpen._listener = listener;\r\n      this[method](type, onOpen);\r\n    } else {\r\n      this[method](type, listener);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to remove\r\n   * @param {Function} listener The listener to remove\r\n   * @public\r\n   */\r\n  removeEventListener(type, listener) {\r\n    const listeners = this.listeners(type);\r\n\r\n    for (let i = 0; i < listeners.length; i++) {\r\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\r\n        this.removeListener(type, listeners[i]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = EventTarget;\r\n","\r\n\r\n//\r\n// Allowed token characters:\r\n//\r\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\r\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\r\n//\r\n// tokenChars[32] === 0 // ' '\r\n// tokenChars[33] === 1 // '!'\r\n// tokenChars[34] === 0 // '\"'\r\n// ...\r\n//\r\n// prettier-ignore\r\nconst tokenChars = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\r\n];\r\n\r\n/**\r\n * Adds an offer to the map of extension offers or a parameter to the map of\r\n * parameters.\r\n *\r\n * @param {Object} dest The map of extension offers or parameters\r\n * @param {String} name The extension or parameter name\r\n * @param {(Object|Boolean|String)} elem The extension parameters or the\r\n *     parameter value\r\n * @private\r\n */\r\nfunction push(dest, name, elem) {\r\n  if (dest[name] === undefined) dest[name] = [elem];\r\n  else dest[name].push(elem);\r\n}\r\n\r\n/**\r\n * Parses the `Sec-WebSocket-Extensions` header into an object.\r\n *\r\n * @param {String} header The field value of the header\r\n * @return {Object} The parsed object\r\n * @public\r\n */\r\nfunction parse(header) {\r\n  const offers = Object.create(null);\r\n\r\n  if (header === undefined || header === '') return offers;\r\n\r\n  let params = Object.create(null);\r\n  let mustUnescape = false;\r\n  let isEscaping = false;\r\n  let inQuotes = false;\r\n  let extensionName;\r\n  let paramName;\r\n  let start = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (; i < header.length; i++) {\r\n    const code = header.charCodeAt(i);\r\n\r\n    if (extensionName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\\t' */) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        const name = header.slice(start, end);\r\n        if (code === 0x2c) {\r\n          push(offers, name, params);\r\n          params = Object.create(null);\r\n        } else {\r\n          extensionName = name;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else if (paramName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (code === 0x20 || code === 0x09) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        push(params, header.slice(start, end), true);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\r\n        paramName = header.slice(start, i);\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else {\r\n      //\r\n      // The value of a quoted-string after unescaping must conform to the\r\n      // token ABNF, so only token characters are valid.\r\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\r\n      //\r\n      if (isEscaping) {\r\n        if (tokenChars[code] !== 1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n        if (start === -1) start = i;\r\n        else if (!mustUnescape) mustUnescape = true;\r\n        isEscaping = false;\r\n      } else if (inQuotes) {\r\n        if (tokenChars[code] === 1) {\r\n          if (start === -1) start = i;\r\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\r\n          inQuotes = false;\r\n          end = i;\r\n        } else if (code === 0x5c /* '\\' */) {\r\n          isEscaping = true;\r\n        } else {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\r\n        inQuotes = true;\r\n      } else if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\r\n        if (end === -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        let value = header.slice(start, end);\r\n        if (mustUnescape) {\r\n          value = value.replace(/\\\\/g, '');\r\n          mustUnescape = false;\r\n        }\r\n        push(params, paramName, value);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        paramName = undefined;\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === -1 || inQuotes) {\r\n    throw new SyntaxError('Unexpected end of input');\r\n  }\r\n\r\n  if (end === -1) end = i;\r\n  const token = header.slice(start, end);\r\n  if (extensionName === undefined) {\r\n    push(offers, token, params);\r\n  } else {\r\n    if (paramName === undefined) {\r\n      push(params, token, true);\r\n    } else if (mustUnescape) {\r\n      push(params, paramName, token.replace(/\\\\/g, ''));\r\n    } else {\r\n      push(params, paramName, token);\r\n    }\r\n    push(offers, extensionName, params);\r\n  }\r\n\r\n  return offers;\r\n}\r\n\r\n/**\r\n * Builds the `Sec-WebSocket-Extensions` header field value.\r\n *\r\n * @param {Object} extensions The map of extensions and parameters to format\r\n * @return {String} A string representing the given object\r\n * @public\r\n */\r\nfunction format(extensions) {\r\n  return Object.keys(extensions)\r\n    .map((extension) => {\r\n      let configurations = extensions[extension];\r\n      if (!Array.isArray(configurations)) configurations = [configurations];\r\n      return configurations\r\n        .map((params) => {\r\n          return [extension]\r\n            .concat(\r\n              Object.keys(params).map((k) => {\r\n                let values = params[k];\r\n                if (!Array.isArray(values)) values = [values];\r\n                return values\r\n                  .map((v) => (v === true ? k : `${k}=${v}`))\r\n                  .join('; ');\r\n              })\r\n            )\r\n            .join('; ');\r\n        })\r\n        .join(', ');\r\n    })\r\n    .join(', ');\r\n}\r\n\r\nmodule.exports = { format, parse };\r\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = require('events');\r\nconst http = require('http');\r\nconst https = require('https');\r\nconst net = require('net');\r\nconst tls = require('tls');\r\nconst { createHash } = require('crypto');\r\n\r\nconst PerMessageDeflate = require('./permessage-deflate');\r\nconst WebSocket = require('./websocket');\r\nconst { format, parse } = require('./extension');\r\nconst { GUID, kWebSocket } = require('./constants');\r\n\r\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\r\n\r\nconst RUNNING = 0;\r\nconst CLOSING = 1;\r\nconst CLOSED = 2;\r\n\r\n/**\r\n * Class representing a WebSocket server.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocketServer extends EventEmitter {\r\n  /**\r\n   * Create a `WebSocketServer` instance.\r\n   *\r\n   * @param {Object} options Configuration options\r\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\r\n   *     pending connections\r\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\r\n   *     track clients\r\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\r\n   * @param {String} [options.host] The hostname where to bind the server\r\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n   *     size\r\n   * @param {Boolean} [options.noServer=false] Enable no server mode\r\n   * @param {String} [options.path] Accept only connections matching this path\r\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\r\n   *     permessage-deflate\r\n   * @param {Number} [options.port] The port where to bind the server\r\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\r\n   *     server to use\r\n   * @param {Function} [options.verifyClient] A hook to reject connections\r\n   * @param {Function} [callback] A listener for the `listening` event\r\n   */\r\n  constructor(options, callback) {\r\n    super();\r\n\r\n    options = {\r\n      maxPayload: 100 * 1024 * 1024,\r\n      perMessageDeflate: false,\r\n      handleProtocols: null,\r\n      clientTracking: true,\r\n      verifyClient: null,\r\n      noServer: false,\r\n      backlog: null, // use default (511 as implemented in net.js)\r\n      server: null,\r\n      host: null,\r\n      path: null,\r\n      port: null,\r\n      ...options\r\n    };\r\n\r\n    if (\r\n      (options.port == null && !options.server && !options.noServer) ||\r\n      (options.port != null && (options.server || options.noServer)) ||\r\n      (options.server && options.noServer)\r\n    ) {\r\n      throw new TypeError(\r\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\r\n          'must be specified'\r\n      );\r\n    }\r\n\r\n    if (options.port != null) {\r\n      this._server = http.createServer((req, res) => {\r\n        const body = http.STATUS_CODES[426];\r\n\r\n        res.writeHead(426, {\r\n          'Content-Length': body.length,\r\n          'Content-Type': 'text/plain'\r\n        });\r\n        res.end(body);\r\n      });\r\n      this._server.listen(\r\n        options.port,\r\n        options.host,\r\n        options.backlog,\r\n        callback\r\n      );\r\n    } else if (options.server) {\r\n      this._server = options.server;\r\n    }\r\n\r\n    if (this._server) {\r\n      const emitConnection = this.emit.bind(this, 'connection');\r\n\r\n      this._removeListeners = addListeners(this._server, {\r\n        listening: this.emit.bind(this, 'listening'),\r\n        error: this.emit.bind(this, 'error'),\r\n        upgrade: (req, socket, head) => {\r\n          this.handleUpgrade(req, socket, head, emitConnection);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\r\n    if (options.clientTracking) this.clients = new Set();\r\n    this.options = options;\r\n    this._state = RUNNING;\r\n  }\r\n\r\n  /**\r\n   * Returns the bound address, the address family name, and port of the server\r\n   * as reported by the operating system if listening on an IP socket.\r\n   * If the server is listening on a pipe or UNIX domain socket, the name is\r\n   * returned as a string.\r\n   *\r\n   * @return {(Object|String|null)} The address of the server\r\n   * @public\r\n   */\r\n  address() {\r\n    if (this.options.noServer) {\r\n      throw new Error('The server is operating in \"noServer\" mode');\r\n    }\r\n\r\n    if (!this._server) return null;\r\n    return this._server.address();\r\n  }\r\n\r\n  /**\r\n   * Close the server.\r\n   *\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  close(cb) {\r\n    if (cb) this.once('close', cb);\r\n\r\n    if (this._state === CLOSED) {\r\n      process.nextTick(emitClose, this);\r\n      return;\r\n    }\r\n\r\n    if (this._state === CLOSING) return;\r\n    this._state = CLOSING;\r\n\r\n    //\r\n    // Terminate all associated clients.\r\n    //\r\n    if (this.clients) {\r\n      for (const client of this.clients) client.terminate();\r\n    }\r\n\r\n    const server = this._server;\r\n\r\n    if (server) {\r\n      this._removeListeners();\r\n      this._removeListeners = this._server = null;\r\n\r\n      //\r\n      // Close the http server if it was internally created.\r\n      //\r\n      if (this.options.port != null) {\r\n        server.close(emitClose.bind(undefined, this));\r\n        return;\r\n      }\r\n    }\r\n\r\n    process.nextTick(emitClose, this);\r\n  }\r\n\r\n  /**\r\n   * See if a given request should be handled by this server instance.\r\n   *\r\n   * @param {http.IncomingMessage} req Request object to inspect\r\n   * @return {Boolean} `true` if the request is valid, else `false`\r\n   * @public\r\n   */\r\n  shouldHandle(req) {\r\n    if (this.options.path) {\r\n      const index = req.url.indexOf('?');\r\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\r\n\r\n      if (pathname !== this.options.path) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle a HTTP Upgrade request.\r\n   *\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\r\n   *     server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  handleUpgrade(req, socket, head, cb) {\r\n    socket.on('error', socketOnError);\r\n\r\n    const key =\r\n      req.headers['sec-websocket-key'] !== undefined\r\n        ? req.headers['sec-websocket-key'].trim()\r\n        : false;\r\n    const upgrade = req.headers.upgrade;\r\n    const version = +req.headers['sec-websocket-version'];\r\n    const extensions = {};\r\n\r\n    if (\r\n      req.method !== 'GET' ||\r\n      upgrade === undefined ||\r\n      upgrade.toLowerCase() !== 'websocket' ||\r\n      !key ||\r\n      !keyRegex.test(key) ||\r\n      (version !== 8 && version !== 13) ||\r\n      !this.shouldHandle(req)\r\n    ) {\r\n      return abortHandshake(socket, 400);\r\n    }\r\n\r\n    if (this.options.perMessageDeflate) {\r\n      const perMessageDeflate = new PerMessageDeflate(\r\n        this.options.perMessageDeflate,\r\n        true,\r\n        this.options.maxPayload\r\n      );\r\n\r\n      try {\r\n        const offers = parse(req.headers['sec-websocket-extensions']);\r\n\r\n        if (offers[PerMessageDeflate.extensionName]) {\r\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\r\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\r\n        }\r\n      } catch (err) {\r\n        return abortHandshake(socket, 400);\r\n      }\r\n    }\r\n\r\n    //\r\n    // Optionally call external client verification handler.\r\n    //\r\n    if (this.options.verifyClient) {\r\n      const info = {\r\n        origin:\r\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\r\n        secure: !!(req.socket.authorized || req.socket.encrypted),\r\n        req\r\n      };\r\n\r\n      if (this.options.verifyClient.length === 2) {\r\n        this.options.verifyClient(info, (verified, code, message, headers) => {\r\n          if (!verified) {\r\n            return abortHandshake(socket, code || 401, message, headers);\r\n          }\r\n\r\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\r\n    }\r\n\r\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\r\n  }\r\n\r\n  /**\r\n   * Upgrade the connection to WebSocket.\r\n   *\r\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\r\n   * @param {Object} extensions The accepted extensions\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\r\n   *     server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @throws {Error} If called more than once with the same socket\r\n   * @private\r\n   */\r\n  completeUpgrade(key, extensions, req, socket, head, cb) {\r\n    //\r\n    // Destroy the socket if the client has already sent a FIN packet.\r\n    //\r\n    if (!socket.readable || !socket.writable) return socket.destroy();\r\n\r\n    if (socket[kWebSocket]) {\r\n      throw new Error(\r\n        'server.handleUpgrade() was called more than once with the same ' +\r\n          'socket, possibly due to a misconfiguration'\r\n      );\r\n    }\r\n\r\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    const headers = [\r\n      'HTTP/1.1 101 Switching Protocols',\r\n      'Upgrade: websocket',\r\n      'Connection: Upgrade',\r\n      `Sec-WebSocket-Accept: ${digest}`\r\n    ];\r\n\r\n    const ws = new WebSocket(null);\r\n    let protocol = req.headers['sec-websocket-protocol'];\r\n\r\n    if (protocol) {\r\n      protocol = protocol.split(',').map(trim);\r\n\r\n      //\r\n      // Optionally call external protocol selection handler.\r\n      //\r\n      if (this.options.handleProtocols) {\r\n        protocol = this.options.handleProtocols(protocol, req);\r\n      } else {\r\n        protocol = protocol[0];\r\n      }\r\n\r\n      if (protocol) {\r\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\r\n        ws._protocol = protocol;\r\n      }\r\n    }\r\n\r\n    if (extensions[PerMessageDeflate.extensionName]) {\r\n      const params = extensions[PerMessageDeflate.extensionName].params;\r\n      const value = format({\r\n        [PerMessageDeflate.extensionName]: [params]\r\n      });\r\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\r\n      ws._extensions = extensions;\r\n    }\r\n\r\n    //\r\n    // Allow external modification/inspection of handshake headers.\r\n    //\r\n    this.emit('headers', headers, req);\r\n\r\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\r\n    socket.removeListener('error', socketOnError);\r\n\r\n    ws.setSocket(socket, head, this.options.maxPayload);\r\n\r\n    if (this.clients) {\r\n      this.clients.add(ws);\r\n      ws.on('close', () => this.clients.delete(ws));\r\n    }\r\n\r\n    cb(ws, req);\r\n  }\r\n}\r\n\r\nmodule.exports = WebSocketServer;\r\n\r\n/**\r\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\r\n * pairs.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @param {Object.<String, Function>} map The listeners to add\r\n * @return {Function} A function that will remove the added listeners when\r\n *     called\r\n * @private\r\n */\r\nfunction addListeners(server, map) {\r\n  for (const event of Object.keys(map)) server.on(event, map[event]);\r\n\r\n  return function removeListeners() {\r\n    for (const event of Object.keys(map)) {\r\n      server.removeListener(event, map[event]);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Emit a `'close'` event on an `EventEmitter`.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @private\r\n */\r\nfunction emitClose(server) {\r\n  server._state = CLOSED;\r\n  server.emit('close');\r\n}\r\n\r\n/**\r\n * Handle premature socket errors.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  this.destroy();\r\n}\r\n\r\n/**\r\n * Close the connection when preconditions are not fulfilled.\r\n *\r\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\r\n * @param {Number} code The HTTP response status code\r\n * @param {String} [message] The HTTP response body\r\n * @param {Object} [headers] Additional HTTP response headers\r\n * @private\r\n */\r\nfunction abortHandshake(socket, code, message, headers) {\r\n  if (socket.writable) {\r\n    message = message || http.STATUS_CODES[code];\r\n    headers = {\r\n      Connection: 'close',\r\n      'Content-Type': 'text/html',\r\n      'Content-Length': Buffer.byteLength(message),\r\n      ...headers\r\n    };\r\n\r\n    socket.write(\r\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\r\n        Object.keys(headers)\r\n          .map((h) => `${h}: ${headers[h]}`)\r\n          .join('\\r\\n') +\r\n        '\\r\\n\\r\\n' +\r\n        message\r\n    );\r\n  }\r\n\r\n  socket.removeListener('error', socketOnError);\r\n  socket.destroy();\r\n}\r\n\r\n/**\r\n * Remove whitespace characters from both ends of a string.\r\n *\r\n * @param {String} str The string\r\n * @return {String} A new string representing `str` stripped of whitespace\r\n *     characters from both its beginning and end\r\n * @private\r\n */\r\nfunction trim(str) {\r\n  return str.trim();\r\n}\r\n"]}
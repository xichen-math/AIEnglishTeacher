{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\nvar callBound = require('call-bound');\r\nvar inspect = require('object-inspect');\r\n\r\nvar $TypeError = require('es-errors/type');\r\nvar $Map = GetIntrinsic('%Map%', true);\r\n\r\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\r\nvar $mapGet = callBound('Map.prototype.get', true);\r\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\r\nvar $mapSet = callBound('Map.prototype.set', true);\r\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\r\nvar $mapHas = callBound('Map.prototype.has', true);\r\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\r\nvar $mapDelete = callBound('Map.prototype.delete', true);\r\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\r\nvar $mapSize = callBound('Map.prototype.size', true);\r\n\r\n/** @type {import('.')} */\r\nmodule.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\r\n\t/** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\r\n\t/** @typedef {Parameters<Channel['get']>[0]} K */\r\n\t/** @typedef {Parameters<Channel['set']>[1]} V */\r\n\r\n\t/** @type {Map<K, V> | undefined} */ var $m;\r\n\r\n\t/** @type {Channel} */\r\n\tvar channel = {\r\n\t\tassert: function (key) {\r\n\t\t\tif (!channel.has(key)) {\r\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\r\n\t\t\t}\r\n\t\t},\r\n\t\t'delete': function (key) {\r\n\t\t\tif ($m) {\r\n\t\t\t\tvar result = $mapDelete($m, key);\r\n\t\t\t\tif ($mapSize($m) === 0) {\r\n\t\t\t\t\t$m = void undefined;\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tget: function (key) { // eslint-disable-line consistent-return\r\n\t\t\tif ($m) {\r\n\t\t\t\treturn $mapGet($m, key);\r\n\t\t\t}\r\n\t\t},\r\n\t\thas: function (key) {\r\n\t\t\tif ($m) {\r\n\t\t\t\treturn $mapHas($m, key);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tset: function (key, value) {\r\n\t\t\tif (!$m) {\r\n\t\t\t\t// @ts-expect-error TS can't handle narrowing a variable inside a closure\r\n\t\t\t\t$m = new $Map();\r\n\t\t\t}\r\n\t\t\t$mapSet($m, key, value);\r\n\t\t}\r\n\t};\r\n\r\n\t// @ts-expect-error TODO: figure out why TS is erroring here\r\n\treturn channel;\r\n};\r\n"]}
{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/* eslint-disable node/no-deprecated-api */\r\n\r\nvar toString = Object.prototype.toString\r\n\r\nvar isModern = (\r\n  typeof Buffer !== 'undefined' &&\r\n  typeof Buffer.alloc === 'function' &&\r\n  typeof Buffer.allocUnsafe === 'function' &&\r\n  typeof Buffer.from === 'function'\r\n)\r\n\r\nfunction isArrayBuffer (input) {\r\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer'\r\n}\r\n\r\nfunction fromArrayBuffer (obj, byteOffset, length) {\r\n  byteOffset >>>= 0\r\n\r\n  var maxLength = obj.byteLength - byteOffset\r\n\r\n  if (maxLength < 0) {\r\n    throw new RangeError(\"'offset' is out of bounds\")\r\n  }\r\n\r\n  if (length === undefined) {\r\n    length = maxLength\r\n  } else {\r\n    length >>>= 0\r\n\r\n    if (length > maxLength) {\r\n      throw new RangeError(\"'length' is out of bounds\")\r\n    }\r\n  }\r\n\r\n  return isModern\r\n    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))\r\n    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))\r\n}\r\n\r\nfunction fromString (string, encoding) {\r\n  if (typeof encoding !== 'string' || encoding === '') {\r\n    encoding = 'utf8'\r\n  }\r\n\r\n  if (!Buffer.isEncoding(encoding)) {\r\n    throw new TypeError('\"encoding\" must be a valid string encoding')\r\n  }\r\n\r\n  return isModern\r\n    ? Buffer.from(string, encoding)\r\n    : new Buffer(string, encoding)\r\n}\r\n\r\nfunction bufferFrom (value, encodingOrOffset, length) {\r\n  if (typeof value === 'number') {\r\n    throw new TypeError('\"value\" argument must not be a number')\r\n  }\r\n\r\n  if (isArrayBuffer(value)) {\r\n    return fromArrayBuffer(value, encodingOrOffset, length)\r\n  }\r\n\r\n  if (typeof value === 'string') {\r\n    return fromString(value, encodingOrOffset)\r\n  }\r\n\r\n  return isModern\r\n    ? Buffer.from(value)\r\n    : new Buffer(value)\r\n}\r\n\r\nmodule.exports = bufferFrom\r\n"]}
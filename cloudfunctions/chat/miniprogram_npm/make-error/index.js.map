{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["// ISC @ Julien Fontanet\r\n\r\n\r\n\r\n// ===================================================================\r\n\r\nvar construct = typeof Reflect !== \"undefined\" ? Reflect.construct : undefined;\r\nvar defineProperty = Object.defineProperty;\r\n\r\n// -------------------------------------------------------------------\r\n\r\nvar captureStackTrace = Error.captureStackTrace;\r\nif (captureStackTrace === undefined) {\r\n  captureStackTrace = function captureStackTrace(error) {\r\n    var container = new Error();\r\n\r\n    defineProperty(error, \"stack\", {\r\n      configurable: true,\r\n      get: function getStack() {\r\n        var stack = container.stack;\r\n\r\n        // Replace property with value for faster future accesses.\r\n        defineProperty(this, \"stack\", {\r\n          configurable: true,\r\n          value: stack,\r\n          writable: true,\r\n        });\r\n\r\n        return stack;\r\n      },\r\n      set: function setStack(stack) {\r\n        defineProperty(error, \"stack\", {\r\n          configurable: true,\r\n          value: stack,\r\n          writable: true,\r\n        });\r\n      },\r\n    });\r\n  };\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nfunction BaseError(message) {\r\n  if (message !== undefined) {\r\n    defineProperty(this, \"message\", {\r\n      configurable: true,\r\n      value: message,\r\n      writable: true,\r\n    });\r\n  }\r\n\r\n  var cname = this.constructor.name;\r\n  if (cname !== undefined && cname !== this.name) {\r\n    defineProperty(this, \"name\", {\r\n      configurable: true,\r\n      value: cname,\r\n      writable: true,\r\n    });\r\n  }\r\n\r\n  captureStackTrace(this, this.constructor);\r\n}\r\n\r\nBaseError.prototype = Object.create(Error.prototype, {\r\n  // See: https://github.com/JsCommunity/make-error/issues/4\r\n  constructor: {\r\n    configurable: true,\r\n    value: BaseError,\r\n    writable: true,\r\n  },\r\n});\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// Sets the name of a function if possible (depends of the JS engine).\r\nvar setFunctionName = (function() {\r\n  function setFunctionName(fn, name) {\r\n    return defineProperty(fn, \"name\", {\r\n      configurable: true,\r\n      value: name,\r\n    });\r\n  }\r\n  try {\r\n    var f = function() {};\r\n    setFunctionName(f, \"foo\");\r\n    if (f.name === \"foo\") {\r\n      return setFunctionName;\r\n    }\r\n  } catch (_) {}\r\n})();\r\n\r\n// -------------------------------------------------------------------\r\n\r\nfunction makeError(constructor, super_) {\r\n  if (super_ == null || super_ === Error) {\r\n    super_ = BaseError;\r\n  } else if (typeof super_ !== \"function\") {\r\n    throw new TypeError(\"super_ should be a function\");\r\n  }\r\n\r\n  var name;\r\n  if (typeof constructor === \"string\") {\r\n    name = constructor;\r\n    constructor =\r\n      construct !== undefined\r\n        ? function() {\r\n            return construct(super_, arguments, this.constructor);\r\n          }\r\n        : function() {\r\n            super_.apply(this, arguments);\r\n          };\r\n\r\n    // If the name can be set, do it once and for all.\r\n    if (setFunctionName !== undefined) {\r\n      setFunctionName(constructor, name);\r\n      name = undefined;\r\n    }\r\n  } else if (typeof constructor !== \"function\") {\r\n    throw new TypeError(\"constructor should be either a string or a function\");\r\n  }\r\n\r\n  // Also register the super constructor also as `constructor.super_` just\r\n  // like Node's `util.inherits()`.\r\n  //\r\n  // eslint-disable-next-line dot-notation\r\n  constructor.super_ = constructor[\"super\"] = super_;\r\n\r\n  var properties = {\r\n    constructor: {\r\n      configurable: true,\r\n      value: constructor,\r\n      writable: true,\r\n    },\r\n  };\r\n\r\n  // If the name could not be set on the constructor, set it on the\r\n  // prototype.\r\n  if (name !== undefined) {\r\n    properties.name = {\r\n      configurable: true,\r\n      value: name,\r\n      writable: true,\r\n    };\r\n  }\r\n  constructor.prototype = Object.create(super_.prototype, properties);\r\n\r\n  return constructor;\r\n}\r\nexports = module.exports = makeError;\r\nexports.BaseError = BaseError;\r\n"]}
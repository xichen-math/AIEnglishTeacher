{"version":3,"sources":["index.js","createScheduler.js","createJob.js","utils/getId.js","utils/log.js","createWorker.js","utils/resolvePaths.js","utils/getEnvironment.js","utils/circularize.js","constants/config.js","constants/OEM.js","worker/node/index.js","worker/node/defaultOptions.js","constants/defaultOptions.js","worker/node/spawnWorker.js","worker/node/terminateWorker.js","worker/node/onMessage.js","worker/node/send.js","worker/node/loadImage.js","Tesseract.js","constants/languages.js","constants/PSM.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA,AGTA;ADIA,ADGA,ADGA,AGTA;ADIA,ADGA,ADGA,AGTA;ADIA,ADGA,ADGA,AGTA,ACHA;AFOA,ADGA,ADGA,AIZA;AFOA,ADGA,ADGA,AIZA;AFOA,ADGA,AIZA,ALeA,AIZA;AFOA,ADGA,AIZA,ALeA,AIZA;AFOA,ADGA,AIZA,ALeA,AIZA;AFOA,ADGA,AIZA,ALeA,AIZA,AENA;AJaA,ADGA,AIZA,ALeA,AIZA,AENA;AJaA,ADGA,AIZA,ALeA,AIZA,AENA;AJaA,ADGA,AIZA,ALeA,AOrBA,AHSA,AENA;AJaA,ADGA,AIZA,ALeA,AOrBA,ADGA;AJaA,ADGA,AIZA,ALeA,AOrBA,ADGA;AJaA,ADGA,AIZA,ALeA,AQxBA,ADGA,ADGA;AJaA,ADGA,AIZA,ALeA,AQxBA,ADGA,ADGA;AJaA,ADGA,AIZA,ALeA,AQxBA,ADGA,ADGA;AGRA,APqBA,ADGA,AIZA,ALeA,AQxBA,ADGA,ADGA;AGRA,ARwBA,AIZA,AGTA,ADGA,ADGA;AGRA,ARwBA,AIZA,AGTA,ADGA,ADGA;AIXA,ADGA,ARwBA,AIZA,AGTA,ADGA,ADGA;AIXA,ADGA,ARwBA,AIZA,AGTA,ADGA,ADGA;AIXA,ADGA,ARwBA,AIZA,AGTA,ADGA;AGRA,AT2BA,AIZA,AGTA,ADGA,AIZA;ADIA,AT2BA,AIZA,AGTA,ADGA,AIZA;ADIA,AT2BA,AIZA,AGTA,ADGA,AIZA;ADIA,AT2BA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AT2BA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AT2BA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AGTA,AZoCA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AGTA,AZoCA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AGTA,AZoCA,AIZA,AGTA,ADGA,AKfA,ADGA;ADIA,AGTA,AZoCA,AIZA,AGTA,ADGA,AKfA,ADGA,AGTA;ADIA,AZoCA,AIZA,AGTA,AIZA,ADGA,AGTA;ADIA,AZoCA,AIZA,AGTA,AIZA,ADGA,AGTA;ADIA,AZoCA,AIZA,AGTA,AIZA,ADGA,AGTA,ACHA;AFOA,AZoCA,AIZA,AGTA,AIZA,ADGA,AGTA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AGTA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AKfA,AFMA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AKfA,AFMA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AKfA,AFMA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AKfA,ACHA,AHSA,ACHA;AFOA,AZoCA,AIZA,AGTA,AGTA,AMlBA,AHSA,ACHA;Ad2CA,AIZA,AGTA,AGTA,AMlBA,AFMA;Ad2CA,AIZA,AGTA,AGTA,AOrBA,ADGA,AFMA;Ad2CA,AIZA,AGTA,AGTA,AOrBA,ADGA,AFMA;Ad2CA,AIZA,AGTA,AGTA,AOrBA,ADGA;AELA,AlBsDA,AIZA,AGTA,AGTA,AOrBA,ADGA;AELA,AlBsDA,AIZA,AGTA,AU9BA,ADGA;AELA,AlBsDA,AIZA,AGTA,AU9BA,ADGA;AELA,ACHA,AnByDA,AIZA,AGTA,AU9BA,ADGA;AELA,ACHA,AnByDA,AIZA,AGTA,AU9BA,ADGA;AELA,ACHA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AGTA,AU9BA;ACFA,AENA,ADGA,AnByDA,AIZA,AavCA;ACFA,AENA,ADGA,AnByDA,AIZA,AavCA;ACFA,ACHA,AnByDA,AIZA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA,AavCA;AELA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA,Af6CA;Ae5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\n *\n * Entry point for tesseract.js, should be the entry when bundling.\n *\n * @fileoverview entry point for tesseract.js\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nrequire('regenerator-runtime/runtime');\nconst createScheduler = require('./createScheduler');\nconst createWorker = require('./createWorker');\nconst Tesseract = require('./Tesseract');\nconst languages = require('./constants/languages');\nconst OEM = require('./constants/OEM');\nconst PSM = require('./constants/PSM');\nconst { setLogging } = require('./utils/log');\n\nmodule.exports = {\n  languages,\n  OEM,\n  PSM,\n  createScheduler,\n  createWorker,\n  setLogging,\n  ...Tesseract,\n};\n","const createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\n\nlet schedulerCounter = 0;\n\nmodule.exports = () => {\n  const id = getId('Scheduler', schedulerCounter);\n  const workers = {};\n  const runningWorkers = {};\n  let jobQueue = [];\n\n  schedulerCounter += 1;\n\n  const getQueueLen = () => jobQueue.length;\n  const getNumWorkers = () => Object.keys(workers).length;\n\n  const dequeue = () => {\n    if (jobQueue.length !== 0) {\n      const wIds = Object.keys(workers);\n      for (let i = 0; i < wIds.length; i += 1) {\n        if (typeof runningWorkers[wIds[i]] === 'undefined') {\n          jobQueue[0](workers[wIds[i]]);\n          break;\n        }\n      }\n    }\n  };\n\n  const queue = (action, payload) => (\n    new Promise((resolve, reject) => {\n      const job = createJob({ action, payload });\n      jobQueue.push(async (w) => {\n        jobQueue.shift();\n        runningWorkers[w.id] = job;\n        try {\n          resolve(await w[action].apply(this, [...payload, job.id]));\n        } catch (err) {\n          reject(err);\n        } finally {\n          delete runningWorkers[w.id];\n          dequeue();\n        }\n      });\n      log(`[${id}]: Add ${job.id} to JobQueue`);\n      log(`[${id}]: JobQueue length=${jobQueue.length}`);\n      dequeue();\n    })\n  );\n\n  const addWorker = (w) => {\n    workers[w.id] = w;\n    log(`[${id}]: Add ${w.id}`);\n    log(`[${id}]: Number of workers=${getNumWorkers()}`);\n    dequeue();\n    return w.id;\n  };\n\n  const addJob = async (action, ...payload) => {\n    if (getNumWorkers() === 0) {\n      throw Error(`[${id}]: You need to have at least one worker before adding jobs`);\n    }\n    return queue(action, payload);\n  };\n\n  const terminate = async () => {\n    Object.keys(workers).forEach(async (wid) => {\n      await workers[wid].terminate();\n    });\n    jobQueue = [];\n  };\n\n  return {\n    addWorker,\n    addJob,\n    terminate,\n    getQueueLen,\n    getNumWorkers,\n  };\n};\n","const getId = require('./utils/getId');\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n","module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n","let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n","const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem, config },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal().then(() => workerResResolve(resolveObj)).catch(() => {});\n\n  return workerRes;\n};\n","const isBrowser = require('./getEnvironment')('type') === 'browser';\n\nconst resolveURL = isBrowser ? s => (new URL(s, window.location.href)).href : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath', 'langPath'].forEach((key) => {\n    if (options[key]) {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n","const isElectron = require('is-electron');\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (typeof WorkerGlobalScope !== 'undefined') {\n    env.type = 'webworker';\n  } else if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof document === 'object') {\n    env.type = 'browser';\n  } else if (typeof process === 'object' && typeof require === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n","/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n","const OEM = require('./OEM');\n\nmodule.exports = {\n  defaultOEM: OEM.DEFAULT,\n};\n","/*\n * OEM = OCR Engine Mode, and there are 4 possible modes.\n *\n * By default tesseract.js uses LSTM_ONLY mode.\n *\n */\nmodule.exports = {\n  TESSERACT_ONLY: 0,\n  LSTM_ONLY: 1,\n  TESSERACT_LSTM_COMBINED: 2,\n  DEFAULT: 3,\n};\n","/**\n *\n * Tesseract Worker impl. for node (using child_process)\n *\n * @fileoverview Tesseract Worker impl. for node\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = require('./defaultOptions');\nconst spawnWorker = require('./spawnWorker');\nconst terminateWorker = require('./terminateWorker');\nconst onMessage = require('./onMessage');\nconst send = require('./send');\nconst loadImage = require('./loadImage');\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  send,\n  loadImage,\n};\n","const path = require('path');\nconst defaultOptions = require('../../constants/defaultOptions');\n\n/*\n * Default options for node worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: path.join(__dirname, '..', '..', 'worker-script', 'node', 'index.js'),\n};\n","module.exports = {\n  /*\n   * default path for downloading *.traineddata\n   */\n  langPath: 'https://tessdata.projectnaptha.com/4.0.0',\n  /*\n   * Use BlobURL for worker script by default\n   * TODO: remove this option\n   *\n   */\n  workerBlobURL: true,\n  logger: () => {},\n};\n","const { Worker } = require('worker_threads');\n\n/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function fork a new process in node\n * @access public\n */\nmodule.exports = ({ workerPath }) => new Worker(workerPath);\n","/**\n * terminateWorker\n *\n * @name terminateWorker\n * @function kill worker\n * @access public\n */\nmodule.exports = (worker) => {\n  worker.terminate();\n};\n","module.exports = (worker, handler) => {\n  worker.on('message', handler);\n};\n","/**\n * send\n *\n * @name send\n * @function send packet to worker and create a job\n * @access public\n */\nmodule.exports = async (worker, packet) => {\n  worker.postMessage(packet);\n};\n","const util = require('util');\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst isURL = require('is-url');\n\nconst readFile = util.promisify(fs.readFile);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access public\n */\nmodule.exports = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return image;\n  }\n\n  if (typeof image === 'string') {\n    if (isURL(image) || image.startsWith('moz-extension://') || image.startsWith('chrome-extension://') || image.startsWith('file://')) {\n      const resp = await fetch(image);\n      data = await resp.arrayBuffer();\n    } else if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = Buffer.from(image.split(',')[1], 'base64');\n    } else {\n      data = await readFile(image);\n    }\n  } else if (Buffer.isBuffer(image)) {\n    data = image;\n  }\n\n  return new Uint8Array(data);\n};\n","const createWorker = require('./createWorker');\n\nconst recognize = async (image, langs, options) => {\n  const worker = await createWorker(options);\n  await worker.loadLanguage(langs);\n  await worker.initialize(langs);\n  return worker.recognize(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nconst detect = async (image, options) => {\n  const worker = await createWorker(options);\n  await worker.loadLanguage('osd');\n  await worker.initialize('osd');\n  return worker.detect(image)\n    .finally(async () => {\n      await worker.terminate();\n    });\n};\n\nmodule.exports = {\n  recognize,\n  detect,\n};\n","/*\n * languages with existing tesseract traineddata\n * https://tesseract-ocr.github.io/tessdoc/Data-Files#data-files-for-version-400-november-29-2016\n */\n\n/**\n * @typedef {object} Languages\n * @property {string} AFR Afrikaans\n * @property {string} AMH Amharic\n * @property {string} ARA Arabic\n * @property {string} ASM Assamese\n * @property {string} AZE Azerbaijani\n * @property {string} AZE_CYRL Azerbaijani - Cyrillic\n * @property {string} BEL Belarusian\n * @property {string} BEN Bengali\n * @property {string} BOD Tibetan\n * @property {string} BOS Bosnian\n * @property {string} BUL Bulgarian\n * @property {string} CAT Catalan; Valencian\n * @property {string} CEB Cebuano\n * @property {string} CES Czech\n * @property {string} CHI_SIM Chinese - Simplified\n * @property {string} CHI_TRA Chinese - Traditional\n * @property {string} CHR Cherokee\n * @property {string} CYM Welsh\n * @property {string} DAN Danish\n * @property {string} DEU German\n * @property {string} DZO Dzongkha\n * @property {string} ELL Greek, Modern (1453-)\n * @property {string} ENG English\n * @property {string} ENM English, Middle (1100-1500)\n * @property {string} EPO Esperanto\n * @property {string} EST Estonian\n * @property {string} EUS Basque\n * @property {string} FAS Persian\n * @property {string} FIN Finnish\n * @property {string} FRA French\n * @property {string} FRK German Fraktur\n * @property {string} FRM French, Middle (ca. 1400-1600)\n * @property {string} GLE Irish\n * @property {string} GLG Galician\n * @property {string} GRC Greek, Ancient (-1453)\n * @property {string} GUJ Gujarati\n * @property {string} HAT Haitian; Haitian Creole\n * @property {string} HEB Hebrew\n * @property {string} HIN Hindi\n * @property {string} HRV Croatian\n * @property {string} HUN Hungarian\n * @property {string} IKU Inuktitut\n * @property {string} IND Indonesian\n * @property {string} ISL Icelandic\n * @property {string} ITA Italian\n * @property {string} ITA_OLD Italian - Old\n * @property {string} JAV Javanese\n * @property {string} JPN Japanese\n * @property {string} KAN Kannada\n * @property {string} KAT Georgian\n * @property {string} KAT_OLD Georgian - Old\n * @property {string} KAZ Kazakh\n * @property {string} KHM Central Khmer\n * @property {string} KIR Kirghiz; Kyrgyz\n * @property {string} KOR Korean\n * @property {string} KUR Kurdish\n * @property {string} LAO Lao\n * @property {string} LAT Latin\n * @property {string} LAV Latvian\n * @property {string} LIT Lithuanian\n * @property {string} MAL Malayalam\n * @property {string} MAR Marathi\n * @property {string} MKD Macedonian\n * @property {string} MLT Maltese\n * @property {string} MSA Malay\n * @property {string} MYA Burmese\n * @property {string} NEP Nepali\n * @property {string} NLD Dutch; Flemish\n * @property {string} NOR Norwegian\n * @property {string} ORI Oriya\n * @property {string} PAN Panjabi; Punjabi\n * @property {string} POL Polish\n * @property {string} POR Portuguese\n * @property {string} PUS Pushto; Pashto\n * @property {string} RON Romanian; Moldavian; Moldovan\n * @property {string} RUS Russian\n * @property {string} SAN Sanskrit\n * @property {string} SIN Sinhala; Sinhalese\n * @property {string} SLK Slovak\n * @property {string} SLV Slovenian\n * @property {string} SPA Spanish; Castilian\n * @property {string} SPA_OLD Spanish; Castilian - Old\n * @property {string} SQI Albanian\n * @property {string} SRP Serbian\n * @property {string} SRP_LATN Serbian - Latin\n * @property {string} SWA Swahili\n * @property {string} SWE Swedish\n * @property {string} SYR Syriac\n * @property {string} TAM Tamil\n * @property {string} TEL Telugu\n * @property {string} TGK Tajik\n * @property {string} TGL Tagalog\n * @property {string} THA Thai\n * @property {string} TIR Tigrinya\n * @property {string} TUR Turkish\n * @property {string} UIG Uighur; Uyghur\n * @property {string} UKR Ukrainian\n * @property {string} URD Urdu\n * @property {string} UZB Uzbek\n * @property {string} UZB_CYRL Uzbek - Cyrillic\n * @property {string} VIE Vietnamese\n * @property {string} YID Yiddish\n */\n\n/**\n  * @type {Languages}\n  */\nmodule.exports = {\n  AFR: 'afr',\n  AMH: 'amh',\n  ARA: 'ara',\n  ASM: 'asm',\n  AZE: 'aze',\n  AZE_CYRL: 'aze_cyrl',\n  BEL: 'bel',\n  BEN: 'ben',\n  BOD: 'bod',\n  BOS: 'bos',\n  BUL: 'bul',\n  CAT: 'cat',\n  CEB: 'ceb',\n  CES: 'ces',\n  CHI_SIM: 'chi_sim',\n  CHI_TRA: 'chi_tra',\n  CHR: 'chr',\n  CYM: 'cym',\n  DAN: 'dan',\n  DEU: 'deu',\n  DZO: 'dzo',\n  ELL: 'ell',\n  ENG: 'eng',\n  ENM: 'enm',\n  EPO: 'epo',\n  EST: 'est',\n  EUS: 'eus',\n  FAS: 'fas',\n  FIN: 'fin',\n  FRA: 'fra',\n  FRK: 'frk',\n  FRM: 'frm',\n  GLE: 'gle',\n  GLG: 'glg',\n  GRC: 'grc',\n  GUJ: 'guj',\n  HAT: 'hat',\n  HEB: 'heb',\n  HIN: 'hin',\n  HRV: 'hrv',\n  HUN: 'hun',\n  IKU: 'iku',\n  IND: 'ind',\n  ISL: 'isl',\n  ITA: 'ita',\n  ITA_OLD: 'ita_old',\n  JAV: 'jav',\n  JPN: 'jpn',\n  KAN: 'kan',\n  KAT: 'kat',\n  KAT_OLD: 'kat_old',\n  KAZ: 'kaz',\n  KHM: 'khm',\n  KIR: 'kir',\n  KOR: 'kor',\n  KUR: 'kur',\n  LAO: 'lao',\n  LAT: 'lat',\n  LAV: 'lav',\n  LIT: 'lit',\n  MAL: 'mal',\n  MAR: 'mar',\n  MKD: 'mkd',\n  MLT: 'mlt',\n  MSA: 'msa',\n  MYA: 'mya',\n  NEP: 'nep',\n  NLD: 'nld',\n  NOR: 'nor',\n  ORI: 'ori',\n  PAN: 'pan',\n  POL: 'pol',\n  POR: 'por',\n  PUS: 'pus',\n  RON: 'ron',\n  RUS: 'rus',\n  SAN: 'san',\n  SIN: 'sin',\n  SLK: 'slk',\n  SLV: 'slv',\n  SPA: 'spa',\n  SPA_OLD: 'spa_old',\n  SQI: 'sqi',\n  SRP: 'srp',\n  SRP_LATN: 'srp_latn',\n  SWA: 'swa',\n  SWE: 'swe',\n  SYR: 'syr',\n  TAM: 'tam',\n  TEL: 'tel',\n  TGK: 'tgk',\n  TGL: 'tgl',\n  THA: 'tha',\n  TIR: 'tir',\n  TUR: 'tur',\n  UIG: 'uig',\n  UKR: 'ukr',\n  URD: 'urd',\n  UZB: 'uzb',\n  UZB_CYRL: 'uzb_cyrl',\n  VIE: 'vie',\n  YID: 'yid',\n};\n","/*\n * PSM = Page Segmentation Mode\n */\nmodule.exports = {\n  OSD_ONLY: '0',\n  AUTO_OSD: '1',\n  AUTO_ONLY: '2',\n  AUTO: '3',\n  SINGLE_COLUMN: '4',\n  SINGLE_BLOCK_VERT_TEXT: '5',\n  SINGLE_BLOCK: '6',\n  SINGLE_LINE: '7',\n  SINGLE_WORD: '8',\n  CIRCLE_WORD: '9',\n  SINGLE_CHAR: '10',\n  SPARSE_TEXT: '11',\n  SPARSE_TEXT_OSD: '12',\n  RAW_LINE: '13',\n};\n"]}